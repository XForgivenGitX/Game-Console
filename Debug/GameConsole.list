
GameConsole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d170  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800d280  0800d280  0001d280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d958  0800d958  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d958  0800d958  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d958  0800d958  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d958  0800d958  0001d958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000007c  0800d9e8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800d9e8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037cbd  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000679d  00000000  00000000  00057d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  0005e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b0  00000000  00000000  00060698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020448  00000000  00000000  00062748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e92a  00000000  00000000  00082b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad2f4  00000000  00000000  000a14ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f70  00000000  00000000  0014e800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d268 	.word	0x0800d268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800d268 	.word	0x0800d268

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fb04 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f809 	bl	8000a56 <_Z18SystemClock_Configv>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f8e4 	bl	8000c10 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000a48:	f000 f854 	bl	8000af4 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8000a4c:	f000 f8b2 	bl	8000bb4 <_ZL19MX_USART1_UART_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MainThread();
 8000a50:	f004 fb22 	bl	8005098 <_Z10MainThreadv>
 8000a54:	e7fc      	b.n	8000a50 <main+0x18>

08000a56 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b090      	sub	sp, #64	; 0x40
 8000a5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	2228      	movs	r2, #40	; 0x28
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00c fab9 	bl	800cfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a80:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fe32 	bl	8001708 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000ab4:	f000 f950 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f89a 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000ae8:	f000 f936 	bl	8000d58 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3740      	adds	r7, #64	; 0x40
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b12:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b18:	2247      	movs	r2, #71	; 0x47
 8000b1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3c:	481b      	ldr	r0, [pc, #108]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b3e:	f001 f9fd 	bl	8001f3c <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000b52:	f000 f901 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4619      	mov	r1, r3
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b64:	f001 fbc2 	bl	80022ec <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000b78:	f000 f8ee 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <_ZL12MX_TIM1_Initv+0xb8>)
 8000b8a:	f001 fd99 	bl	80026c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8000b9e:	f000 f8db 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000098 	.word	0x20000098
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_ZL19MX_USART1_UART_Initv+0x58>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bec:	f001 fdd8 	bl	80027a0 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000c00:	f000 f8aa 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000e0 	.word	0x200000e0
 8000c0c:	40013800 	.word	0x40013800

08000c10 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a46      	ldr	r2, [pc, #280]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a40      	ldr	r2, [pc, #256]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <_ZL12MX_GPIO_Initv+0x134>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_nCS_Pin|LCD_RS_Pin|LCD_nWR_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c8a:	482f      	ldr	r0, [pc, #188]	; (8000d48 <_ZL12MX_GPIO_Initv+0x138>)
 8000c8c:	f000 fd0b 	bl	80016a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_nRD_Pin|LED_Pin|LEDA15_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8000c96:	482d      	ldr	r0, [pc, #180]	; (8000d4c <_ZL12MX_GPIO_Initv+0x13c>)
 8000c98:	f000 fd05 	bl	80016a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f240 210f 	movw	r1, #527	; 0x20f
 8000ca2:	482b      	ldr	r0, [pc, #172]	; (8000d50 <_ZL12MX_GPIO_Initv+0x140>)
 8000ca4:	f000 fcff 	bl	80016a6 <HAL_GPIO_WritePin>
                          |LCD_nRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_nCS_Pin LCD_RS_Pin LCD_nWR_Pin */
  GPIO_InitStruct.Pin = LCD_nCS_Pin|LCD_RS_Pin|LCD_nWR_Pin;
 8000ca8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4821      	ldr	r0, [pc, #132]	; (8000d48 <_ZL12MX_GPIO_Initv+0x138>)
 8000cc2:	f000 fb55 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_nRD_Pin LED_Pin LEDA15_Pin */
  GPIO_InitStruct.Pin = LCD_nRD_Pin|LED_Pin|LEDA15_Pin;
 8000cc6:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <_ZL12MX_GPIO_Initv+0x13c>)
 8000ce0:	f000 fb46 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB3_Pin
                           LCD_nRESET_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 8000ce4:	f240 230f 	movw	r3, #527	; 0x20f
 8000ce8:	613b      	str	r3, [r7, #16]
                          |LCD_nRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4814      	ldr	r0, [pc, #80]	; (8000d50 <_ZL12MX_GPIO_Initv+0x140>)
 8000cfe:	f000 fb37 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin DB5_Pin DB6_Pin DB7_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin;
 8000d02:	23f0      	movs	r3, #240	; 0xf0
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_ZL12MX_GPIO_Initv+0x144>)
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <_ZL12MX_GPIO_Initv+0x140>)
 8000d16:	f000 fb2b 	bl	8001370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f000 faef 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f000 fb08 	bl	800133a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f000 fae7 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d34:	2017      	movs	r0, #23
 8000d36:	f000 fb00 	bl	800133a <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	10310000 	.word	0x10310000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x60>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_MspInit+0x60>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2019      	movs	r0, #25
 8000df8:	f000 fa83 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dfc:	2019      	movs	r0, #25
 8000dfe:	f000 fa9c 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d131      	bne.n	8000e98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e7a:	f000 fa79 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e94:	f000 fa6c 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	but::ButtonControlBlock::ButtonHandler();
 8000ef2:	f003 fb07 	bl	8004504 <_ZN3but18ButtonControlBlock13ButtonHandlerEv>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f8ed 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DB4_Pin);
 8000f02:	2010      	movs	r0, #16
 8000f04:	f000 fbe8 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DB5_Pin);
 8000f10:	2020      	movs	r0, #32
 8000f12:	f000 fbe1 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DB6_Pin);
 8000f16:	2040      	movs	r0, #64	; 0x40
 8000f18:	f000 fbde 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DB7_Pin);
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	f000 fbdb 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <TIM1_UP_IRQHandler+0x14>)
 8000f2e:	f001 f8d5 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  ISR_Delay_us_Timer();
 8000f32:	f003 f9ef 	bl	8004314 <_Z18ISR_Delay_us_Timerv>

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000098 	.word	0x20000098

08000f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return 1;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <_kill>:

int _kill(int pid, int sig)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f58:	f00b ffec 	bl	800cf34 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2216      	movs	r2, #22
 8000f60:	601a      	str	r2, [r3, #0]
  return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_exit>:

void _exit (int status)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f76:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffe7 	bl	8000f4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f80:	e7fe      	b.n	8000f80 <_exit+0x12>
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f00b ffbe 	bl	800cf34 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20005000 	.word	0x20005000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000124 	.word	0x20000124
 8000fec:	200001d0 	.word	0x200001d0

08000ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001022:	f7ff ffe5 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f00b ff8b 	bl	800cf40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102a:	f7ff fd05 	bl	8000a38 <main>
  bx lr
 800102e:	4770      	bx	lr
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001038:	0800d96c 	.word	0x0800d96c
  ldr r2, =_sbss
 800103c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001040:	200001cc 	.word	0x200001cc

08001044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x28>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x28>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f947 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	200f      	movs	r0, #15
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fe7e 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f95f 	bl	8001356 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f927 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x20>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000128 	.word	0x20000128

080010f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000128 	.word	0x20000128

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff fff0 	bl	80010f8 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffe0 	bl	80010f8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <__NVIC_EnableIRQ+0x34>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff90 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff2d 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff42 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff90 	bl	8001244 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5f 	bl	80011f0 <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff35 	bl	80011b8 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e169      	b.n	8001658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001384:	2201      	movs	r2, #1
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8158 	bne.w	8001652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a9a      	ldr	r2, [pc, #616]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d05e      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d875      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013b2:	4a98      	ldr	r2, [pc, #608]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d058      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013b8:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d86f      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013be:	4a96      	ldr	r2, [pc, #600]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d052      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013c4:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d869      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ca:	4a94      	ldr	r2, [pc, #592]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d04c      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013d0:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d863      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013d6:	4a92      	ldr	r2, [pc, #584]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d046      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013dc:	4a90      	ldr	r2, [pc, #576]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d85d      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d82a      	bhi.n	800143c <HAL_GPIO_Init+0xcc>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d859      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <HAL_GPIO_Init+0x80>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	0800146b 	.word	0x0800146b
 80013f4:	08001445 	.word	0x08001445
 80013f8:	08001457 	.word	0x08001457
 80013fc:	08001499 	.word	0x08001499
 8001400:	0800149f 	.word	0x0800149f
 8001404:	0800149f 	.word	0x0800149f
 8001408:	0800149f 	.word	0x0800149f
 800140c:	0800149f 	.word	0x0800149f
 8001410:	0800149f 	.word	0x0800149f
 8001414:	0800149f 	.word	0x0800149f
 8001418:	0800149f 	.word	0x0800149f
 800141c:	0800149f 	.word	0x0800149f
 8001420:	0800149f 	.word	0x0800149f
 8001424:	0800149f 	.word	0x0800149f
 8001428:	0800149f 	.word	0x0800149f
 800142c:	0800149f 	.word	0x0800149f
 8001430:	0800149f 	.word	0x0800149f
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001461 	.word	0x08001461
 800143c:	4a79      	ldr	r2, [pc, #484]	; (8001624 <HAL_GPIO_Init+0x2b4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e029      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e024      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01f      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e01a      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e013      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e009      	b.n	80014a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e003      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          break;
 800149e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d801      	bhi.n	80014aa <HAL_GPIO_Init+0x13a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	e001      	b.n	80014ae <HAL_GPIO_Init+0x13e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d802      	bhi.n	80014bc <HAL_GPIO_Init+0x14c>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x152>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3b08      	subs	r3, #8
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	210f      	movs	r1, #15
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	6a39      	ldr	r1, [r7, #32]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80b1 	beq.w	8001652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_GPIO_Init+0x2bc>)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a40      	ldr	r2, [pc, #256]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1ec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1e8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_GPIO_Init+0x2cc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1e0>
 800154c:	2303      	movs	r3, #3
 800154e:	e006      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001550:	2304      	movs	r3, #4
 8001552:	e004      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001554:	2302      	movs	r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 800155c:	2300      	movs	r3, #0
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156e:	492f      	ldr	r1, [pc, #188]	; (800162c <HAL_GPIO_Init+0x2bc>)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	492c      	ldr	r1, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4928      	ldr	r1, [pc, #160]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4922      	ldr	r1, [pc, #136]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	491e      	ldr	r1, [pc, #120]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4918      	ldr	r1, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4914      	ldr	r1, [pc, #80]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d021      	beq.n	8001644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
 800160c:	e021      	b.n	8001652 <HAL_GPIO_Init+0x2e2>
 800160e:	bf00      	nop
 8001610:	10320000 	.word	0x10320000
 8001614:	10310000 	.word	0x10310000
 8001618:	10220000 	.word	0x10220000
 800161c:	10210000 	.word	0x10210000
 8001620:	10120000 	.word	0x10120000
 8001624:	10110000 	.word	0x10110000
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011000 	.word	0x40011000
 800163c:	40011400 	.word	0x40011400
 8001640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_GPIO_Init+0x304>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <HAL_GPIO_Init+0x304>)
 800164e:	4013      	ands	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae8e 	bne.w	8001384 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	372c      	adds	r7, #44	; 0x2c
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
 80016b2:	4613      	mov	r3, r2
 80016b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c2:	e003      	b.n	80016cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	041a      	lsls	r2, r3, #16
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fb4e 	bl	8004d98 <HAL_GPIO_EXTI_Callback>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e272      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
 8001740:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d06c      	beq.n	8001834 <HAL_RCC_OscConfig+0x12c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d168      	bne.n	8001834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e24c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x76>
 8001770:	4b80      	ldr	r3, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7f      	ldr	r2, [pc, #508]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7b      	ldr	r3, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7a      	ldr	r2, [pc, #488]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017aa:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a67      	ldr	r2, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc88 	bl	80010f8 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fc84 	bl	80010f8 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e200      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xe4>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fc74 	bl	80010f8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fc70 	bl	80010f8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x10c>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c0      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4939      	ldr	r1, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc29 	bl	80010f8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc25 	bl	80010f8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc08 	bl	80010f8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fc04 	bl	80010f8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e180      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fbe8 	bl	80010f8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fbe4 	bl	80010f8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e160      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 fad8 	bl	8001f00 <RCC_Delay>
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fbce 	bl	80010f8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fbca 	bl	80010f8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d908      	bls.n	8001980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e146      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a87      	ldr	r2, [pc, #540]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff fb8b 	bl	80010f8 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff fb87 	bl	80010f8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e103      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e02d      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x356>
 8001a44:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a60      	ldr	r2, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a5d      	ldr	r2, [pc, #372]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fb3b 	bl	80010f8 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fb37 	bl	80010f8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0b1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x37e>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fb25 	bl	80010f8 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fb21 	bl	80010f8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e09b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d061      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d146      	bne.n	8001b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff faf5 	bl	80010f8 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff faf1 	bl	80010f8 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e06d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4921      	ldr	r1, [pc, #132]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	491b      	ldr	r1, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fac5 	bl	80010f8 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fac1 	bl	80010f8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
 8001b90:	e035      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff faae 	bl	80010f8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff faaa 	bl	80010f8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x498>
 8001bbe:	e01e      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e019      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x500>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4965      	ldr	r1, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e073      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f9fc 	bl	80010f8 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f9f8 	bl	80010f8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e053      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d210      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4922      	ldr	r1, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1d0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f95a 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	0800d410 	.word	0x0800d410
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b490      	push	{r4, r7}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xac>)
 8001de8:	1d3c      	adds	r4, r7, #4
 8001dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001df0:	f240 2301 	movw	r3, #513	; 0x201
 8001df4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x46>
 8001e1e:	e02b      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e22:	623b      	str	r3, [r7, #32]
      break;
 8001e24:	e02b      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3328      	adds	r3, #40	; 0x28
 8001e30:	443b      	add	r3, r7
 8001e32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0c5b      	lsrs	r3, r3, #17
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	3328      	adds	r3, #40	; 0x28
 8001e4e:	443b      	add	r3, r7
 8001e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	623b      	str	r3, [r7, #32]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc90      	pop	{r4, r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	0800d280 	.word	0x0800d280
 8001e90:	40021000 	.word	0x40021000
 8001e94:	007a1200 	.word	0x007a1200
 8001e98:	003d0900 	.word	0x003d0900

08001e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b02      	ldr	r3, [pc, #8]	; (8001eac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000000 	.word	0x20000000

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb4:	f7ff fff2 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	0800d420 	.word	0x0800d420

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	0800d420 	.word	0x0800d420

08001f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <RCC_Delay+0x34>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <RCC_Delay+0x38>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0a5b      	lsrs	r3, r3, #9
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f1c:	bf00      	nop
  }
  while (Delay --);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	60fa      	str	r2, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f9      	bne.n	8001f1c <RCC_Delay+0x1c>
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000000 	.word	0x20000000
 8001f38:	10624dd3 	.word	0x10624dd3

08001f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e041      	b.n	8001fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe ff30 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 faa8 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d001      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e03a      	b.n	800206a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_Base_Start_IT+0x98>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00e      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x58>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d009      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x58>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_TIM_Base_Start_IT+0x9c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x58>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_TIM_Base_Start_IT+0xa0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b06      	cmp	r3, #6
 8002044:	d010      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002056:	e007      	b.n	8002068 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40012c00 	.word	0x40012c00
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800

08002080 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	f241 1311 	movw	r3, #4369	; 0x1111
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <HAL_TIM_Base_Stop_IT+0x48>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	f240 4344 	movw	r3, #1092	; 0x444
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_Base_Stop_IT+0x48>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9ba 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9ad 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f9bc 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f990 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f983 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f992 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f966 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f959 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f968 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f93c 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f92f 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f93e 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f90a 	bl	8002474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa81 	bl	800278e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f902 	bl	80024bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa4c 	bl	800277c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x18>
 8002300:	2302      	movs	r3, #2
 8002302:	e0b3      	b.n	800246c <HAL_TIM_ConfigClockSource+0x180>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d03e      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0xd0>
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	f200 8087 	bhi.w	8002454 <HAL_TIM_ConfigClockSource+0x168>
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	f000 8085 	beq.w	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d87f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	d01a      	beq.n	800238e <HAL_TIM_ConfigClockSource+0xa2>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d87b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 800235c:	2b60      	cmp	r3, #96	; 0x60
 800235e:	d050      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x116>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d877      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 8002364:	2b50      	cmp	r3, #80	; 0x50
 8002366:	d03c      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d873      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d058      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x136>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d86f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	d064      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x156>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d86b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d060      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x156>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d867      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x156>
 8002388:	2b10      	cmp	r3, #16
 800238a:	d05a      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800238c:	e062      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f000 f970 	bl	8002682 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
      break;
 80023ba:	e04e      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f000 f959 	bl	8002682 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023de:	609a      	str	r2, [r3, #8]
      break;
 80023e0:	e03b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f000 f8d0 	bl	8002594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2150      	movs	r1, #80	; 0x50
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f927 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 8002400:	e02b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 f8ee 	bl	80025f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2160      	movs	r1, #96	; 0x60
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f917 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 8002420:	e01b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	f000 f8b0 	bl	8002594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f907 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 8002440:	e00b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f000 f8fe 	bl	800264e <TIM_ITRx_SetConfig>
        break;
 8002452:	e002      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a29      	ldr	r2, [pc, #164]	; (8002588 <TIM_Base_SetConfig+0xb8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x30>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x30>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a26      	ldr	r2, [pc, #152]	; (800258c <TIM_Base_SetConfig+0xbc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x30>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <TIM_Base_SetConfig+0xc0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <TIM_Base_SetConfig+0xb8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d007      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <TIM_Base_SetConfig+0xbc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <TIM_Base_SetConfig+0xc0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <TIM_Base_SetConfig+0xb8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d103      	bne.n	8002578 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	615a      	str	r2, [r3, #20]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800

08002594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f023 0201 	bic.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 030a 	bic.w	r3, r3, #10
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 0210 	bic.w	r2, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800261a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800262c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	621a      	str	r2, [r3, #32]
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 0307 	orr.w	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e046      	b.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d009      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10c      	bne.n	8002754 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4313      	orrs	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800

0800277c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e03f      	b.n	8002832 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fb24 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f829 	bl	800283c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002876:	f023 030c 	bic.w	r3, r3, #12
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	430b      	orrs	r3, r1
 8002882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <UART_SetConfig+0x114>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff fb18 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	e002      	b.n	80028b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028ac:	f7ff fb00 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 80028b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <UART_SetConfig+0x118>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	0119      	lsls	r1, r3, #4
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009a      	lsls	r2, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <UART_SetConfig+0x118>)
 80028ea:	fba3 0302 	umull	r0, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	fb00 f303 	mul.w	r3, r0, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <UART_SetConfig+0x118>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	4419      	add	r1, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <UART_SetConfig+0x118>)
 8002922:	fba3 0302 	umull	r0, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	fb00 f303 	mul.w	r3, r0, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	3332      	adds	r3, #50	; 0x32
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <UART_SetConfig+0x118>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	440a      	add	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40013800 	.word	0x40013800
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <_Z9tft_beginv>:
#ifndef abs
#define abs(a) ((a)<0?-(a):a)
#endif

uint16_t tft_begin(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
     WIDTH = TFTWIDTH;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <_Z9tft_beginv+0x70>)
 800295e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002962:	801a      	strh	r2, [r3, #0]
     HEIGHT = TFTHEIGHT;
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <_Z9tft_beginv+0x74>)
 8002966:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800296a:	801a      	strh	r2, [r3, #0]
    _width    = WIDTH;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <_Z9tft_beginv+0x70>)
 800296e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <_Z9tft_beginv+0x78>)
 8002974:	801a      	strh	r2, [r3, #0]
    _height   = HEIGHT;
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <_Z9tft_beginv+0x74>)
 8002978:	f9b3 2000 	ldrsh.w	r2, [r3]
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_Z9tft_beginv+0x7c>)
 800297e:	801a      	strh	r2, [r3, #0]
    rotation  = 0;
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <_Z9tft_beginv+0x80>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
    cursor_y  = cursor_x    = 0;
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <_Z9tft_beginv+0x84>)
 8002988:	2200      	movs	r2, #0
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <_Z9tft_beginv+0x84>)
 800298e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_Z9tft_beginv+0x88>)
 8002994:	801a      	strh	r2, [r3, #0]
    textsize  = 1;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <_Z9tft_beginv+0x8c>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
    textcolor = textbgcolor = 0xFFFF;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <_Z9tft_beginv+0x90>)
 800299e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_Z9tft_beginv+0x90>)
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <_Z9tft_beginv+0x94>)
 80029aa:	801a      	strh	r2, [r3, #0]
    wrap      = true;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <_Z9tft_beginv+0x98>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    gfxFont   = NULL;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_Z9tft_beginv+0x9c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
		tft_setFont(NULL);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 fd1f 	bl	80033fc <_Z11tft_setFontPK7GFXfont>
    return ili9341_begin();
 80029be:	f000 fec9 	bl	8003754 <_Z13ili9341_beginv>
 80029c2:	4603      	mov	r3, r0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000012c 	.word	0x2000012c
 80029cc:	2000012e 	.word	0x2000012e
 80029d0:	20000130 	.word	0x20000130
 80029d4:	20000132 	.word	0x20000132
 80029d8:	2000013d 	.word	0x2000013d
 80029dc:	20000134 	.word	0x20000134
 80029e0:	20000136 	.word	0x20000136
 80029e4:	2000013c 	.word	0x2000013c
 80029e8:	2000013a 	.word	0x2000013a
 80029ec:	20000138 	.word	0x20000138
 80029f0:	2000013e 	.word	0x2000013e
 80029f4:	20000140 	.word	0x20000140

080029f8 <_Z14tft_writePixelsst>:
    }
}


void tft_writePixel(int16_t x, int16_t y, uint16_t color)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	460b      	mov	r3, r1
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	807b      	strh	r3, [r7, #2]
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fa0a 	bl	8003e2e <_Z9drawPixelsst>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_Z18tft_writeFastVLinessst>:

void tft_writeFastVLine(int16_t x, int16_t y,int16_t h, uint16_t color)
{
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4604      	mov	r4, r0
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4623      	mov	r3, r4
 8002a32:	80fb      	strh	r3, [r7, #6]
 8002a34:	4603      	mov	r3, r0
 8002a36:	80bb      	strh	r3, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	803b      	strh	r3, [r7, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 8002a40:	883b      	ldrh	r3, [r7, #0]
 8002a42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a4e:	f001 f905 	bl	8003c5c <_Z13drawFastVLinessst>
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}

08002a5a <_Z17tft_writeFillRectsssst>:



void tft_writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color)
{
 8002a5a:	b590      	push	{r4, r7, lr}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	4604      	mov	r4, r0
 8002a62:	4608      	mov	r0, r1
 8002a64:	4611      	mov	r1, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	80fb      	strh	r3, [r7, #6]
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	80bb      	strh	r3, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	803b      	strh	r3, [r7, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 8002a78:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002a7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a80:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a84:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a88:	8b3b      	ldrh	r3, [r7, #24]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	f001 f945 	bl	8003d1c <_Z8fillRectsssst>
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
	...

08002a9c <_Z14tft_fillScreent>:

void tft_fillScreen(uint16_t color)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <_Z14tft_fillScreent+0x2c>)
 8002aa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <_Z14tft_fillScreent+0x30>)
 8002aae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 f92e 	bl	8003d1c <_Z8fillRectsssst>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000130 	.word	0x20000130
 8002acc:	20000132 	.word	0x20000132

08002ad0 <_Z20tft_fillCircleHelperssshst>:
    tft_fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void tft_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4623      	mov	r3, r4
 8002ae0:	80fb      	strh	r3, [r7, #6]
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80bb      	strh	r3, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	807b      	strh	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	f1c3 0301 	rsb	r3, r3, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8002af8:	2301      	movs	r3, #1
 8002afa:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	461a      	mov	r2, r3
 8002b00:	03d2      	lsls	r2, r2, #15
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	81fb      	strh	r3, [r7, #14]

    while (x<y)
 8002b12:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	f280 8085 	bge.w	8002c2a <_Z20tft_fillCircleHelperssshst+0x15a>
    {
        if (f >= 0)
 8002b20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0e      	blt.n	8002b46 <_Z20tft_fillCircleHelperssshst+0x76>
        {
            y--;
 8002b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002b34:	8a7b      	ldrh	r3, [r7, #18]
 8002b36:	3302      	adds	r3, #2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8002b3c:	8afa      	ldrh	r2, [r7, #22]
 8002b3e:	8a7b      	ldrh	r3, [r7, #18]
 8002b40:	4413      	add	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002b46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002b52:	8abb      	ldrh	r3, [r7, #20]
 8002b54:	3302      	adds	r3, #2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8002b5a:	8afa      	ldrh	r2, [r7, #22]
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	82fb      	strh	r3, [r7, #22]

        if (cornername & 0x1)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02b      	beq.n	8002bc6 <_Z20tft_fillCircleHelperssshst+0xf6>
        {
            tft_writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	8a3b      	ldrh	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b218      	sxth	r0, r3
 8002b78:	88ba      	ldrh	r2, [r7, #4]
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b219      	sxth	r1, r3
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b96:	f7ff ff44 	bl	8002a22 <_Z18tft_writeFastVLinessst>
            tft_writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b218      	sxth	r0, r3
 8002ba4:	88ba      	ldrh	r2, [r7, #4]
 8002ba6:	8a3b      	ldrh	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b219      	sxth	r1, r3
 8002bae:	8a3b      	ldrh	r3, [r7, #16]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bc2:	f7ff ff2e 	bl	8002a22 <_Z18tft_writeFastVLinessst>
        }
        if (cornername & 0x2)
 8002bc6:	787b      	ldrb	r3, [r7, #1]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0a0      	beq.n	8002b12 <_Z20tft_fillCircleHelperssshst+0x42>
        {
            tft_writeFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b218      	sxth	r0, r3
 8002bda:	88ba      	ldrh	r2, [r7, #4]
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b219      	sxth	r1, r3
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bec:	4413      	add	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bf8:	f7ff ff13 	bl	8002a22 <_Z18tft_writeFastVLinessst>
            tft_writeFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8002bfc:	88fa      	ldrh	r2, [r7, #6]
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b218      	sxth	r0, r3
 8002c06:	88ba      	ldrh	r2, [r7, #4]
 8002c08:	8a3b      	ldrh	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b219      	sxth	r1, r3
 8002c10:	8a3b      	ldrh	r3, [r7, #16]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c18:	4413      	add	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c24:	f7ff fefd 	bl	8002a22 <_Z18tft_writeFastVLinessst>
    while (x<y)
 8002c28:	e773      	b.n	8002b12 <_Z20tft_fillCircleHelperssshst+0x42>
        }
    }
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <_Z17tft_fillRoundRectssssst>:
    tft_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

// Fill a rounded rectangle
void tft_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	4604      	mov	r4, r0
 8002c3a:	4608      	mov	r0, r1
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4623      	mov	r3, r4
 8002c42:	80fb      	strh	r3, [r7, #6]
 8002c44:	4603      	mov	r3, r0
 8002c46:	80bb      	strh	r3, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	803b      	strh	r3, [r7, #0]
    // smarter version
    tft_writeFillRect(x+r, y, w-2*r, h, color);
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	8b3b      	ldrh	r3, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b218      	sxth	r0, r3
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	8b3b      	ldrh	r3, [r7, #24]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002c6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c70:	8bbb      	ldrh	r3, [r7, #28]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	4623      	mov	r3, r4
 8002c76:	f7ff fef0 	bl	8002a5a <_Z17tft_writeFillRectsssst>

    // draw four corners
    tft_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	8b3b      	ldrh	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b218      	sxth	r0, r3
 8002c8e:	88ba      	ldrh	r2, [r7, #4]
 8002c90:	8b3b      	ldrh	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b219      	sxth	r1, r3
 8002c98:	883a      	ldrh	r2, [r7, #0]
 8002c9a:	8b3b      	ldrh	r3, [r7, #24]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002cae:	8bba      	ldrh	r2, [r7, #28]
 8002cb0:	9201      	str	r2, [sp, #4]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	f7ff ff0a 	bl	8002ad0 <_Z20tft_fillCircleHelperssshst>
    tft_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	8b3b      	ldrh	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b218      	sxth	r0, r3
 8002cc6:	88ba      	ldrh	r2, [r7, #4]
 8002cc8:	8b3b      	ldrh	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b219      	sxth	r1, r3
 8002cd0:	883a      	ldrh	r2, [r7, #0]
 8002cd2:	8b3b      	ldrh	r3, [r7, #24]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002ce6:	8bba      	ldrh	r2, [r7, #28]
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2302      	movs	r3, #2
 8002cee:	4622      	mov	r2, r4
 8002cf0:	f7ff feee 	bl	8002ad0 <_Z20tft_fillCircleHelperssshst>
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <_Z12tft_drawCharsshtth>:
    }
}

// Draw a character
void tft_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b08d      	sub	sp, #52	; 0x34
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	4604      	mov	r4, r0
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	80fb      	strh	r3, [r7, #6]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80bb      	strh	r3, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
 8002d16:	4613      	mov	r3, r2
 8002d18:	803b      	strh	r3, [r7, #0]

    if(!gfxFont)
 8002d1a:	4bb4      	ldr	r3, [pc, #720]	; (8002fec <_Z12tft_drawCharsshtth+0x2f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80e2 	bne.w	8002ee8 <_Z12tft_drawCharsshtth+0x1ec>
    { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
 8002d24:	4bb2      	ldr	r3, [pc, #712]	; (8002ff0 <_Z12tft_drawCharsshtth+0x2f4>)
 8002d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	f280 819e 	bge.w	8003070 <_Z12tft_drawCharsshtth+0x374>
                (y >= _height)           || // Clip bottom
 8002d34:	4baf      	ldr	r3, [pc, #700]	; (8002ff4 <_Z12tft_drawCharsshtth+0x2f8>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
        if((x >= _width)            || // Clip right
 8002d3a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f280 8196 	bge.w	8003070 <_Z12tft_drawCharsshtth+0x374>
                ((x + 6 * size - 1) < 0) || // Clip left
 8002d44:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002d48:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	440b      	add	r3, r1
                (y >= _height)           || // Clip bottom
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f340 818a 	ble.w	8003070 <_Z12tft_drawCharsshtth+0x374>
                ((y + 8 * size - 1) < 0))   // Clip top
 8002d5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
                ((x + 6 * size - 1) < 0) || // Clip left
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f340 8181 	ble.w	8003070 <_Z12tft_drawCharsshtth+0x374>
            return;


        for(int8_t i=0; i<6; i++ )
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	f300 817a 	bgt.w	8003072 <_Z12tft_drawCharsshtth+0x376>
        {
            uint8_t line;
            if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 8002d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	dc0d      	bgt.n	8002da2 <_Z12tft_drawCharsshtth+0xa6>
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d94:	4413      	add	r3, r2
 8002d96:	4a98      	ldr	r2, [pc, #608]	; (8002ff8 <_Z12tft_drawCharsshtth+0x2fc>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002da0:	e002      	b.n	8002da8 <_Z12tft_drawCharsshtth+0xac>
            else      line = 0x0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            for(int8_t j=0; j<8; j++, line >>= 1)
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002dae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	f300 8090 	bgt.w	8002ed8 <_Z12tft_drawCharsshtth+0x1dc>
            {
                if(line & 0x1)
 8002db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03c      	beq.n	8002e3e <_Z12tft_drawCharsshtth+0x142>
                {
                    if(size == 1) tft_writePixel(x+i, y+j, color);
 8002dc4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d112      	bne.n	8002df2 <_Z12tft_drawCharsshtth+0xf6>
 8002dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b218      	sxth	r0, r3
 8002dda:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	883a      	ldrh	r2, [r7, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7ff fe04 	bl	80029f8 <_Z14tft_writePixelsst>
 8002df0:	e065      	b.n	8002ebe <_Z12tft_drawCharsshtth+0x1c2>
                    else          tft_writeFillRect(x+(i*size), y+(j*size), size, size, color);
 8002df2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	4413      	add	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b218      	sxth	r0, r3
 8002e0c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002e16:	b292      	uxth	r2, r2
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	88bb      	ldrh	r3, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b219      	sxth	r1, r3
 8002e26:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e2a:	b21a      	sxth	r2, r3
 8002e2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e30:	b21c      	sxth	r4, r3
 8002e32:	883b      	ldrh	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4623      	mov	r3, r4
 8002e38:	f7ff fe0f 	bl	8002a5a <_Z17tft_writeFillRectsssst>
 8002e3c:	e03f      	b.n	8002ebe <_Z12tft_drawCharsshtth+0x1c2>
                }
                else if(bg != color)
 8002e3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e40:	883b      	ldrh	r3, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d03b      	beq.n	8002ebe <_Z12tft_drawCharsshtth+0x1c2>
                {
                    if(size == 1) tft_writePixel(x+i, y+j, bg);
 8002e46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d112      	bne.n	8002e74 <_Z12tft_drawCharsshtth+0x178>
 8002e4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	4413      	add	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b218      	sxth	r0, r3
 8002e5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7ff fdc3 	bl	80029f8 <_Z14tft_writePixelsst>
 8002e72:	e024      	b.n	8002ebe <_Z12tft_drawCharsshtth+0x1c2>
                    else          tft_writeFillRect(x+i*size, y+j*size, size, size, bg);
 8002e74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4413      	add	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b218      	sxth	r0, r3
 8002e8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b219      	sxth	r1, r3
 8002ea8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002eb2:	b21c      	sxth	r4, r3
 8002eb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4623      	mov	r3, r4
 8002eba:	f7ff fdce 	bl	8002a5a <_Z17tft_writeFillRectsssst>
            for(int8_t j=0; j<8; j++, line >>= 1)
 8002ebe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ed6:	e76a      	b.n	8002dae <_Z12tft_drawCharsshtth+0xb2>
        for(int8_t i=0; i<6; i++ )
 8002ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ee6:	e745      	b.n	8002d74 <_Z12tft_drawCharsshtth+0x78>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling drawChar()
        // directly with 'bad' characters of font may cause mayhem!

        c -= pgm_read_byte(&gfxFont->first);
 8002ee8:	4b40      	ldr	r3, [pc, #256]	; (8002fec <_Z12tft_drawCharsshtth+0x2f0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	00da      	lsls	r2, r3, #3
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <_Z12tft_drawCharsshtth+0x2f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3304      	adds	r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <_Z12tft_drawCharsshtth+0x2f0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3302      	adds	r3, #2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	73fb      	strb	r3, [r7, #15]
                h  = pgm_read_byte(&glyph->height);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	73bb      	strb	r3, [r7, #14]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3305      	adds	r3, #5
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	737b      	strb	r3, [r7, #13]
                yo = pgm_read_byte(&glyph->yOffset);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3306      	adds	r3, #6
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	733b      	strb	r3, [r7, #12]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77bb      	strb	r3, [r7, #30]
        int16_t  xo16 = 0, yo16 = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	83bb      	strh	r3, [r7, #28]
 8002f40:	2300      	movs	r3, #0
 8002f42:	837b      	strh	r3, [r7, #26]

        if(size > 1)
 8002f44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d905      	bls.n	8002f58 <_Z12tft_drawCharsshtth+0x25c>
        {
            xo16 = xo;
 8002f4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f50:	83bb      	strh	r3, [r7, #28]
            yo16 = yo;
 8002f52:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002f56:	837b      	strh	r3, [r7, #26]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        for(yy=0; yy<h; yy++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3020 	strb.w	r3, [r7, #32]
 8002f5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f62:	7bbb      	ldrb	r3, [r7, #14]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f080 8084 	bcs.w	8003072 <_Z12tft_drawCharsshtth+0x376>
        {
            for(xx=0; xx<w; xx++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002f70:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d274      	bcs.n	8003064 <_Z12tft_drawCharsshtth+0x368>
            {
                if(!(bit++ & 7))
 8002f7a:	7fbb      	ldrb	r3, [r7, #30]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	77ba      	strb	r2, [r7, #30]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <_Z12tft_drawCharsshtth+0x2a6>
                {
                    bits = pgm_read_byte(&bitmap[bo++]);
 8002f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	847a      	strh	r2, [r7, #34]	; 0x22
 8002f98:	461a      	mov	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	77fb      	strb	r3, [r7, #31]
                }
                if(bits & 0x80)
 8002fa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da53      	bge.n	8003052 <_Z12tft_drawCharsshtth+0x356>
                {
                    if(size == 1)
 8002faa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d124      	bne.n	8002ffc <_Z12tft_drawCharsshtth+0x300>
                    {
                        tft_writePixel(x+xo+xx, y+yo+yy, color);
 8002fb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	b218      	sxth	r0, r3
 8002fca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	883a      	ldrh	r2, [r7, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7ff fd07 	bl	80029f8 <_Z14tft_writePixelsst>
 8002fea:	e032      	b.n	8003052 <_Z12tft_drawCharsshtth+0x356>
 8002fec:	20000140 	.word	0x20000140
 8002ff0:	20000130 	.word	0x20000130
 8002ff4:	20000132 	.word	0x20000132
 8002ff8:	0800d428 	.word	0x0800d428
                    }
                    else
                    {
                        tft_writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 8002ffc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003000:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003004:	4413      	add	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800300c:	b292      	uxth	r2, r2
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	b29a      	uxth	r2, r3
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	4413      	add	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	b218      	sxth	r0, r3
 800301c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003024:	4413      	add	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800302c:	b292      	uxth	r2, r2
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	b29a      	uxth	r2, r3
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	b219      	sxth	r1, r3
 800303c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003040:	b21a      	sxth	r2, r3
 8003042:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003046:	b21c      	sxth	r4, r3
 8003048:	883b      	ldrh	r3, [r7, #0]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4623      	mov	r3, r4
 800304e:	f7ff fd04 	bl	8002a5a <_Z17tft_writeFillRectsssst>
                    }
                }
                bits <<= 1;
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	77fb      	strb	r3, [r7, #31]
            for(xx=0; xx<w; xx++)
 8003058:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800305c:	3301      	adds	r3, #1
 800305e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003062:	e785      	b.n	8002f70 <_Z12tft_drawCharsshtth+0x274>
        for(yy=0; yy<h; yy++)
 8003064:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003068:	3301      	adds	r3, #1
 800306a:	f887 3020 	strb.w	r3, [r7, #32]
 800306e:	e776      	b.n	8002f5e <_Z12tft_drawCharsshtth+0x262>
            return;
 8003070:	bf00      	nop
            }
        }
    } // End classic vs custom font
}
 8003072:	372c      	adds	r7, #44	; 0x2c
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <_Z9tft_writeh>:


void tft_write(uint8_t c)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
    if(!gfxFont) { // 'Classic' built-in font
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <_Z9tft_writeh+0x22c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d163      	bne.n	8003152 <_Z9tft_writeh+0xda>

        if(c == '\n')
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b0a      	cmp	r3, #10
 800308e:	d111      	bne.n	80030b4 <_Z9tft_writeh+0x3c>
        {
            cursor_y += textsize*8;
 8003090:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b84      	ldr	r3, [pc, #528]	; (80032ac <_Z9tft_writeh+0x234>)
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b21a      	sxth	r2, r3
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <_Z9tft_writeh+0x234>)
 80030aa:	801a      	strh	r2, [r3, #0]
            cursor_x  = 0;
 80030ac:	4b80      	ldr	r3, [pc, #512]	; (80032b0 <_Z9tft_writeh+0x238>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	801a      	strh	r2, [r3, #0]
                cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
            }
        }

    }
}
 80030b2:	e0f3      	b.n	800329c <_Z9tft_writeh+0x224>
        } else if(c == '\r')
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2b0d      	cmp	r3, #13
 80030b8:	f000 80f0 	beq.w	800329c <_Z9tft_writeh+0x224>
            if(wrap && ((cursor_x + textsize * 6) >= _width))
 80030bc:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <_Z9tft_writeh+0x23c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <_Z9tft_writeh+0x90>
 80030c4:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <_Z9tft_writeh+0x238>)
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <_Z9tft_writeh+0x230>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	440b      	add	r3, r1
 80030dc:	4a76      	ldr	r2, [pc, #472]	; (80032b8 <_Z9tft_writeh+0x240>)
 80030de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	db10      	blt.n	8003108 <_Z9tft_writeh+0x90>
                cursor_x  = 0;            // Reset x to zero
 80030e6:	4b72      	ldr	r3, [pc, #456]	; (80032b0 <_Z9tft_writeh+0x238>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	801a      	strh	r2, [r3, #0]
                cursor_y += textsize * 8; // Advance y one line
 80030ec:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <_Z9tft_writeh+0x230>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <_Z9tft_writeh+0x234>)
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4413      	add	r3, r2
 8003100:	b29b      	uxth	r3, r3
 8003102:	b21a      	sxth	r2, r3
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <_Z9tft_writeh+0x234>)
 8003106:	801a      	strh	r2, [r3, #0]
            tft_drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8003108:	4b69      	ldr	r3, [pc, #420]	; (80032b0 <_Z9tft_writeh+0x238>)
 800310a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <_Z9tft_writeh+0x234>)
 8003110:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003114:	4b69      	ldr	r3, [pc, #420]	; (80032bc <_Z9tft_writeh+0x244>)
 8003116:	881d      	ldrh	r5, [r3, #0]
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <_Z9tft_writeh+0x248>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <_Z9tft_writeh+0x230>)
 800311e:	7812      	ldrb	r2, [r2, #0]
 8003120:	79fc      	ldrb	r4, [r7, #7]
 8003122:	9201      	str	r2, [sp, #4]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	462b      	mov	r3, r5
 8003128:	4622      	mov	r2, r4
 800312a:	f7ff fde7 	bl	8002cfc <_Z12tft_drawCharsshtth>
            cursor_x += textsize * 6;
 800312e:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	0052      	lsls	r2, r2, #1
 8003138:	4413      	add	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <_Z9tft_writeh+0x238>)
 8003140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4413      	add	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	b21a      	sxth	r2, r3
 800314c:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <_Z9tft_writeh+0x238>)
 800314e:	801a      	strh	r2, [r3, #0]
}
 8003150:	e0a4      	b.n	800329c <_Z9tft_writeh+0x224>
        if(c == '\n')
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b0a      	cmp	r3, #10
 8003156:	d117      	bne.n	8003188 <_Z9tft_writeh+0x110>
            cursor_x  = 0;
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <_Z9tft_writeh+0x238>)
 800315a:	2200      	movs	r2, #0
 800315c:	801a      	strh	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 800315e:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
                    (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8003164:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <_Z9tft_writeh+0x22c>)
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	320a      	adds	r2, #10
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	b292      	uxth	r2, r2
            cursor_y += (int16_t)textsize *
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <_Z9tft_writeh+0x234>)
 8003176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4413      	add	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	b21a      	sxth	r2, r3
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <_Z9tft_writeh+0x234>)
 8003184:	801a      	strh	r2, [r3, #0]
}
 8003186:	e089      	b.n	800329c <_Z9tft_writeh+0x224>
        else if(c != '\r')
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b0d      	cmp	r3, #13
 800318c:	f000 8086 	beq.w	800329c <_Z9tft_writeh+0x224>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8003190:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <_Z9tft_writeh+0x22c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3308      	adds	r3, #8
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last)))
 800319a:	79fa      	ldrb	r2, [r7, #7]
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d37c      	bcc.n	800329c <_Z9tft_writeh+0x224>
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <_Z9tft_writeh+0x22c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3309      	adds	r3, #9
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d875      	bhi.n	800329c <_Z9tft_writeh+0x224>
                uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <_Z9tft_writeh+0x22c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3308      	adds	r3, #8
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	75bb      	strb	r3, [r7, #22]
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
 80031be:	7dbb      	ldrb	r3, [r7, #22]
 80031c0:	00da      	lsls	r2, r3, #3
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <_Z9tft_writeh+0x22c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3304      	adds	r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3302      	adds	r3, #2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	73fb      	strb	r3, [r7, #15]
                        h     = pgm_read_byte(&glyph->height);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3303      	adds	r3, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0))
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d048      	beq.n	8003276 <_Z9tft_writeh+0x1fe>
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d045      	beq.n	8003276 <_Z9tft_writeh+0x1fe>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3305      	adds	r3, #5
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) >= _width))
 80031f4:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <_Z9tft_writeh+0x23c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d029      	beq.n	8003250 <_Z9tft_writeh+0x1d8>
 80031fc:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <_Z9tft_writeh+0x238>)
 80031fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003202:	4619      	mov	r1, r3
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	4413      	add	r3, r2
 8003212:	fb00 f303 	mul.w	r3, r0, r3
 8003216:	440b      	add	r3, r1
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <_Z9tft_writeh+0x240>)
 800321a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800321e:	4293      	cmp	r3, r2
 8003220:	db16      	blt.n	8003250 <_Z9tft_writeh+0x1d8>
                        cursor_x  = 0;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <_Z9tft_writeh+0x238>)
 8003224:	2200      	movs	r2, #0
 8003226:	801a      	strh	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <_Z9tft_writeh+0x230>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
                                (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800322e:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <_Z9tft_writeh+0x22c>)
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	320a      	adds	r2, #10
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	b292      	uxth	r2, r2
                        cursor_y += (int16_t)textsize *
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <_Z9tft_writeh+0x234>)
 8003240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003244:	b29b      	uxth	r3, r3
 8003246:	4413      	add	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	b21a      	sxth	r2, r3
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <_Z9tft_writeh+0x234>)
 800324e:	801a      	strh	r2, [r3, #0]
                    tft_drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8003250:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <_Z9tft_writeh+0x238>)
 8003252:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <_Z9tft_writeh+0x234>)
 8003258:	f9b3 1000 	ldrsh.w	r1, [r3]
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <_Z9tft_writeh+0x244>)
 800325e:	881d      	ldrh	r5, [r3, #0]
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <_Z9tft_writeh+0x248>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	79fc      	ldrb	r4, [r7, #7]
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	462b      	mov	r3, r5
 8003270:	4622      	mov	r2, r4
 8003272:	f7ff fd43 	bl	8002cfc <_Z12tft_drawCharsshtth>
                cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3304      	adds	r3, #4
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <_Z9tft_writeh+0x230>)
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	b292      	uxth	r2, r2
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <_Z9tft_writeh+0x238>)
 800328c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4413      	add	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	b21a      	sxth	r2, r3
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <_Z9tft_writeh+0x238>)
 800329a:	801a      	strh	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bdb0      	pop	{r4, r5, r7, pc}
 80032a4:	20000140 	.word	0x20000140
 80032a8:	2000013c 	.word	0x2000013c
 80032ac:	20000136 	.word	0x20000136
 80032b0:	20000134 	.word	0x20000134
 80032b4:	2000013e 	.word	0x2000013e
 80032b8:	20000130 	.word	0x20000130
 80032bc:	20000138 	.word	0x20000138
 80032c0:	2000013a 	.word	0x2000013a

080032c4 <_Z13tft_setCursorss>:

void tft_setCursor(int16_t x, int16_t y)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	460a      	mov	r2, r1
 80032ce:	80fb      	strh	r3, [r7, #6]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80bb      	strh	r3, [r7, #4]
    cursor_x = x;
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <_Z13tft_setCursorss+0x28>)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	8013      	strh	r3, [r2, #0]
    cursor_y = y;
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <_Z13tft_setCursorss+0x2c>)
 80032dc:	88bb      	ldrh	r3, [r7, #4]
 80032de:	8013      	strh	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000134 	.word	0x20000134
 80032f0:	20000136 	.word	0x20000136

080032f4 <_Z15tft_setTextSizeh>:
{
    return cursor_y;
}

void tft_setTextSize(uint8_t s)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
    textsize = (s > 0) ? s : 1;
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <_Z15tft_setTextSizeh+0x14>
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	e000      	b.n	800330a <_Z15tft_setTextSizeh+0x16>
 8003308:	2301      	movs	r3, #1
 800330a:	4a03      	ldr	r2, [pc, #12]	; (8003318 <_Z15tft_setTextSizeh+0x24>)
 800330c:	7013      	strb	r3, [r2, #0]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	2000013c 	.word	0x2000013c

0800331c <_Z16tft_setTextColort>:

void tft_setTextColor(uint16_t c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
    // For 'transparent' background, we'll set the bg
    // to the same as fg instead of using a flag
    textcolor = textbgcolor = c;
 8003326:	4a06      	ldr	r2, [pc, #24]	; (8003340 <_Z16tft_setTextColort+0x24>)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	8013      	strh	r3, [r2, #0]
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <_Z16tft_setTextColort+0x24>)
 800332e:	881a      	ldrh	r2, [r3, #0]
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <_Z16tft_setTextColort+0x28>)
 8003332:	801a      	strh	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000013a 	.word	0x2000013a
 8003344:	20000138 	.word	0x20000138

08003348 <_Z19tft_setTextColor_01tt>:

void tft_setTextColor_01(uint16_t c, uint16_t b)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	460a      	mov	r2, r1
 8003352:	80fb      	strh	r3, [r7, #6]
 8003354:	4613      	mov	r3, r2
 8003356:	80bb      	strh	r3, [r7, #4]
    textcolor   = c;
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <_Z19tft_setTextColor_01tt+0x28>)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	8013      	strh	r3, [r2, #0]
    textbgcolor = b;
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <_Z19tft_setTextColor_01tt+0x2c>)
 8003360:	88bb      	ldrh	r3, [r7, #4]
 8003362:	8013      	strh	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000138 	.word	0x20000138
 8003374:	2000013a 	.word	0x2000013a

08003378 <_Z15tft_setRotationh>:
{
    return rotation;
}

void tft_setRotation(uint8_t x)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
    rotation = (x & 3);
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <_Z15tft_setRotationh+0x70>)
 800338c:	701a      	strb	r2, [r3, #0]
    switch(rotation)
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <_Z15tft_setRotationh+0x70>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d820      	bhi.n	80033d8 <_Z15tft_setRotationh+0x60>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <_Z15tft_setRotationh+0x24>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033c3 	.word	0x080033c3
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	080033c3 	.word	0x080033c3
    {
        case 0:
        case 2:
            _width  = WIDTH;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <_Z15tft_setRotationh+0x74>)
 80033ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <_Z15tft_setRotationh+0x78>)
 80033b4:	801a      	strh	r2, [r3, #0]
            _height = HEIGHT;
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <_Z15tft_setRotationh+0x7c>)
 80033b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <_Z15tft_setRotationh+0x80>)
 80033be:	801a      	strh	r2, [r3, #0]
            break;
 80033c0:	e00a      	b.n	80033d8 <_Z15tft_setRotationh+0x60>
        case 1:
        case 3:
            _width  = HEIGHT;
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <_Z15tft_setRotationh+0x7c>)
 80033c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <_Z15tft_setRotationh+0x78>)
 80033ca:	801a      	strh	r2, [r3, #0]
            _height = WIDTH;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <_Z15tft_setRotationh+0x74>)
 80033ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <_Z15tft_setRotationh+0x80>)
 80033d4:	801a      	strh	r2, [r3, #0]
            break;
 80033d6:	bf00      	nop
    }
    setRotation(x);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fd54 	bl	8003e88 <_Z11setRotationh>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000013d 	.word	0x2000013d
 80033ec:	2000012c 	.word	0x2000012c
 80033f0:	20000130 	.word	0x20000130
 80033f4:	2000012e 	.word	0x2000012e
 80033f8:	20000132 	.word	0x20000132

080033fc <_Z11tft_setFontPK7GFXfont>:

void tft_setFont(const GFXfont *f)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    if(f)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <_Z11tft_setFontPK7GFXfont+0x2a>
    {          // Font struct pointer passed in?
        if(!gfxFont)
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <_Z11tft_setFontPK7GFXfont+0x54>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <_Z11tft_setFontPK7GFXfont+0x44>
        { // And no current font struct?
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <_Z11tft_setFontPK7GFXfont+0x58>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	b29b      	uxth	r3, r3
 800341a:	3306      	adds	r3, #6
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21a      	sxth	r2, r3
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <_Z11tft_setFontPK7GFXfont+0x58>)
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	e00c      	b.n	8003440 <_Z11tft_setFontPK7GFXfont+0x44>
        }
    }
    else if(gfxFont)
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <_Z11tft_setFontPK7GFXfont+0x54>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <_Z11tft_setFontPK7GFXfont+0x44>
    { // NULL passed.  Current font struct defined?
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <_Z11tft_setFontPK7GFXfont+0x58>)
 8003430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b06      	subs	r3, #6
 8003438:	b29b      	uxth	r3, r3
 800343a:	b21a      	sxth	r2, r3
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <_Z11tft_setFontPK7GFXfont+0x58>)
 800343e:	801a      	strh	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <_Z11tft_setFontPK7GFXfont+0x54>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6013      	str	r3, [r2, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	20000140 	.word	0x20000140
 8003454:	20000136 	.word	0x20000136

08003458 <_Z9tft_printPc>:
{
    // Do nothing, must be subclassed if supported by hardware
}

void tft_print(char* pStr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	for (uint32_t ii=0;ii<strlen(pStr);ii++)
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fc fe73 	bl	8000150 <strlen>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4293      	cmp	r3, r2
 8003470:	d20a      	bcs.n	8003488 <_Z9tft_printPc+0x30>
	{
		tft_write(pStr[ii]);
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fdfc 	bl	8003078 <_Z9tft_writeh>
	for (uint32_t ii=0;ii<strlen(pStr);ii++)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e7ed      	b.n	8003464 <_Z9tft_printPc+0xc>
	}
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_Z9tft_printPKc>:

void tft_print(const char* pStr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	for (uint32_t ii=0;ii<strlen(pStr);ii++)
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fc fe57 	bl	8000150 <strlen>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d20a      	bcs.n	80034c0 <_Z9tft_printPKc+0x30>
	{
		tft_write(pStr[ii]);
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fde0 	bl	8003078 <_Z9tft_writeh>
	for (uint32_t ii=0;ii<strlen(pStr);ii++)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e7ed      	b.n	800349c <_Z9tft_printPKc+0xc>
	}
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_Z9tft_printi>:

void tft_print(int num)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	tft_printf("%d",num);
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <_Z9tft_printi+0x18>)
 80034d4:	f000 f926 	bl	8003724 <_Z10tft_printfPKcz>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	0800d290 	.word	0x0800d290

080034e4 <_Z7ts_itoaPPcji>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	int div = 1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
	while (static_cast<int>(d/div) >= base)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4293      	cmp	r3, r2
 8003502:	dc05      	bgt.n	8003510 <_Z7ts_itoaPPcji+0x2c>
		div *= base;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
	while (static_cast<int>(d/div) >= base)
 800350e:	e7f1      	b.n	80034f4 <_Z7ts_itoaPPcji+0x10>

	while (div != 0)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02a      	beq.n	800356c <_Z7ts_itoaPPcji+0x88>
	{
		int num = d/div;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	fbb3 f1f2 	udiv	r1, r3, r2
 8003528:	fb01 f202 	mul.w	r2, r1, r2
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	fb92 f3f3 	sdiv	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b09      	cmp	r3, #9
 800353e:	dd0a      	ble.n	8003556 <_Z7ts_itoaPPcji+0x72>
			*((*buf)++) = (num-10) + 'A';
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c58      	adds	r0, r3, #1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6008      	str	r0, [r1, #0]
 800354e:	3237      	adds	r2, #55	; 0x37
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e7dc      	b.n	8003510 <_Z7ts_itoaPPcji+0x2c>
		else
			*((*buf)++) = num + '0';
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1c58      	adds	r0, r3, #1
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	6008      	str	r0, [r1, #0]
 8003564:	3230      	adds	r2, #48	; 0x30
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800356a:	e7d1      	b.n	8003510 <_Z7ts_itoaPPcji+0x2c>
	}
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <_Z15ts_formatstringPcPKcSt9__va_list>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80be 	beq.w	800370e <_Z15ts_formatstringPcPKcSt9__va_list+0x196>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b25      	cmp	r3, #37	; 0x25
 8003598:	f040 80b0 	bne.w	80036fc <_Z15ts_formatstringPcPKcSt9__va_list+0x184>
		{
			switch (*(++fmt))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3301      	adds	r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b25      	cmp	r3, #37	; 0x25
 80035a8:	f000 809d 	beq.w	80036e6 <_Z15ts_formatstringPcPKcSt9__va_list+0x16e>
 80035ac:	2b25      	cmp	r3, #37	; 0x25
 80035ae:	f2c0 80a1 	blt.w	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
 80035b2:	2b78      	cmp	r3, #120	; 0x78
 80035b4:	f300 809e 	bgt.w	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
 80035b8:	2b58      	cmp	r3, #88	; 0x58
 80035ba:	f2c0 809b 	blt.w	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
 80035be:	3b58      	subs	r3, #88	; 0x58
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	f200 8097 	bhi.w	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <_Z15ts_formatstringPcPKcSt9__va_list+0x54>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080036cf 	.word	0x080036cf
 80035d0:	080036f5 	.word	0x080036f5
 80035d4:	080036f5 	.word	0x080036f5
 80035d8:	080036f5 	.word	0x080036f5
 80035dc:	080036f5 	.word	0x080036f5
 80035e0:	080036f5 	.word	0x080036f5
 80035e4:	080036f5 	.word	0x080036f5
 80035e8:	080036f5 	.word	0x080036f5
 80035ec:	080036f5 	.word	0x080036f5
 80035f0:	080036f5 	.word	0x080036f5
 80035f4:	080036f5 	.word	0x080036f5
 80035f8:	08003651 	.word	0x08003651
 80035fc:	08003665 	.word	0x08003665
 8003600:	080036f5 	.word	0x080036f5
 8003604:	080036f5 	.word	0x080036f5
 8003608:	080036f5 	.word	0x080036f5
 800360c:	080036f5 	.word	0x080036f5
 8003610:	08003665 	.word	0x08003665
 8003614:	080036f5 	.word	0x080036f5
 8003618:	080036f5 	.word	0x080036f5
 800361c:	080036f5 	.word	0x080036f5
 8003620:	080036f5 	.word	0x080036f5
 8003624:	080036f5 	.word	0x080036f5
 8003628:	080036f5 	.word	0x080036f5
 800362c:	080036f5 	.word	0x080036f5
 8003630:	080036f5 	.word	0x080036f5
 8003634:	080036f5 	.word	0x080036f5
 8003638:	08003695 	.word	0x08003695
 800363c:	080036f5 	.word	0x080036f5
 8003640:	080036b9 	.word	0x080036b9
 8003644:	080036f5 	.word	0x080036f5
 8003648:	080036f5 	.word	0x080036f5
 800364c:	080036cf 	.word	0x080036cf
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1d1a      	adds	r2, r3, #4
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60fa      	str	r2, [r7, #12]
 800365e:	b2ca      	uxtb	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
				break;
 8003662:	e047      	b.n	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1d1a      	adds	r2, r3, #4
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	da07      	bge.n	8003684 <_Z15ts_formatstringPcPKcSt9__va_list+0x10c>
					{
						val *= -1;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	425b      	negs	r3, r3
 8003678:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	60fa      	str	r2, [r7, #12]
 8003680:	222d      	movs	r2, #45	; 0x2d
 8003682:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003684:	69f9      	ldr	r1, [r7, #28]
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	220a      	movs	r2, #10
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff29 	bl	80034e4 <_Z7ts_itoaPPcji>
				}
				break;
 8003692:	e02f      	b.n	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
				}
				break;
#endif
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d025      	beq.n	80036f2 <_Z15ts_formatstringPcPKcSt9__va_list+0x17a>
					{
						*buf++ = *arg++;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	1c53      	adds	r3, r2, #1
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1c59      	adds	r1, r3, #1
 80036b0:	60f9      	str	r1, [r7, #12]
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80036b6:	e7f2      	b.n	800369e <_Z15ts_formatstringPcPKcSt9__va_list+0x126>
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	220a      	movs	r2, #10
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff ff0c 	bl	80034e4 <_Z7ts_itoaPPcji>
				break;
 80036cc:	e012      	b.n	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	2210      	movs	r2, #16
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ff00 	bl	80034e4 <_Z7ts_itoaPPcji>
				break;
 80036e4:	e006      	b.n	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
			  case '%':
				  *buf++ = '%';
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	60fa      	str	r2, [r7, #12]
 80036ec:	2225      	movs	r2, #37	; 0x25
 80036ee:	701a      	strb	r2, [r3, #0]
				  break;
 80036f0:	e000      	b.n	80036f4 <_Z15ts_formatstringPcPKcSt9__va_list+0x17c>
				break;
 80036f2:	bf00      	nop
			}
			fmt++;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	e745      	b.n	8003588 <_Z15ts_formatstringPcPKcSt9__va_list+0x10>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	1c53      	adds	r3, r2, #1
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	60f9      	str	r1, [r7, #12]
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800370c:	e73c      	b.n	8003588 <_Z15ts_formatstringPcPKcSt9__va_list+0x10>
		}
	}
	*buf = 0;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop

08003724 <_Z10tft_printfPKcz>:



char buf[64];
void tft_printf(const char *fmt, ...)
{
 8003724:	b40f      	push	{r0, r1, r2, r3}
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
//	int length = 0;
//	char* buf;
	va_list va;
	va_start(va, fmt);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	607b      	str	r3, [r7, #4]
//	length = ts_formatlength(fmt, va);
//	buf = (char*)malloc(length);
//	while (buf == 0x0000){}; //Fail on no memory
	ts_formatstring(buf, fmt, va);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6939      	ldr	r1, [r7, #16]
 8003736:	4806      	ldr	r0, [pc, #24]	; (8003750 <_Z10tft_printfPKcz+0x2c>)
 8003738:	f7ff ff1e 	bl	8003578 <_Z15ts_formatstringPcPKcSt9__va_list>
	tft_print((char*)buf);
 800373c:	4804      	ldr	r0, [pc, #16]	; (8003750 <_Z10tft_printfPKcz+0x2c>)
 800373e:	f7ff fe8b 	bl	8003458 <_Z9tft_printPc>
//	free(buf);
	va_end(va);
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800374c:	b004      	add	sp, #16
 800374e:	4770      	bx	lr
 8003750:	20000144 	.word	0x20000144

08003754 <_Z13ili9341_beginv>:
uint16_t readReg(uint8_t r);


/*****************************************************************************/
uint16_t ili9341_begin(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  //Set command lines as output
  //Do this in General Setup...

  //CS_IDLE; // Set all control bits to HIGH (idle) ..............
  CD_DATA; // Signals are ACTIVE LOW
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <_Z13ili9341_beginv+0xbc>)
 800375a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800375e:	611a      	str	r2, [r3, #16]
  WR_IDLE;
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <_Z13ili9341_beginv+0xbc>)
 8003762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003766:	611a      	str	r2, [r3, #16]
  RD_IDLE;
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <_Z13ili9341_beginv+0xc0>)
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	611a      	str	r2, [r3, #16]

  ili9341_reset();
 800376e:	f000 f867 	bl	8003840 <_Z13ili9341_resetv>
  setWriteDir();
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <_Z13ili9341_beginv+0xc4>)
 8003774:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003778:	601a      	str	r2, [r3, #0]

  writeRegister8(ILI9341_SOFTRESET, 0);
 800377a:	2100      	movs	r1, #0
 800377c:	2001      	movs	r0, #1
 800377e:	f000 fcab 	bl	80040d8 <_Z14writeRegister8hh>
  delayMS(50);
 8003782:	2032      	movs	r0, #50	; 0x32
 8003784:	f7fd fcc2 	bl	800110c <HAL_Delay>


  //TODO readback doesn't seem to work...
  dispControllerId = (uint16_t)(readReg32(0x04) & 0xffff);
 8003788:	2004      	movs	r0, #4
 800378a:	f000 fc29 	bl	8003fe0 <_Z9readReg32h>
 800378e:	4603      	mov	r3, r0
 8003790:	b29a      	uxth	r2, r3
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <_Z13ili9341_beginv+0xc8>)
 8003794:	801a      	strh	r2, [r3, #0]

  writeRegister8(ILI9341_DISPLAYOFF, 0);
 8003796:	2100      	movs	r1, #0
 8003798:	2028      	movs	r0, #40	; 0x28
 800379a:	f000 fc9d 	bl	80040d8 <_Z14writeRegister8hh>

  writeRegister8(ILI9341_POWERCONTROL1, 0x23);
 800379e:	2123      	movs	r1, #35	; 0x23
 80037a0:	20c0      	movs	r0, #192	; 0xc0
 80037a2:	f000 fc99 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_POWERCONTROL2, 0x10);
 80037a6:	2110      	movs	r1, #16
 80037a8:	20c1      	movs	r0, #193	; 0xc1
 80037aa:	f000 fc95 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister16(ILI9341_VCOMCONTROL1, 0x2B2B);
 80037ae:	f642 312b 	movw	r1, #11051	; 0x2b2b
 80037b2:	20c5      	movs	r0, #197	; 0xc5
 80037b4:	f000 fcce 	bl	8004154 <_Z15writeRegister16tt>
  writeRegister8(ILI9341_VCOMCONTROL2, 0xC0);
 80037b8:	21c0      	movs	r1, #192	; 0xc0
 80037ba:	20c7      	movs	r0, #199	; 0xc7
 80037bc:	f000 fc8c 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_MADCTL , ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80037c0:	2188      	movs	r1, #136	; 0x88
 80037c2:	2036      	movs	r0, #54	; 0x36
 80037c4:	f000 fc88 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_PIXELFORMAT, 0x55);
 80037c8:	2155      	movs	r1, #85	; 0x55
 80037ca:	203a      	movs	r0, #58	; 0x3a
 80037cc:	f000 fc84 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
 80037d0:	211b      	movs	r1, #27
 80037d2:	20b1      	movs	r0, #177	; 0xb1
 80037d4:	f000 fcbe 	bl	8004154 <_Z15writeRegister16tt>

  writeRegister8(ILI9341_ENTRYMODE, 0x07);
 80037d8:	2107      	movs	r1, #7
 80037da:	20b7      	movs	r0, #183	; 0xb7
 80037dc:	f000 fc7c 	bl	80040d8 <_Z14writeRegister8hh>

  writeRegister8(ILI9341_SLEEPOUT, 0);
 80037e0:	2100      	movs	r1, #0
 80037e2:	2011      	movs	r0, #17
 80037e4:	f000 fc78 	bl	80040d8 <_Z14writeRegister8hh>
  delayMS(120);
 80037e8:	2078      	movs	r0, #120	; 0x78
 80037ea:	f7fd fc8f 	bl	800110c <HAL_Delay>
  writeRegister8(ILI9341_DISPLAYON, 0);
 80037ee:	2100      	movs	r1, #0
 80037f0:	2029      	movs	r0, #41	; 0x29
 80037f2:	f000 fc71 	bl	80040d8 <_Z14writeRegister8hh>
  setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
 80037f6:	f240 133f 	movw	r3, #319	; 0x13f
 80037fa:	f240 123f 	movw	r2, #319	; 0x13f
 80037fe:	2100      	movs	r1, #0
 8003800:	2000      	movs	r0, #0
 8003802:	f000 f839 	bl	8003878 <_Z13setAddrWindowiiii>

  return dispControllerId;
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <_Z13ili9341_beginv+0xc8>)
 8003808:	881b      	ldrh	r3, [r3, #0]
}
 800380a:	4618      	mov	r0, r3
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40011000 	.word	0x40011000
 8003814:	40010800 	.word	0x40010800
 8003818:	40010c00 	.word	0x40010c00
 800381c:	2000018c 	.word	0x2000018c

08003820 <_Z13ili9341_setLRv>:


void ili9341_setLR(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  writeRegisterPair(HX8347G_COLADDREND_HI, HX8347G_COLADDREND_LO, TFTWIDTH  - 1);
 8003824:	f240 123f 	movw	r2, #319	; 0x13f
 8003828:	2105      	movs	r1, #5
 800382a:	2004      	movs	r0, #4
 800382c:	f000 fc36 	bl	800409c <_Z17writeRegisterPairhht>
  writeRegisterPair(HX8347G_ROWADDREND_HI, HX8347G_ROWADDREND_LO, TFTHEIGHT - 1);
 8003830:	f240 123f 	movw	r2, #319	; 0x13f
 8003834:	2109      	movs	r1, #9
 8003836:	2008      	movs	r0, #8
 8003838:	f000 fc30 	bl	800409c <_Z17writeRegisterPairhht>
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}

08003840 <_Z13ili9341_resetv>:

/*****************************************************************************/
void ili9341_reset(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  // toggle RST low to reset
	RST_HIGH;
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <_Z13ili9341_resetv+0x34>)
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	611a      	str	r2, [r3, #16]
    delayMS(10);
 800384c:	200a      	movs	r0, #10
 800384e:	f7fd fc5d 	bl	800110c <HAL_Delay>
	RST_LOW;
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <_Z13ili9341_resetv+0x34>)
 8003854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003858:	615a      	str	r2, [r3, #20]
    delayMS(10);
 800385a:	200a      	movs	r0, #10
 800385c:	f7fd fc56 	bl	800110c <HAL_Delay>
	RST_HIGH;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <_Z13ili9341_resetv+0x34>)
 8003862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003866:	611a      	str	r2, [r3, #16]
    delayMS(100);
 8003868:	2064      	movs	r0, #100	; 0x64
 800386a:	f7fd fc4f 	bl	800110c <HAL_Delay>
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40010c00 	.word	0x40010c00

08003878 <_Z13setAddrWindowiiii>:
// Sets the LCD address window (and address counter, on 932X).
// Relevant to rect/screen fills and H/V lines.  Input coordinates are
// assumed pre-sorted (e.g. x2 >= x1).
/*****************************************************************************/
void setAddrWindow(int x1, int y1, int x2, int y2)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
    uint32_t t;

    t = x1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	617b      	str	r3, [r7, #20]
    t <<= 16;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	617b      	str	r3, [r7, #20]
    t |= x2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    writeRegister32(ILI9341_COLADDRSET, t);  // HX8357D uses same registers!
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	202a      	movs	r0, #42	; 0x2a
 800389c:	f000 fcb0 	bl	8004200 <_Z15writeRegister32hm>
    t = y1;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	617b      	str	r3, [r7, #20]
    t <<= 16;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	617b      	str	r3, [r7, #20]
    t |= y2;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    writeRegister32(ILI9341_PAGEADDRSET, t); // HX8357D uses same registers!
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	202b      	movs	r0, #43	; 0x2b
 80038b6:	f000 fca3 	bl	8004200 <_Z15writeRegister32hm>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <_Z5floodtm>:
// Fast block fill operation for fillScreen, fillRect, H/V line, etc.
// Requires setAddrWindow() has previously been called to set the fill
// bounds.  'len' is inclusive, MUST be >= 1.
/*****************************************************************************/
void flood(uint16_t color, uint32_t len)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	80fb      	strh	r3, [r7, #6]
  uint16_t blocks;
  uint8_t  i, hi = color >> 8,
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	733b      	strb	r3, [r7, #12]
              lo = color;
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	72fb      	strb	r3, [r7, #11]

  CS_ACTIVE;
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <_Z5floodtm+0x1ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a64      	ldr	r2, [pc, #400]	; (8003a74 <_Z5floodtm+0x1b0>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b64      	ldr	r3, [pc, #400]	; (8003a78 <_Z5floodtm+0x1b4>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a64      	ldr	r2, [pc, #400]	; (8003a7c <_Z5floodtm+0x1b8>)
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <_Z5floodtm+0x1ac>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <_Z5floodtm+0x1b4>)
 80038f4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <_Z5floodtm+0x1bc>)
 80038fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003900:	615a      	str	r2, [r3, #20]
  CD_COMMAND;
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003908:	615a      	str	r2, [r3, #20]
  write8(ILI9341_MEMORYWRITE);
 800390a:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <_Z5floodtm+0x1b4>)
 800390c:	4a5d      	ldr	r2, [pc, #372]	; (8003a84 <_Z5floodtm+0x1c0>)
 800390e:	611a      	str	r2, [r3, #16]
 8003910:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003912:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003916:	615a      	str	r2, [r3, #20]
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <_Z5floodtm+0x1bc>)
 800391a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800391e:	611a      	str	r2, [r3, #16]

  // Write first pixel normally, decrement counter by 1
  CD_DATA;
 8003920:	4b57      	ldr	r3, [pc, #348]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003926:	611a      	str	r2, [r3, #16]
  write8(hi);
 8003928:	7b3b      	ldrb	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	041a      	lsls	r2, r3, #16
 8003930:	7b3b      	ldrb	r3, [r7, #12]
 8003932:	431a      	orrs	r2, r3
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <_Z5floodtm+0x1b4>)
 8003936:	611a      	str	r2, [r3, #16]
 8003938:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <_Z5floodtm+0x1bc>)
 800393a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800393e:	615a      	str	r2, [r3, #20]
 8003940:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003942:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003946:	611a      	str	r2, [r3, #16]
  write8(lo);
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	43db      	mvns	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	041a      	lsls	r2, r3, #16
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	431a      	orrs	r2, r3
 8003954:	4b48      	ldr	r3, [pc, #288]	; (8003a78 <_Z5floodtm+0x1b4>)
 8003956:	611a      	str	r2, [r3, #16]
 8003958:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <_Z5floodtm+0x1bc>)
 800395a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800395e:	615a      	str	r2, [r3, #20]
 8003960:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003962:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003966:	611a      	str	r2, [r3, #16]
  len--;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3b01      	subs	r3, #1
 800396c:	603b      	str	r3, [r7, #0]

  blocks = (uint16_t)(len / 64); // 64 pixels/block
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	81fb      	strh	r3, [r7, #14]
  if(hi == lo) {
 8003974:	7b3a      	ldrb	r2, [r7, #12]
 8003976:	7afb      	ldrb	r3, [r7, #11]
 8003978:	429a      	cmp	r2, r3
 800397a:	f040 8085 	bne.w	8003a88 <_Z5floodtm+0x1c4>
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
 800397e:	89fb      	ldrh	r3, [r7, #14]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	81fa      	strh	r2, [r7, #14]
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04d      	beq.n	8003a2e <_Z5floodtm+0x16a>
      i = 16; // 64 pixels/block / 4 pixels/pass
 8003992:	2310      	movs	r3, #16
 8003994:	737b      	strb	r3, [r7, #13]
      do {
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
 8003996:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003998:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800399c:	615a      	str	r2, [r3, #20]
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039bc:	615a      	str	r2, [r3, #20]
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039cc:	615a      	str	r2, [r3, #20]
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039d4:	611a      	str	r2, [r3, #16]
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039dc:	615a      	str	r2, [r3, #20]
 80039de:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039ec:	615a      	str	r2, [r3, #20]
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <_Z5floodtm+0x1bc>)
 80039f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039fc:	615a      	str	r2, [r3, #20]
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a0c:	615a      	str	r2, [r3, #20]
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a14:	611a      	str	r2, [r3, #16]
      } while(--i);
 8003a16:	7b7b      	ldrb	r3, [r7, #13]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	737b      	strb	r3, [r7, #13]
 8003a1c:	7b7b      	ldrb	r3, [r7, #13]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0a8      	beq.n	800397e <_Z5floodtm+0xba>
      do {
 8003a2c:	e7b3      	b.n	8003996 <_Z5floodtm+0xd2>
    }
    // Fill any remaining pixels (1 to 64)
    for(i = (uint8_t)len & 63; i--; ) {
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a36:	737b      	strb	r3, [r7, #13]
 8003a38:	7b7b      	ldrb	r3, [r7, #13]
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	737a      	strb	r2, [r7, #13]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80e7 	beq.w	8003c1c <_Z5floodtm+0x358>
      WR_STROBE;
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a5c:	611a      	str	r2, [r3, #16]
      WR_STROBE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a64:	615a      	str	r2, [r3, #20]
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <_Z5floodtm+0x1bc>)
 8003a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a6c:	611a      	str	r2, [r3, #16]
    for(i = (uint8_t)len & 63; i--; ) {
 8003a6e:	e7e3      	b.n	8003a38 <_Z5floodtm+0x174>
 8003a70:	40010400 	.word	0x40010400
 8003a74:	20000184 	.word	0x20000184
 8003a78:	40010c00 	.word	0x40010c00
 8003a7c:	20000188 	.word	0x20000188
 8003a80:	40011000 	.word	0x40011000
 8003a84:	00d3002c 	.word	0x00d3002c
    }
  } else {
    while(blocks--) {
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	81fa      	strh	r2, [r7, #14]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 808f 	beq.w	8003bbc <_Z5floodtm+0x2f8>
      i = 16; // 64 pixels/block / 4 pixels/pass
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	737b      	strb	r3, [r7, #13]
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
 8003aa2:	7b3b      	ldrb	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	7b3b      	ldrb	r3, [r7, #12]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <_Z5floodtm+0x384>)
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <_Z5floodtm+0x388>)
 8003ab4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ab8:	615a      	str	r2, [r3, #20]
 8003aba:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <_Z5floodtm+0x388>)
 8003abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <_Z5floodtm+0x384>)
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <_Z5floodtm+0x388>)
 8003ad4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ad8:	615a      	str	r2, [r3, #20]
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <_Z5floodtm+0x388>)
 8003adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ae0:	611a      	str	r2, [r3, #16]
 8003ae2:	7b3b      	ldrb	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	041a      	lsls	r2, r3, #16
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	4b56      	ldr	r3, [pc, #344]	; (8003c48 <_Z5floodtm+0x384>)
 8003af0:	611a      	str	r2, [r3, #16]
 8003af2:	4b56      	ldr	r3, [pc, #344]	; (8003c4c <_Z5floodtm+0x388>)
 8003af4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003af8:	615a      	str	r2, [r3, #20]
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <_Z5floodtm+0x388>)
 8003afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	041a      	lsls	r2, r3, #16
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <_Z5floodtm+0x384>)
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <_Z5floodtm+0x388>)
 8003b14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b18:	615a      	str	r2, [r3, #20]
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <_Z5floodtm+0x388>)
 8003b1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b20:	611a      	str	r2, [r3, #16]
        write8(hi); write8(lo); write8(hi); write8(lo);
 8003b22:	7b3b      	ldrb	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	041a      	lsls	r2, r3, #16
 8003b2a:	7b3b      	ldrb	r3, [r7, #12]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <_Z5floodtm+0x384>)
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <_Z5floodtm+0x388>)
 8003b34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b38:	615a      	str	r2, [r3, #20]
 8003b3a:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <_Z5floodtm+0x388>)
 8003b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b40:	611a      	str	r2, [r3, #16]
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <_Z5floodtm+0x384>)
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <_Z5floodtm+0x388>)
 8003b54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <_Z5floodtm+0x388>)
 8003b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	7b3b      	ldrb	r3, [r7, #12]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	7b3b      	ldrb	r3, [r7, #12]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <_Z5floodtm+0x384>)
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <_Z5floodtm+0x388>)
 8003b74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b78:	615a      	str	r2, [r3, #20]
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <_Z5floodtm+0x388>)
 8003b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <_Z5floodtm+0x384>)
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <_Z5floodtm+0x388>)
 8003b94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b98:	615a      	str	r2, [r3, #20]
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <_Z5floodtm+0x388>)
 8003b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ba0:	611a      	str	r2, [r3, #16]
      } while(--i);
 8003ba2:	7b7b      	ldrb	r3, [r7, #13]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	737b      	strb	r3, [r7, #13]
 8003ba8:	7b7b      	ldrb	r3, [r7, #13]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f43f af67 	beq.w	8003a88 <_Z5floodtm+0x1c4>
      do {
 8003bba:	e772      	b.n	8003aa2 <_Z5floodtm+0x1de>
    }
    for(i = (uint8_t)len & 63; i--; ) {
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	737b      	strb	r3, [r7, #13]
 8003bc6:	7b7b      	ldrb	r3, [r7, #13]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	737a      	strb	r2, [r7, #13]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <_Z5floodtm+0x358>
      write8(hi);
 8003bda:	7b3b      	ldrb	r3, [r7, #12]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	7b3b      	ldrb	r3, [r7, #12]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <_Z5floodtm+0x384>)
 8003be8:	611a      	str	r2, [r3, #16]
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <_Z5floodtm+0x388>)
 8003bec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bf0:	615a      	str	r2, [r3, #20]
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <_Z5floodtm+0x388>)
 8003bf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bf8:	611a      	str	r2, [r3, #16]
      write8(lo);
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <_Z5floodtm+0x384>)
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <_Z5floodtm+0x388>)
 8003c0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c10:	615a      	str	r2, [r3, #20]
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <_Z5floodtm+0x388>)
 8003c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c18:	611a      	str	r2, [r3, #16]
    for(i = (uint8_t)len & 63; i--; ) {
 8003c1a:	e7d4      	b.n	8003bc6 <_Z5floodtm+0x302>
    }
  }
  CS_IDLE;
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <_Z5floodtm+0x384>)
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <_Z5floodtm+0x38c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60d3      	str	r3, [r2, #12]
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <_Z5floodtm+0x384>)
 8003c26:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <_Z5floodtm+0x388>)
 8003c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c32:	611a      	str	r2, [r3, #16]
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <_Z5floodtm+0x390>)
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <_Z5floodtm+0x394>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010c00 	.word	0x40010c00
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	20000188 	.word	0x20000188
 8003c54:	40010400 	.word	0x40010400
 8003c58:	20000184 	.word	0x20000184

08003c5c <_Z13drawFastVLinessst>:
  ili9341_setLR();
}

/*****************************************************************************/
void drawFastVLine(int16_t x, int16_t y, int16_t length, uint16_t color)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
 8003c76:	4613      	mov	r3, r2
 8003c78:	803b      	strh	r3, [r7, #0]
  int16_t y2;
	
  // Initial off-screen clipping
  if((length <= 0      ) ||
     (x      <  0      ) || ( x                  >= TFTWIDTH) ||
     (y      >= TFTHEIGHTREAL) || ((y2 = (y+length-1)) <  0     )) return;
 8003c7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	dd17      	ble.n	8003cb2 <_Z13drawFastVLinessst+0x56>
  if((length <= 0      ) ||
 8003c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	db13      	blt.n	8003cb2 <_Z13drawFastVLinessst+0x56>
     (x      <  0      ) || ( x                  >= TFTWIDTH) ||
 8003c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003c92:	da0e      	bge.n	8003cb2 <_Z13drawFastVLinessst+0x56>
 8003c94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c98:	2bef      	cmp	r3, #239	; 0xef
 8003c9a:	dc0a      	bgt.n	8003cb2 <_Z13drawFastVLinessst+0x56>
     (y      >= TFTHEIGHTREAL) || ((y2 = (y+length-1)) <  0     )) return;
 8003c9c:	88ba      	ldrh	r2, [r7, #4]
 8003c9e:	887b      	ldrh	r3, [r7, #2]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	81fb      	strh	r3, [r7, #14]
 8003caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da01      	bge.n	8003cb6 <_Z13drawFastVLinessst+0x5a>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <_Z13drawFastVLinessst+0x5c>
 8003cb6:	2300      	movs	r3, #0
  if((length <= 0      ) ||
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d12b      	bne.n	8003d14 <_Z13drawFastVLinessst+0xb8>
  if(y < 0) {         // Clip top
 8003cbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	da06      	bge.n	8003cd2 <_Z13drawFastVLinessst+0x76>
    length += y;
 8003cc4:	887a      	ldrh	r2, [r7, #2]
 8003cc6:	88bb      	ldrh	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	807b      	strh	r3, [r7, #2]
    y       = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	80bb      	strh	r3, [r7, #4]
  }
  if(y2 >= TFTHEIGHTREAL) { // Clip bottom
 8003cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cd6:	2bef      	cmp	r3, #239	; 0xef
 8003cd8:	dd08      	ble.n	8003cec <_Z13drawFastVLinessst+0x90>
    y2      = TFTHEIGHTREAL - 1;
 8003cda:	23ef      	movs	r3, #239	; 0xef
 8003cdc:	81fb      	strh	r3, [r7, #14]
    length  = y2 - y + 1;
 8003cde:	89fa      	ldrh	r2, [r7, #14]
 8003ce0:	88bb      	ldrh	r3, [r7, #4]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	807b      	strh	r3, [r7, #2]
  }

  setAddrWindow(x, y, x, y2);
 8003cec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003cf0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003cf4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cfc:	f7ff fdbc 	bl	8003878 <_Z13setAddrWindowiiii>
  flood(color, length);
 8003d00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d04:	883b      	ldrh	r3, [r7, #0]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fddb 	bl	80038c4 <_Z5floodtm>
  ili9341_setLR();
 8003d0e:	f7ff fd87 	bl	8003820 <_Z13ili9341_setLRv>
 8003d12:	e000      	b.n	8003d16 <_Z13drawFastVLinessst+0xba>
     (y      >= TFTHEIGHTREAL) || ((y2 = (y+length-1)) <  0     )) return;
 8003d14:	bf00      	nop
}
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}

08003d1c <_Z8fillRectsssst>:

/*****************************************************************************/
void fillRect(int16_t x1, int16_t y1, int16_t w, int16_t h, uint16_t fillcolor)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	80fb      	strh	r3, [r7, #6]
 8003d2e:	4603      	mov	r3, r0
 8003d30:	80bb      	strh	r3, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	807b      	strh	r3, [r7, #2]
 8003d36:	4613      	mov	r3, r2
 8003d38:	803b      	strh	r3, [r7, #0]
  int16_t  x2, y2;

  // Initial off-screen clipping
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
      (x1           >= TFTWIDTH) ||  (y1            >= TFTHEIGHTREAL) ||
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 8003d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dd22      	ble.n	8003d88 <_Z8fillRectsssst+0x6c>
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
 8003d42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dd1e      	ble.n	8003d88 <_Z8fillRectsssst+0x6c>
 8003d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d52:	da19      	bge.n	8003d88 <_Z8fillRectsssst+0x6c>
      (x1           >= TFTWIDTH) ||  (y1            >= TFTHEIGHTREAL) ||
 8003d54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d58:	2bef      	cmp	r3, #239	; 0xef
 8003d5a:	dc15      	bgt.n	8003d88 <_Z8fillRectsssst+0x6c>
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	4413      	add	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	81fb      	strh	r3, [r7, #14]
      (x1           >= TFTWIDTH) ||  (y1            >= TFTHEIGHTREAL) ||
 8003d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db0a      	blt.n	8003d88 <_Z8fillRectsssst+0x6c>
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 8003d72:	88ba      	ldrh	r2, [r7, #4]
 8003d74:	883b      	ldrh	r3, [r7, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	81bb      	strh	r3, [r7, #12]
 8003d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da01      	bge.n	8003d8c <_Z8fillRectsssst+0x70>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <_Z8fillRectsssst+0x72>
 8003d8c:	2300      	movs	r3, #0
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d149      	bne.n	8003e26 <_Z8fillRectsssst+0x10a>
  if(x1 < 0) { // Clip left
 8003d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da06      	bge.n	8003da8 <_Z8fillRectsssst+0x8c>
    w += x1;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	807b      	strh	r3, [r7, #2]
    x1 = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	80fb      	strh	r3, [r7, #6]
  }
  if(y1 < 0) { // Clip top
 8003da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da06      	bge.n	8003dbe <_Z8fillRectsssst+0xa2>
    h += y1;
 8003db0:	883a      	ldrh	r2, [r7, #0]
 8003db2:	88bb      	ldrh	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	803b      	strh	r3, [r7, #0]
    y1 = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	80bb      	strh	r3, [r7, #4]
  }
  if(x2 >= TFTWIDTH) { // Clip right
 8003dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dc6:	db09      	blt.n	8003ddc <_Z8fillRectsssst+0xc0>
    x2 = TFTWIDTH - 1;
 8003dc8:	f240 133f 	movw	r3, #319	; 0x13f
 8003dcc:	81fb      	strh	r3, [r7, #14]
    w  = x2 - x1 + 1;
 8003dce:	89fa      	ldrh	r2, [r7, #14]
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	807b      	strh	r3, [r7, #2]
  }
  if(y2 >= TFTHEIGHTREAL) { // Clip bottom
 8003ddc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003de0:	2bef      	cmp	r3, #239	; 0xef
 8003de2:	dd08      	ble.n	8003df6 <_Z8fillRectsssst+0xda>
    y2 = TFTHEIGHTREAL - 1;
 8003de4:	23ef      	movs	r3, #239	; 0xef
 8003de6:	81bb      	strh	r3, [r7, #12]
    h  = y2 - y1 + 1;
 8003de8:	89ba      	ldrh	r2, [r7, #12]
 8003dea:	88bb      	ldrh	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	803b      	strh	r3, [r7, #0]
  }

  setAddrWindow(x1, y1, x2, y2);
 8003df6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003dfe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e06:	f7ff fd37 	bl	8003878 <_Z13setAddrWindowiiii>
  flood(fillcolor, (uint32_t)w * (uint32_t)h);
 8003e0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e12:	fb03 f202 	mul.w	r2, r3, r2
 8003e16:	8c3b      	ldrh	r3, [r7, #32]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fd52 	bl	80038c4 <_Z5floodtm>
  ili9341_setLR();
 8003e20:	f7ff fcfe 	bl	8003820 <_Z13ili9341_setLRv>
 8003e24:	e000      	b.n	8003e28 <_Z8fillRectsssst+0x10c>
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 8003e26:	bf00      	nop
}
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}

08003e2e <_Z9drawPixelsst>:
  flood(color, (uint32_t)TFTWIDTH * (uint32_t)TFTHEIGHTREAL);
}

/*****************************************************************************/
void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	80fb      	strh	r3, [r7, #6]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	80bb      	strh	r3, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	807b      	strh	r3, [r7, #2]
  // Clip
  if((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHTREAL)) return;
 8003e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db1b      	blt.n	8003e80 <_Z9drawPixelsst+0x52>
 8003e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	db17      	blt.n	8003e80 <_Z9drawPixelsst+0x52>
 8003e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e58:	da12      	bge.n	8003e80 <_Z9drawPixelsst+0x52>
 8003e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e5e:	2bef      	cmp	r3, #239	; 0xef
 8003e60:	dc0e      	bgt.n	8003e80 <_Z9drawPixelsst+0x52>

  setAddrWindow(x, y, TFTWIDTH-1, TFTHEIGHTREAL-1);
 8003e62:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e66:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e6a:	23ef      	movs	r3, #239	; 0xef
 8003e6c:	f240 123f 	movw	r2, #319	; 0x13f
 8003e70:	f7ff fd02 	bl	8003878 <_Z13setAddrWindowiiii>
  writeRegister16(0x2C, color);
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	4619      	mov	r1, r3
 8003e78:	202c      	movs	r0, #44	; 0x2c
 8003e7a:	f000 f96b 	bl	8004154 <_Z15writeRegister16tt>
 8003e7e:	e000      	b.n	8003e82 <_Z9drawPixelsst+0x54>
  if((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHTREAL)) return;
 8003e80:	bf00      	nop
}
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_Z11setRotationh>:
}


/*****************************************************************************/
void setRotation(uint8_t x)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  //perform hardware-specific rotation operations...
   uint16_t t = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	81fb      	strh	r3, [r7, #14]


   if ( dispControllerId==0x8552)
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <_Z11setRotationh+0x88>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	f248 5252 	movw	r2, #34130	; 0x8552
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d109      	bne.n	8003eb6 <_Z11setRotationh+0x2e>
   {
	   x = (x+1) % 4; // Landscape & portrait are inverted compared to ILI
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	425a      	negs	r2, r3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	f002 0203 	and.w	r2, r2, #3
 8003eb0:	bf58      	it	pl
 8003eb2:	4253      	negpl	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
//#ifdef IS_ST7789
//   x = (x+1) % 4; // Landscape & portrait are inverted compared to ILI
//#endif
 

   switch (x)
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d817      	bhi.n	8003eec <_Z11setRotationh+0x64>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <_Z11setRotationh+0x3c>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ee7 	.word	0x08003ee7
 8003ecc:	08003ed5 	.word	0x08003ed5
 8003ed0:	08003edb 	.word	0x08003edb
   {
   case 2:
     t = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR;
 8003ed4:	2348      	movs	r3, #72	; 0x48
 8003ed6:	81fb      	strh	r3, [r7, #14]
     break;
 8003ed8:	e008      	b.n	8003eec <_Z11setRotationh+0x64>
   case 3:
     t = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8003eda:	2328      	movs	r3, #40	; 0x28
 8003edc:	81fb      	strh	r3, [r7, #14]
     break;
 8003ede:	e005      	b.n	8003eec <_Z11setRotationh+0x64>
  case 0:
    t = ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR;
 8003ee0:	2388      	movs	r3, #136	; 0x88
 8003ee2:	81fb      	strh	r3, [r7, #14]
    break;
 8003ee4:	e002      	b.n	8003eec <_Z11setRotationh+0x64>
   case 1:
     t = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8003ee6:	23e8      	movs	r3, #232	; 0xe8
 8003ee8:	81fb      	strh	r3, [r7, #14]
     break;
 8003eea:	bf00      	nop
   }
   writeRegister8(ILI9341_MADCTL, t ); // MADCTL
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	2036      	movs	r0, #54	; 0x36
 8003ef4:	f000 f8f0 	bl	80040d8 <_Z14writeRegister8hh>
   // For 9341, init default full-screen address window:
   setAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1); // CS_IDLE happens here
 8003ef8:	f240 133f 	movw	r3, #319	; 0x13f
 8003efc:	f240 123f 	movw	r2, #319	; 0x13f
 8003f00:	2100      	movs	r1, #0
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff fcb8 	bl	8003878 <_Z13setAddrWindowiiii>
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	2000018c 	.word	0x2000018c

08003f14 <_ZL12writeCommandh>:

// speed optimization
//static void writeCommand(uint8_t c) __attribute__((always_inline));
/*****************************************************************************/
static void writeCommand(uint8_t c)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE;
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <_ZL12writeCommandh+0x7c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <_ZL12writeCommandh+0x80>)
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <_ZL12writeCommandh+0x84>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <_ZL12writeCommandh+0x88>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <_ZL12writeCommandh+0x7c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <_ZL12writeCommandh+0x84>)
 8003f36:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f42:	615a      	str	r2, [r3, #20]
	CD_COMMAND;
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f4a:	615a      	str	r2, [r3, #20]
	write8(0);
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <_ZL12writeCommandh+0x84>)
 8003f4e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003f52:	611a      	str	r2, [r3, #16]
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f5a:	615a      	str	r2, [r3, #20]
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f62:	611a      	str	r2, [r3, #16]
	write8(c);
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	041a      	lsls	r2, r3, #16
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <_ZL12writeCommandh+0x84>)
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f7a:	615a      	str	r2, [r3, #20]
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <_ZL12writeCommandh+0x8c>)
 8003f7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f82:	611a      	str	r2, [r3, #16]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010400 	.word	0x40010400
 8003f94:	20000184 	.word	0x20000184
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	20000188 	.word	0x20000188
 8003fa0:	40011000 	.word	0x40011000

08003fa4 <_Z6read8_v>:


/*****************************************************************************/
uint8_t read8_(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  RD_ACTIVE;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <_Z6read8_v+0x34>)
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	615a      	str	r2, [r3, #20]
  delayUS(10);
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f000 f9bb 	bl	800432c <_Z7delayUSt>
  uint8_t temp = ( (TFT_DATA->IDR>>TFT_DATA_NIBBLE) & 0x00FF);
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <_Z6read8_v+0x38>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	71fb      	strb	r3, [r7, #7]
  delayUS(1);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f000 f9b5 	bl	800432c <_Z7delayUSt>
  RD_IDLE;
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <_Z6read8_v+0x34>)
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	611a      	str	r2, [r3, #16]
  delayUS(1);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f000 f9af 	bl	800432c <_Z7delayUSt>
  return temp;
 8003fce:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40010800 	.word	0x40010800
 8003fdc:	40010c00 	.word	0x40010c00

08003fe0 <_Z9readReg32h>:



/*****************************************************************************/
uint32_t readReg32(uint8_t r)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t id;
  uint8_t x;

  // try reading register #4
  writeCommand(r);
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff91 	bl	8003f14 <_ZL12writeCommandh>
  setReadDir();  // Set up LCD data port(s) for READ operations
 8003ff2:	4b25      	ldr	r3, [pc, #148]	; (8004088 <_Z9readReg32h+0xa8>)
 8003ff4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003ff8:	601a      	str	r2, [r3, #0]
  CD_DATA;
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <_Z9readReg32h+0xac>)
 8003ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004000:	611a      	str	r2, [r3, #16]
  delayUS(50);
 8004002:	2032      	movs	r0, #50	; 0x32
 8004004:	f000 f992 	bl	800432c <_Z7delayUSt>
  read8(x);
 8004008:	f7ff ffcc 	bl	8003fa4 <_Z6read8_v>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]
  id = x;          // Do not merge or otherwise simplify
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	60bb      	str	r3, [r7, #8]
  id <<= 8;              // these lines.  It's an unfortunate
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	60bb      	str	r3, [r7, #8]
  read8(x);
 800401a:	f7ff ffc3 	bl	8003fa4 <_Z6read8_v>
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]
  id  |= x;        // shenanigans that are going on.
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]
  id <<= 8;              // these lines.  It's an unfortunate
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	60bb      	str	r3, [r7, #8]
  read8(x);
 8004030:	f7ff ffb8 	bl	8003fa4 <_Z6read8_v>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
  id  |= x;        // shenanigans that are going on.
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  id <<= 8;              // these lines.  It's an unfortunate
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	60bb      	str	r3, [r7, #8]
  read8(x);
 8004046:	f7ff ffad 	bl	8003fa4 <_Z6read8_v>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]
  id  |= x;        // shenanigans that are going on.
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]
  CS_IDLE;
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <_Z9readReg32h+0xa8>)
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <_Z9readReg32h+0xb0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60d3      	str	r3, [r2, #12]
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <_Z9readReg32h+0xa8>)
 8004060:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <_Z9readReg32h+0xac>)
 8004068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800406c:	611a      	str	r2, [r3, #16]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <_Z9readReg32h+0xb4>)
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <_Z9readReg32h+0xb8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6013      	str	r3, [r2, #0]
  setWriteDir();  // Restore LCD data port(s) to WRITE configuration
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <_Z9readReg32h+0xa8>)
 8004078:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800407c:	601a      	str	r2, [r3, #0]
  return id;
 800407e:	68bb      	ldr	r3, [r7, #8]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40010c00 	.word	0x40010c00
 800408c:	40011000 	.word	0x40011000
 8004090:	20000188 	.word	0x20000188
 8004094:	40010400 	.word	0x40010400
 8004098:	20000184 	.word	0x20000184

0800409c <_Z17writeRegisterPairhht>:
}


/*****************************************************************************/
void writeRegisterPair(uint8_t aH, uint8_t aL, uint16_t d)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	460b      	mov	r3, r1
 80040a8:	71bb      	strb	r3, [r7, #6]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80bb      	strh	r3, [r7, #4]
  writeRegister8(aH, d>>8);
 80040ae:	88bb      	ldrh	r3, [r7, #4]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f80c 	bl	80040d8 <_Z14writeRegister8hh>
  writeRegister8(aL, d);
 80040c0:	88bb      	ldrh	r3, [r7, #4]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f805 	bl	80040d8 <_Z14writeRegister8hh>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <_Z14writeRegister8hh>:

/*****************************************************************************/
void writeRegister8(uint8_t a, uint8_t d)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	460a      	mov	r2, r1
 80040e2:	71fb      	strb	r3, [r7, #7]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71bb      	strb	r3, [r7, #6]
  writeCommand(a);
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff12 	bl	8003f14 <_ZL12writeCommandh>
  CD_DATA;
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_Z14writeRegister8hh+0x68>)
 80040f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040f6:	611a      	str	r2, [r3, #16]
  write8(d);
 80040f8:	79bb      	ldrb	r3, [r7, #6]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	041a      	lsls	r2, r3, #16
 8004100:	79bb      	ldrb	r3, [r7, #6]
 8004102:	431a      	orrs	r2, r3
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <_Z14writeRegister8hh+0x6c>)
 8004106:	611a      	str	r2, [r3, #16]
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <_Z14writeRegister8hh+0x68>)
 800410a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800410e:	615a      	str	r2, [r3, #20]
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <_Z14writeRegister8hh+0x68>)
 8004112:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004116:	611a      	str	r2, [r3, #16]
  CS_IDLE;
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <_Z14writeRegister8hh+0x6c>)
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <_Z14writeRegister8hh+0x70>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60d3      	str	r3, [r2, #12]
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <_Z14writeRegister8hh+0x6c>)
 8004122:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <_Z14writeRegister8hh+0x68>)
 800412a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800412e:	611a      	str	r2, [r3, #16]
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <_Z14writeRegister8hh+0x74>)
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <_Z14writeRegister8hh+0x78>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40011000 	.word	0x40011000
 8004144:	40010c00 	.word	0x40010c00
 8004148:	20000188 	.word	0x20000188
 800414c:	40010400 	.word	0x40010400
 8004150:	20000184 	.word	0x20000184

08004154 <_Z15writeRegister16tt>:

/*****************************************************************************/
void writeRegister16(uint16_t a, uint16_t d)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	460a      	mov	r2, r1
 800415e:	80fb      	strh	r3, [r7, #6]
 8004160:	4613      	mov	r3, r2
 8004162:	80bb      	strh	r3, [r7, #4]
  writeCommand(a);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fed3 	bl	8003f14 <_ZL12writeCommandh>
  CD_DATA;
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <_Z15writeRegister16tt+0x98>)
 8004170:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004174:	611a      	str	r2, [r3, #16]
  write8(d>>8);
 8004176:	88bb      	ldrh	r3, [r7, #4]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	b29b      	uxth	r3, r3
 800417c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8004180:	b29b      	uxth	r3, r3
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	88ba      	ldrh	r2, [r7, #4]
 8004186:	0a12      	lsrs	r2, r2, #8
 8004188:	b292      	uxth	r2, r2
 800418a:	431a      	orrs	r2, r3
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <_Z15writeRegister16tt+0x9c>)
 800418e:	611a      	str	r2, [r3, #16]
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <_Z15writeRegister16tt+0x98>)
 8004192:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <_Z15writeRegister16tt+0x98>)
 800419a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800419e:	611a      	str	r2, [r3, #16]
  write8(d);
 80041a0:	88bb      	ldrh	r3, [r7, #4]
 80041a2:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	88bb      	ldrh	r3, [r7, #4]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <_Z15writeRegister16tt+0x9c>)
 80041b0:	611a      	str	r2, [r3, #16]
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <_Z15writeRegister16tt+0x98>)
 80041b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041b8:	615a      	str	r2, [r3, #20]
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <_Z15writeRegister16tt+0x98>)
 80041bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041c0:	611a      	str	r2, [r3, #16]
  CS_IDLE;
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <_Z15writeRegister16tt+0x9c>)
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <_Z15writeRegister16tt+0xa0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60d3      	str	r3, [r2, #12]
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <_Z15writeRegister16tt+0x9c>)
 80041cc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <_Z15writeRegister16tt+0x98>)
 80041d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041d8:	611a      	str	r2, [r3, #16]
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <_Z15writeRegister16tt+0xa4>)
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <_Z15writeRegister16tt+0xa8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6013      	str	r3, [r2, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40011000 	.word	0x40011000
 80041f0:	40010c00 	.word	0x40010c00
 80041f4:	20000188 	.word	0x20000188
 80041f8:	40010400 	.word	0x40010400
 80041fc:	20000184 	.word	0x20000184

08004200 <_Z15writeRegister32hm>:

/*****************************************************************************/
void writeRegister32(uint8_t r, uint32_t d)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	71fb      	strb	r3, [r7, #7]
  writeCommand(r);
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fe80 	bl	8003f14 <_ZL12writeCommandh>
  CD_DATA;
 8004214:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 8004216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800421a:	611a      	str	r2, [r3, #16]
  write8(d >> 24);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	0e1b      	lsrs	r3, r3, #24
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	f483 027f 	eor.w	r2, r3, #16711680	; 0xff0000
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	492a      	ldr	r1, [pc, #168]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 8004232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 800423a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800423e:	611a      	str	r2, [r3, #16]
  write8(d >> 16);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	f483 027f 	eor.w	r2, r3, #16711680	; 0xff0000
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	4921      	ldr	r1, [pc, #132]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 8004256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800425a:	615a      	str	r2, [r3, #20]
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 800425e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004262:	611a      	str	r2, [r3, #16]
  write8(d >> 8);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	f483 027f 	eor.w	r2, r3, #16711680	; 0xff0000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	4918      	ldr	r1, [pc, #96]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 800427a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 8004282:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004286:	611a      	str	r2, [r3, #16]
  write8(d);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	f483 027f 	eor.w	r2, r3, #16711680	; 0xff0000
 8004290:	4910      	ldr	r1, [pc, #64]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 800429a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800429e:	615a      	str	r2, [r3, #20]
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 80042a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042a6:	611a      	str	r2, [r3, #16]
  CS_IDLE;
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <_Z15writeRegister32hm+0xd8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <_Z15writeRegister32hm+0xd4>)
 80042b2:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_Z15writeRegister32hm+0xd0>)
 80042ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042be:	611a      	str	r2, [r3, #16]
 80042c0:	4a06      	ldr	r2, [pc, #24]	; (80042dc <_Z15writeRegister32hm+0xdc>)
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <_Z15writeRegister32hm+0xe0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40011000 	.word	0x40011000
 80042d4:	40010c00 	.word	0x40010c00
 80042d8:	20000188 	.word	0x20000188
 80042dc:	40010400 	.word	0x40010400
 80042e0:	20000184 	.word	0x20000184

080042e4 <_Z17Delay_us_Timer_Onv>:

//////////////////////////////////////////////////////////////////////////
// Функции управления таймером
//
void Delay_us_Timer_On (void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Start_IT(Delay_us_Timer_Handle);
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <_Z17Delay_us_Timer_Onv+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd fe75 	bl	8001fdc <HAL_TIM_Base_Start_IT>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c

080042fc <_Z18Delay_us_Timer_Offv>:

void Delay_us_Timer_Off (void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Stop_IT(Delay_us_Timer_Handle);
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <_Z18Delay_us_Timer_Offv+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd febb 	bl	8002080 <HAL_TIM_Base_Stop_IT>
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000000c 	.word	0x2000000c

08004314 <_Z18ISR_Delay_us_Timerv>:
// Обработчик прерывания таймера
// 
volatile unsigned int Delay_us_Is_Running = false;										// Признак того, что задержка выполняется
//
void ISR_Delay_us_Timer (void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	Delay_us_Timer_Off();																								// Выключение таймера
 8004318:	f7ff fff0 	bl	80042fc <_Z18Delay_us_Timer_Offv>
	Delay_us_Is_Running = false;																				// Сброс признака выполнения задержки
 800431c:	4b02      	ldr	r3, [pc, #8]	; (8004328 <_Z18ISR_Delay_us_Timerv+0x14>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000190 	.word	0x20000190

0800432c <_Z7delayUSt>:

//////////////////////////////////////////////////////////////////////////
// uint16_t Задержка в мкс. Не более 65535
//
void delayUS(unsigned short int time_us)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	80fb      	strh	r3, [r7, #6]
	Delay_us_Is_Running = true;																						// Задержка началась
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <_Z7delayUSt+0x4c>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(Delay_us_Timer_Handle, 0);											// Сброс счётного регистра
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <_Z7delayUSt+0x50>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(Delay_us_Timer_Handle, time_us);							// Задержка определяется значением в регистре ARR
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <_Z7delayUSt+0x50>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <_Z7delayUSt+0x50>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	60da      	str	r2, [r3, #12]
	Delay_us_Timer_On();																									// Включение таймера
 8004358:	f7ff ffc4 	bl	80042e4 <_Z17Delay_us_Timer_Onv>
	while(Delay_us_Is_Running);																						// Ожидание окончания счёта
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <_Z7delayUSt+0x4c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <_Z7delayUSt+0x44>
 800436e:	e7f5      	b.n	800435c <_Z7delayUSt+0x30>
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000190 	.word	0x20000190
 800437c:	2000000c 	.word	0x2000000c

08004380 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f805 	bl	80043ae <_ZNSt8__detail17_List_node_header7_M_initEv>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
#endif
      }
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <_ZN3but14ButtonCountersC1Ev>:
	GPIO_PinState ReleaseState_;
//___
	uint16_t index;
};

struct ButtonCounters
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <_ZN3but13ButtonWrapperC1EP12GPIO_TypeDeft13GPIO_PinState>:
	uint32_t TimeBounce_{};
	uint32_t SetTime_{};
	ButtonState ButtonState_ = ButtonState::NEVERMIND;

	/////////////////////////////////////
	ButtonWrapper(GPIO_TypeDef* Port_, uint16_t Pin_, GPIO_PinState Default_) : ButtonDef{Port_, Pin_, Default_} {}
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	460b      	mov	r3, r1
 800440a:	80fb      	strh	r3, [r7, #6]
 800440c:	4613      	mov	r3, r2
 800440e:	717b      	strb	r3, [r7, #5]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	6053      	str	r3, [r2, #4]
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	809a      	strh	r2, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	797a      	ldrb	r2, [r7, #5]
 800442c:	719a      	strb	r2, [r3, #6]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	330c      	adds	r3, #12
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ffce 	bl	80043d4 <_ZN3but14ButtonCountersC1Ev>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	61da      	str	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	629a      	str	r2, [r3, #40]	; 0x28
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8b3 	bl	80045d4 <_ZNSaISt10_List_nodeIN3but13ButtonWrapperEEED1Ev>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f896 	bl	80045b4 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE10_List_implC1Ev>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ffeb 	bl	8004478 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EEC1Ev>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>:
using namespace but;

std::list<ButtonWrapper> ButtonControlBlock::myButtons;

ButtonWrapper* ButtonControlBlock::CreateButton(GPIO_TypeDef* Port, uint16_t Pin, GPIO_PinState Default)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b08f      	sub	sp, #60	; 0x3c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
 80044b8:	4613      	mov	r3, r2
 80044ba:	707b      	strb	r3, [r7, #1]
	static int counter = 0;
	myButtons.push_back(ButtonWrapper(Port, Pin, Default));
 80044bc:	787b      	ldrb	r3, [r7, #1]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	f107 000c 	add.w	r0, r7, #12
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	f7ff ff98 	bl	80043fa <_ZN3but13ButtonWrapperC1EP12GPIO_TypeDeft13GPIO_PinState>
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	4619      	mov	r1, r3
 80044d0:	480a      	ldr	r0, [pc, #40]	; (80044fc <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x50>)
 80044d2:	f000 f89b 	bl	800460c <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE9push_backEOS2_>
	myButtons.back().index = counter++;
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x54>)
 80044d8:	681c      	ldr	r4, [r3, #0]
 80044da:	1c63      	adds	r3, r4, #1
 80044dc:	4a08      	ldr	r2, [pc, #32]	; (8004500 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x54>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4806      	ldr	r0, [pc, #24]	; (80044fc <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x50>)
 80044e2:	f000 f8a9 	bl	8004638 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE4backEv>
 80044e6:	4603      	mov	r3, r0
 80044e8:	b2a2      	uxth	r2, r4
 80044ea:	811a      	strh	r2, [r3, #8]
	return &myButtons.back();
 80044ec:	4803      	ldr	r0, [pc, #12]	; (80044fc <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x50>)
 80044ee:	f000 f8a3 	bl	8004638 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE4backEv>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	373c      	adds	r7, #60	; 0x3c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	20000194 	.word	0x20000194
 8004500:	200001a0 	.word	0x200001a0

08004504 <_ZN3but18ButtonControlBlock13ButtonHandlerEv>:

////////////////////////////////////////////////////////
void ButtonControlBlock::ButtonHandler()
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
	for(auto& it : myButtons)
 800450a:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0xac>)
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	6978      	ldr	r0, [r7, #20]
 8004510:	f000 f8aa 	bl	8004668 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE5beginEv>
 8004514:	4603      	mov	r3, r0
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	6978      	ldr	r0, [r7, #20]
 800451a:	f000 f8b6 	bl	800468a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE3endEv>
 800451e:	4603      	mov	r3, r0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	1d3a      	adds	r2, r7, #4
 8004524:	f107 0308 	add.w	r3, r7, #8
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f8bd 	bl	80046aa <_ZStneRKSt14_List_iteratorIN3but13ButtonWrapperEES4_>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d038      	beq.n	80045a8 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0xa4>
 8004536:	f107 0308 	add.w	r3, r7, #8
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f8d7 	bl	80046ee <_ZNKSt14_List_iteratorIN3but13ButtonWrapperEEdeEv>
 8004540:	6138      	str	r0, [r7, #16]
	{
		bool PinState = it.ReadPin();
 8004542:	6938      	ldr	r0, [r7, #16]
 8004544:	f000 fc10 	bl	8004d68 <_ZNK3but13ButtonWrapper7ReadPinEv>
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]
		switch(it.ButtonState_)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d823      	bhi.n	800459c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x98>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x58>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004579 	.word	0x08004579
 8004564:	08004585 	.word	0x08004585
 8004568:	08004591 	.word	0x08004591
		{
		case ButtonState::NEVERMIND:
			it.NevermindHandle(PinState);
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	4619      	mov	r1, r3
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f000 fb11 	bl	8004b98 <_ZN3but13ButtonWrapper15NevermindHandleEb>
			break;
 8004576:	e011      	b.n	800459c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x98>

		case ButtonState::PRESS_BOUNCE:
			it.PressBounceHandle(PinState);
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	4619      	mov	r1, r3
 800457c:	6938      	ldr	r0, [r7, #16]
 800457e:	f000 fb3f 	bl	8004c00 <_ZN3but13ButtonWrapper17PressBounceHandleEb>
			break;
 8004582:	e00b      	b.n	800459c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x98>

		case ButtonState::SLICE_WAIT:
			it.SliceWaitHandle(PinState);
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	4619      	mov	r1, r3
 8004588:	6938      	ldr	r0, [r7, #16]
 800458a:	f000 fb78 	bl	8004c7e <_ZN3but13ButtonWrapper15SliceWaitHandleEb>
			break;
 800458e:	e005      	b.n	800459c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x98>

		case ButtonState::RELEASE_BOUNCE:
			it.ReleaseBounceHandle(PinState);
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	4619      	mov	r1, r3
 8004594:	6938      	ldr	r0, [r7, #16]
 8004596:	f000 fbb6 	bl	8004d06 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb>
			break;
 800459a:	bf00      	nop
	for(auto& it : myButtons)
 800459c:	f107 0308 	add.w	r3, r7, #8
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f895 	bl	80046d0 <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEppEv>
 80045a6:	e7bc      	b.n	8004522 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x1e>
		}
	}
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000194 	.word	0x20000194

080045b4 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8a4 	bl	800470a <_ZNSaISt10_List_nodeIN3but13ButtonWrapperEEEC1Ev>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fee6 	bl	8004396 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZNSaISt10_List_nodeIN3but13ButtonWrapperEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8a0 	bl	8004722 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEED1Ev>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f89e 	bl	8004736 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE8_M_clearEv>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff2f 	bl	8004460 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE10_List_implD1Ev>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE9push_backEOS2_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f837 	bl	800468a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE3endEv>
 800461c:	4604      	mov	r4, r0
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f000 f8ae 	bl	8004780 <_ZSt4moveIRN3but13ButtonWrapperEEONSt16remove_referenceIT_E4typeEOS4_>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	4621      	mov	r1, r4
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8b2 	bl	8004794 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE9_M_insertIJS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f822 	bl	800468a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE3endEv>
 8004646:	4603      	mov	r3, r0
 8004648:	60fb      	str	r3, [r7, #12]
	--__tmp;
 800464a:	f107 030c 	add.w	r3, r7, #12
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f8be 	bl	80047d0 <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEmmEv>
	return *__tmp;
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f848 	bl	80046ee <_ZNKSt14_List_iteratorIN3but13ButtonWrapperEEdeEv>
 800465e:	4603      	mov	r3, r0
      }
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f8b7 	bl	80047ee <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEC1EPNSt8__detail15_List_node_baseE>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8a7 	bl	80047ee <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEC1EPNSt8__detail15_List_node_baseE>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <_ZStneRKSt14_List_iteratorIN3but13ButtonWrapperEES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
	return *this;
 80046e2:	687b      	ldr	r3, [r7, #4]
      }
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <_ZNKSt14_List_iteratorIN3but13ButtonWrapperEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f885 	bl	800480a <_ZNSt10_List_nodeIN3but13ButtonWrapperEE9_M_valptrEv>
 8004700:	4603      	mov	r3, r0
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZNSaISt10_List_nodeIN3but13ButtonWrapperEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f887 	bl	8004826 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEEC1Ev>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	d015      	beq.n	8004778 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8004756:	6938      	ldr	r0, [r7, #16]
 8004758:	f000 f857 	bl	800480a <_ZNSt10_List_nodeIN3but13ButtonWrapperEE9_M_valptrEv>
 800475c:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f86b 	bl	800483a <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE21_M_get_Node_allocatorEv>
 8004764:	4603      	mov	r3, r0
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f870 	bl	800484e <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE7destroyIS2_EEvRS4_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 800476e:	6939      	ldr	r1, [r7, #16]
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f879 	bl	8004868 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8004776:	e7e5      	b.n	8004744 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE8_M_clearEv+0xe>
	}
    }
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZSt4moveIRN3but13ButtonWrapperEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE9_M_insertIJS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f870 	bl	8004886 <_ZSt7forwardIN3but13ButtonWrapperEEOT_RNSt16remove_referenceIS2_E4typeE>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f875 	bl	800489a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE14_M_create_nodeIJS2_EEEPSt10_List_nodeIS2_EDpOT_>
 80047b0:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f007 fcb3 	bl	800c124 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f89d 	bl	8004902 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_inc_sizeEj>
       }
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
	return *this;
 80047e2:	687b      	ldr	r3, [r7, #4]
      }
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <_ZNSt14_List_iteratorIN3but13ButtonWrapperEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <_ZNSt10_List_nodeIN3but13ButtonWrapperEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3308      	adds	r3, #8
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f883 	bl	8004922 <_ZN9__gnu_cxx16__aligned_membufIN3but13ButtonWrapperEE6_M_ptrEv>
 800481c:	4603      	mov	r3, r0
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f86d 	bl	800493a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f868 	bl	800494e <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE10deallocateERS4_PS3_j>
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <_ZSt7forwardIN3but13ButtonWrapperEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EE14_M_create_nodeIJS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800489a:	b590      	push	{r4, r7, lr}
 800489c:	b087      	sub	sp, #28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f860 	bl	800496c <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_get_nodeEv>
 80048ac:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ffc2 	bl	800483a <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE21_M_get_Node_allocatorEv>
 80048b6:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f861 	bl	8004988 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7ff ff9f 	bl	800480a <_ZNSt10_List_nodeIN3but13ButtonWrapperEE9_M_valptrEv>
 80048cc:	4604      	mov	r4, r0
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f7ff ffd9 	bl	8004886 <_ZSt7forwardIN3but13ButtonWrapperEEOT_RNSt16remove_referenceIS2_E4typeE>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	4621      	mov	r1, r4
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f000 f87d 	bl	80049da <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f88a 	bl	8004a00 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEEaSEDn>
	  return __p;
 80048ec:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f85c 	bl	80049b0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEED1Ev>
	  return __p;
 80048f8:	4623      	mov	r3, r4
	}
 80048fa:	4618      	mov	r0, r3
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd90      	pop	{r4, r7, pc}

08004902 <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <_ZN9__gnu_cxx16__aligned_membufIN3but13ButtonWrapperEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f876 	bl	8004a1c <_ZN9__gnu_cxx16__aligned_membufIN3but13ButtonWrapperEE7_M_addrEv>
 8004930:	4603      	mov	r3, r0
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f866 	bl	8004a30 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE10deallocateEPS4_j>
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f86b 	bl	8004a54 <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE8allocateERS4_j>
 800497e:	4603      	mov	r3, r0
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004994:	68b8      	ldr	r0, [r7, #8]
 8004996:	f000 f86c 	bl	8004a72 <_ZSt11__addressofISaISt10_List_nodeIN3but13ButtonWrapperEEEEPT_RS5_>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]
      { }
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7ff ffbf 	bl	800494e <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE10deallocateERS4_PS3_j>
      }
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ff4d 	bl	8004886 <_ZSt7forwardIN3but13ButtonWrapperEEOT_RNSt16remove_referenceIS2_E4typeE>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f847 	bl	8004a86 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE9constructIS3_JS3_EEEvPT_DpOT0_>
	}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN3but13ButtonWrapperEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
	return *this;
 8004a10:	687b      	ldr	r3, [r7, #4]
      }
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <_ZN9__gnu_cxx16__aligned_membufIN3but13ButtonWrapperEE7_M_addrEv>:
      _M_addr() noexcept
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2234      	movs	r2, #52	; 0x34
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	4619      	mov	r1, r3
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f007 fb59 	bl	800c0fe <_ZdlPvj>
      }
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZNSt16allocator_traitsISaISt10_List_nodeIN3but13ButtonWrapperEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f82c 	bl	8004ac0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE8allocateEjPKv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_ZSt11__addressofISaISt10_List_nodeIN3but13ButtonWrapperEEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE9constructIS3_JS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004a86:	b5b0      	push	{r4, r5, r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fef7 	bl	8004886 <_ZSt7forwardIN3but13ButtonWrapperEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004a98:	4605      	mov	r5, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	202c      	movs	r0, #44	; 0x2c
 8004aa0:	f7ff fc6e 	bl	8004380 <_ZnwjPv>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461c      	mov	r4, r3
 8004aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bdb0      	pop	{r4, r5, r7, pc}

08004ac0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f817 	bl	8004b00 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE11_M_max_sizeEv>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	bf8c      	ite	hi
 8004ada:	2301      	movhi	r3, #1
 8004adc:	2300      	movls	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004ae4:	f007 fb2a 	bl	800c13c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2234      	movs	r2, #52	; 0x34
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	f007 fb06 	bl	800c102 <_Znwj>
 8004af6:	4603      	mov	r3, r0
      }
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN3but13ButtonWrapperEEE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	02762762 	.word	0x02762762

08004b18 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EED1Ev>:
      ~list() = default;
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd62 	bl	80045ec <_ZNSt7__cxx1110_List_baseIN3but13ButtonWrapperESaIS2_EED1Ev>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <_Z41__static_initialization_and_destruction_0ii>:
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d102      	bne.n	8004b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::list<ButtonWrapper> ButtonControlBlock::myButtons;
 8004b4e:	4809      	ldr	r0, [pc, #36]	; (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004b50:	f7ff fc9f 	bl	8004492 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EEC1Ev>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d102      	bne.n	8004b6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004b64:	4803      	ldr	r0, [pc, #12]	; (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004b66:	f7ff ffd7 	bl	8004b18 <_ZNSt7__cxx114listIN3but13ButtonWrapperESaIS2_EED1Ev>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000194 	.word	0x20000194

08004b78 <_GLOBAL__sub_I__ZN3but18ButtonControlBlock9myButtonsB5cxx11E>:
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b80:	2001      	movs	r0, #1
 8004b82:	f7ff ffd7 	bl	8004b34 <_Z41__static_initialization_and_destruction_0ii>
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_GLOBAL__sub_D__ZN3but18ButtonControlBlock9myButtonsB5cxx11E>:
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7ff ffcf 	bl	8004b34 <_Z41__static_initialization_and_destruction_0ii>
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZN3but13ButtonWrapper15NevermindHandleEb>:
using namespace but;

static bool states[4]{1, 1, 1, 1};

void ButtonWrapper::NevermindHandle(bool PinState)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
	if(PinState)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <_ZN3but13ButtonWrapper15NevermindHandleEb+0x22>
	{
		SetTime_ 		= HAL_GetTick();
 8004baa:	f7fc faa5 	bl	80010f8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	61da      	str	r2, [r3, #28]
		ButtonState_  	= ButtonState::PRESS_BOUNCE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	621a      	str	r2, [r3, #32]
	}
	if(DurationTime() >= DELAY_BETWEEN_DOUBLE_CLICK)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8c5 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2bc7      	cmp	r3, #199	; 0xc7
 8004bc4:	bf8c      	ite	hi
 8004bc6:	2301      	movhi	r3, #1
 8004bc8:	2300      	movls	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <_ZN3but13ButtonWrapper15NevermindHandleEb+0x5a>
	{
		CurrentСlick_ 		= ShortClickCount_ + (HoldClickCount_ * 10);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68d9      	ldr	r1, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	18ca      	adds	r2, r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
		ShortClickCount_ 	= 0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	60da      	str	r2, [r3, #12]
		HoldClickCount_  	= 0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
	}
	LogicState_  		= LogicState::NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN3but13ButtonWrapper17PressBounceHandleEb>:

void ButtonWrapper::PressBounceHandle(bool PinState)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
	PinState ? PinStateCount_++ : PinStateCount_ = 0;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x1e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	615a      	str	r2, [r3, #20]
 8004c1c:	e002      	b.n	8004c24 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x24>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
	if(PinStateCount_ == TIME_AFTER_BOUNCE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b0a      	cmp	r3, #10
 8004c2a:	d114      	bne.n	8004c56 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x56>
	{
		TimeBounce_ 		= DurationTime();
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f88c 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
		SetTime_ 			= HAL_GetTick();
 8004c38:	f7fc fa5e 	bl	80010f8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	61da      	str	r2, [r3, #28]
		ButtonState_ 		= ButtonState::SLICE_WAIT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	621a      	str	r2, [r3, #32]
		LogicState_ 		= LogicState::WAS_PRESSED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
		PinStateCount_   	= 0;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	615a      	str	r2, [r3, #20]
	}
	else if(TimeBounce_ == DurationTime())
		ButtonState_ 	= ButtonState::NEVERMIND;
}
 8004c54:	e00f      	b.n	8004c76 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x76>
	else if(TimeBounce_ == DurationTime())
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699c      	ldr	r4, [r3, #24]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f875 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004c60:	4603      	mov	r3, r0
 8004c62:	429c      	cmp	r4, r3
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x76>
		ButtonState_ 	= ButtonState::NEVERMIND;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}

08004c7e <_ZN3but13ButtonWrapper15SliceWaitHandleEb>:

void ButtonWrapper::SliceWaitHandle(bool PinState)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
	if(!PinState)
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	f083 0301 	eor.w	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d033      	beq.n	8004cfe <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x80>
	{
		if(SHORT_CLICK < DurationTime())
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f857 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b32      	cmp	r3, #50	; 0x32
 8004ca0:	bf8c      	ite	hi
 8004ca2:	2301      	movhi	r3, #1
 8004ca4:	2300      	movls	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d025      	beq.n	8004cf8 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x7a>
		{
			if(HOLD_CLICK < DurationTime())
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f84c 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8004cb8:	bf8c      	ite	hi
 8004cba:	2301      	movhi	r3, #1
 8004cbc:	2300      	movls	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x58>
			{
				LogicState_	= LogicState::WAS_HOLDED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
				HoldClickCount_++;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]
 8004cd4:	e007      	b.n	8004ce6 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x68>
			}
			else
			{
				LogicState_ 	= LogicState::WAS_SHORT_PRESSED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
				ShortClickCount_++;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
			}
			SetTime_ 			= HAL_GetTick();
 8004ce6:	f7fc fa07 	bl	80010f8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	61da      	str	r2, [r3, #28]
			ButtonState_ 		= ButtonState::RELEASE_BOUNCE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	621a      	str	r2, [r3, #32]
		}
		else ButtonState_ 		= ButtonState::NEVERMIND;
	}
}
 8004cf6:	e002      	b.n	8004cfe <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x80>
		else ButtonState_ 		= ButtonState::NEVERMIND;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb>:

void ButtonWrapper::ReleaseBounceHandle(bool PinState)
{
 8004d06:	b590      	push	{r4, r7, lr}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
	if(TimeBounce_ == DurationTime())
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699c      	ldr	r4, [r3, #24]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f817 	bl	8004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb+0x3c>
	{
		SetTime_ 		= HAL_GetTick();
 8004d2c:	f7fc f9e4 	bl	80010f8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	61da      	str	r2, [r3, #28]
		LogicState_		= LogicState::WAS_RELEASED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
		ButtonState_ 	= ButtonState::NEVERMIND;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	621a      	str	r2, [r3, #32]
	}
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}

08004d4a <_ZNK3but13ButtonWrapper12DurationTimeEv>:

uint32_t ButtonWrapper::DurationTime() const
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - SetTime_;
 8004d52:	f7fc f9d1 	bl	80010f8 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	1ad3      	subs	r3, r2, r3
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <_ZNK3but13ButtonWrapper7ReadPinEv>:

bool ButtonWrapper::ReadPin() const
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	return states[index] ^ ReleaseState_;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	891b      	ldrh	r3, [r3, #8]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <_ZNK3but13ButtonWrapper7ReadPinEv+0x2c>)
 8004d78:	5c9b      	ldrb	r3, [r3, r2]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	799b      	ldrb	r3, [r3, #6]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	20000010 	.word	0x20000010

08004d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d034      	beq.n	8004e12 <HAL_GPIO_EXTI_Callback+0x7a>
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	dc40      	bgt.n	8004e2e <HAL_GPIO_EXTI_Callback+0x96>
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d022      	beq.n	8004df6 <HAL_GPIO_EXTI_Callback+0x5e>
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	dc3c      	bgt.n	8004e2e <HAL_GPIO_EXTI_Callback+0x96>
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d002      	beq.n	8004dbe <HAL_GPIO_EXTI_Callback+0x26>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d00e      	beq.n	8004dda <HAL_GPIO_EXTI_Callback+0x42>
	{
	case DB4_Pin: states[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
	case DB5_Pin: states[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
	case DB6_Pin: states[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
	case DB7_Pin: states[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
	default: break;
 8004dbc:	e037      	b.n	8004e2e <HAL_GPIO_EXTI_Callback+0x96>
	case DB4_Pin: states[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	481d      	ldr	r0, [pc, #116]	; (8004e38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004dc4:	f7fc fc58 	bl	8001678 <HAL_GPIO_ReadPin>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e02a      	b.n	8004e30 <HAL_GPIO_EXTI_Callback+0x98>
	case DB5_Pin: states[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4816      	ldr	r0, [pc, #88]	; (8004e38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004de0:	f7fc fc4a 	bl	8001678 <HAL_GPIO_ReadPin>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8004df2:	705a      	strb	r2, [r3, #1]
 8004df4:	e01c      	b.n	8004e30 <HAL_GPIO_EXTI_Callback+0x98>
	case DB6_Pin: states[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	480f      	ldr	r0, [pc, #60]	; (8004e38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004dfc:	f7fc fc3c 	bl	8001678 <HAL_GPIO_ReadPin>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8004e0e:	709a      	strb	r2, [r3, #2]
 8004e10:	e00e      	b.n	8004e30 <HAL_GPIO_EXTI_Callback+0x98>
	case DB7_Pin: states[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin); break;
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4808      	ldr	r0, [pc, #32]	; (8004e38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004e18:	f7fc fc2e 	bl	8001678 <HAL_GPIO_ReadPin>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8004e2a:	70da      	strb	r2, [r3, #3]
 8004e2c:	e000      	b.n	8004e30 <HAL_GPIO_EXTI_Callback+0x98>
	default: break;
 8004e2e:	bf00      	nop
	}
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40010c00 	.word	0x40010c00
 8004e3c:	20000010 	.word	0x20000010

08004e40 <_Z8MainInitv>:
but::ButtonWrapper *but2 = but::ButtonControlBlock::CreateButton(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_SET);
but::ButtonWrapper *but3 = but::ButtonControlBlock::CreateButton(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_SET);
but::ButtonWrapper *but4 = but::ButtonControlBlock::CreateButton(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_SET);

void MainInit()
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	tft_begin();
 8004e44:	f7fd fd88 	bl	8002958 <_Z9tft_beginv>
	tft_setRotation(RECTANGLE_ORIENTATION);
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f7fe fa95 	bl	8003378 <_Z15tft_setRotationh>
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_Z11AboutChoicev>:

void AboutChoice()
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0

}
 8004e56:	bf00      	nop
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
	...

08004e60 <_Z18PrintMenuInterfacev>:

void PrintMenuInterface()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af02      	add	r7, sp, #8
	tft_fillScreen(ILI9341_CYAN);
 8004e66:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004e6a:	f7fd fe17 	bl	8002a9c <_Z14tft_fillScreent>
	tft_fillRoundRect(80, 30, 160, 50, 5, ILI9341_BLACK);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	2305      	movs	r3, #5
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2332      	movs	r3, #50	; 0x32
 8004e78:	22a0      	movs	r2, #160	; 0xa0
 8004e7a:	211e      	movs	r1, #30
 8004e7c:	2050      	movs	r0, #80	; 0x50
 8004e7e:	f7fd fed8 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_fillRoundRect(80, 95, 160, 50, 5, ILI9341_BLACK);
 8004e82:	2300      	movs	r3, #0
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	2305      	movs	r3, #5
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2332      	movs	r3, #50	; 0x32
 8004e8c:	22a0      	movs	r2, #160	; 0xa0
 8004e8e:	215f      	movs	r1, #95	; 0x5f
 8004e90:	2050      	movs	r0, #80	; 0x50
 8004e92:	f7fd fece 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_fillRoundRect(80, 160, 160, 50, 5, ILI9341_BLACK);
 8004e96:	2300      	movs	r3, #0
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2305      	movs	r3, #5
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2332      	movs	r3, #50	; 0x32
 8004ea0:	22a0      	movs	r2, #160	; 0xa0
 8004ea2:	21a0      	movs	r1, #160	; 0xa0
 8004ea4:	2050      	movs	r0, #80	; 0x50
 8004ea6:	f7fd fec4 	bl	8002c32 <_Z17tft_fillRoundRectssssst>

	tft_setTextSize(3);
 8004eaa:	2003      	movs	r0, #3
 8004eac:	f7fe fa22 	bl	80032f4 <_Z15tft_setTextSizeh>
	PrintButton(snake::SnakeTask, ILI9341_WHITE);
 8004eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004eb4:	4807      	ldr	r0, [pc, #28]	; (8004ed4 <_Z18PrintMenuInterfacev+0x74>)
 8004eb6:	f000 f813 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
	PrintButton(tetris::TetrisTask, ILI9341_WHITE);
 8004eba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ebe:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <_Z18PrintMenuInterfacev+0x78>)
 8004ec0:	f000 f80e 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
	PrintButton(AboutChoice, ILI9341_WHITE);
 8004ec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ec8:	4804      	ldr	r0, [pc, #16]	; (8004edc <_Z18PrintMenuInterfacev+0x7c>)
 8004eca:	f000 f809 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	0800635d 	.word	0x0800635d
 8004ed8:	0800bd75 	.word	0x0800bd75
 8004edc:	08004e53 	.word	0x08004e53

08004ee0 <_Z11PrintButtonPFvvEt>:

void PrintButton(void (*choice)(), uint16_t ColorText)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
	if(choice == snake::SnakeTask)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <_Z11PrintButtonPFvvEt+0xb4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d116      	bne.n	8004f22 <_Z11PrintButtonPFvvEt+0x42>
	{
		tft_fillRoundRect(84, 34, 152, 42, 5, BUTTON_FOREGROUND_COLOR);
 8004ef4:	f647 030f 	movw	r3, #30735	; 0x780f
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	2305      	movs	r3, #5
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	232a      	movs	r3, #42	; 0x2a
 8004f00:	2298      	movs	r2, #152	; 0x98
 8004f02:	2122      	movs	r1, #34	; 0x22
 8004f04:	2054      	movs	r0, #84	; 0x54
 8004f06:	f7fd fe94 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		tft_setCursor(114, 46);
 8004f0a:	212e      	movs	r1, #46	; 0x2e
 8004f0c:	2072      	movs	r0, #114	; 0x72
 8004f0e:	f7fe f9d9 	bl	80032c4 <_Z13tft_setCursorss>
		tft_setTextColor(ColorText);
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fa01 	bl	800331c <_Z16tft_setTextColort>
		tft_print("SNAKE");
 8004f1a:	481f      	ldr	r0, [pc, #124]	; (8004f98 <_Z11PrintButtonPFvvEt+0xb8>)
 8004f1c:	f7fe fab8 	bl	8003490 <_Z9tft_printPKc>
		tft_fillRoundRect(84, 164, 152, 42, 5, BUTTON_FOREGROUND_COLOR);
		tft_setCursor(114, 176);
		tft_setTextColor(ColorText);
		tft_print("ABOUT");
	}
}
 8004f20:	e034      	b.n	8004f8c <_Z11PrintButtonPFvvEt+0xac>
	else if(choice == tetris::TetrisTask)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <_Z11PrintButtonPFvvEt+0xbc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d116      	bne.n	8004f58 <_Z11PrintButtonPFvvEt+0x78>
		tft_fillRoundRect(84, 99, 152, 42, 5, BUTTON_FOREGROUND_COLOR);
 8004f2a:	f647 030f 	movw	r3, #30735	; 0x780f
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	2305      	movs	r3, #5
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	232a      	movs	r3, #42	; 0x2a
 8004f36:	2298      	movs	r2, #152	; 0x98
 8004f38:	2163      	movs	r1, #99	; 0x63
 8004f3a:	2054      	movs	r0, #84	; 0x54
 8004f3c:	f7fd fe79 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		tft_setCursor(106, 111);
 8004f40:	216f      	movs	r1, #111	; 0x6f
 8004f42:	206a      	movs	r0, #106	; 0x6a
 8004f44:	f7fe f9be 	bl	80032c4 <_Z13tft_setCursorss>
		tft_setTextColor(ColorText);
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f9e6 	bl	800331c <_Z16tft_setTextColort>
		tft_print("TETRIS");
 8004f50:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <_Z11PrintButtonPFvvEt+0xc0>)
 8004f52:	f7fe fa9d 	bl	8003490 <_Z9tft_printPKc>
}
 8004f56:	e019      	b.n	8004f8c <_Z11PrintButtonPFvvEt+0xac>
	else if(choice == AboutChoice)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <_Z11PrintButtonPFvvEt+0xc4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d115      	bne.n	8004f8c <_Z11PrintButtonPFvvEt+0xac>
		tft_fillRoundRect(84, 164, 152, 42, 5, BUTTON_FOREGROUND_COLOR);
 8004f60:	f647 030f 	movw	r3, #30735	; 0x780f
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	2305      	movs	r3, #5
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	232a      	movs	r3, #42	; 0x2a
 8004f6c:	2298      	movs	r2, #152	; 0x98
 8004f6e:	21a4      	movs	r1, #164	; 0xa4
 8004f70:	2054      	movs	r0, #84	; 0x54
 8004f72:	f7fd fe5e 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		tft_setCursor(114, 176);
 8004f76:	21b0      	movs	r1, #176	; 0xb0
 8004f78:	2072      	movs	r0, #114	; 0x72
 8004f7a:	f7fe f9a3 	bl	80032c4 <_Z13tft_setCursorss>
		tft_setTextColor(ColorText);
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe f9cb 	bl	800331c <_Z16tft_setTextColort>
		tft_print("ABOUT");
 8004f86:	4808      	ldr	r0, [pc, #32]	; (8004fa8 <_Z11PrintButtonPFvvEt+0xc8>)
 8004f88:	f7fe fa82 	bl	8003490 <_Z9tft_printPKc>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	0800635d 	.word	0x0800635d
 8004f98:	0800d298 	.word	0x0800d298
 8004f9c:	0800bd75 	.word	0x0800bd75
 8004fa0:	0800d2a0 	.word	0x0800d2a0
 8004fa4:	08004e53 	.word	0x08004e53
 8004fa8:	0800d2a8 	.word	0x0800d2a8

08004fac <_Z11МenuChoicePPFvvE>:

void МenuChoice(void (**choice)())
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	if(but1->LogicState_ == LogicState::WAS_RELEASED)
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <_Z11МenuChoicePPFvvE+0xd0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d114      	bne.n	8004fe8 <_Z11МenuChoicePPFvvE+0x3c>
	{
		PrintButton(*choice, ILI9341_WHITE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff8a 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		*choice = snake::SnakeTask;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <_Z11МenuChoicePPFvvE+0xd4>)
 8004fd0:	601a      	str	r2, [r3, #0]
		PrintButton(*choice, ILI9341_BLUE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	211f      	movs	r1, #31
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff81 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		but1->LogicState_ = LogicState::NONE;
 8004fde:	4b27      	ldr	r3, [pc, #156]	; (800507c <_Z11МenuChoicePPFvvE+0xd0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28
			PrintMenuInterface();
		}
		but4->LogicState_ = LogicState::NONE;
	}

}
 8004fe6:	e044      	b.n	8005072 <_Z11МenuChoicePPFvvE+0xc6>
	else if(but2->LogicState_ == LogicState::WAS_RELEASED)
 8004fe8:	4b26      	ldr	r3, [pc, #152]	; (8005084 <_Z11МenuChoicePPFvvE+0xd8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d114      	bne.n	800501c <_Z11МenuChoicePPFvvE+0x70>
		PrintButton(*choice, ILI9341_WHITE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ff70 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		*choice = tetris::TetrisTask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a21      	ldr	r2, [pc, #132]	; (8005088 <_Z11МenuChoicePPFvvE+0xdc>)
 8005004:	601a      	str	r2, [r3, #0]
		PrintButton(*choice, ILI9341_BLUE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	211f      	movs	r1, #31
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff ff67 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		but2->LogicState_ = LogicState::NONE;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <_Z11МenuChoicePPFvvE+0xd8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	629a      	str	r2, [r3, #40]	; 0x28
}
 800501a:	e02a      	b.n	8005072 <_Z11МenuChoicePPFvvE+0xc6>
	else if(but3->LogicState_ == LogicState::WAS_RELEASED)
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <_Z11МenuChoicePPFvvE+0xe0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	2b04      	cmp	r3, #4
 8005024:	d114      	bne.n	8005050 <_Z11МenuChoicePPFvvE+0xa4>
		PrintButton(*choice, ILI9341_WHITE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ff56 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		*choice = AboutChoice;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <_Z11МenuChoicePPFvvE+0xe4>)
 8005038:	601a      	str	r2, [r3, #0]
		PrintButton(*choice, ILI9341_BLUE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	211f      	movs	r1, #31
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff4d 	bl	8004ee0 <_Z11PrintButtonPFvvEt>
		but3->LogicState_ = LogicState::NONE;
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <_Z11МenuChoicePPFvvE+0xe0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800504e:	e010      	b.n	8005072 <_Z11МenuChoicePPFvvE+0xc6>
	else if(but4->LogicState_ == LogicState::WAS_RELEASED)
 8005050:	4b10      	ldr	r3, [pc, #64]	; (8005094 <_Z11МenuChoicePPFvvE+0xe8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	2b04      	cmp	r3, #4
 8005058:	d10b      	bne.n	8005072 <_Z11МenuChoicePPFvvE+0xc6>
		if(choice != nullptr)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <_Z11МenuChoicePPFvvE+0xbe>
			(*choice)();
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4798      	blx	r3
			PrintMenuInterface();
 8005066:	f7ff fefb 	bl	8004e60 <_Z18PrintMenuInterfacev>
		but4->LogicState_ = LogicState::NONE;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <_Z11МenuChoicePPFvvE+0xe8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200001a4 	.word	0x200001a4
 8005080:	0800635d 	.word	0x0800635d
 8005084:	200001a8 	.word	0x200001a8
 8005088:	0800bd75 	.word	0x0800bd75
 800508c:	200001ac 	.word	0x200001ac
 8005090:	08004e53 	.word	0x08004e53
 8005094:	200001b0 	.word	0x200001b0

08005098 <_Z10MainThreadv>:
void MainThread()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	MainInit();
 800509e:	f7ff fecf 	bl	8004e40 <_Z8MainInitv>
	PrintMenuInterface();
 80050a2:	f7ff fedd 	bl	8004e60 <_Z18PrintMenuInterfacev>
	void (*choice)() = nullptr;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
	while(true)
	{
		МenuChoice(&choice);
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ff7d 	bl	8004fac <_Z11МenuChoicePPFvvE>
 80050b2:	e7fa      	b.n	80050aa <_Z10MainThreadv+0x12>

080050b4 <_Z19computeTimeDurationm>:
{
	but::ButtonControlBlock::ButtonHandler();
}

uint32_t computeTimeDuration(uint32_t time)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - time;
 80050bc:	f7fc f81c 	bl	80010f8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <_Z41__static_initialization_and_destruction_0ii>:
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d124      	bne.n	800512a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d11f      	bne.n	800512a <_Z41__static_initialization_and_destruction_0ii+0x5a>
but::ButtonWrapper *but1 = but::ButtonControlBlock::CreateButton(DB4_GPIO_Port, DB4_Pin, GPIO_PIN_SET);
 80050ea:	2201      	movs	r2, #1
 80050ec:	2110      	movs	r1, #16
 80050ee:	4811      	ldr	r0, [pc, #68]	; (8005134 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80050f0:	f7ff f9dc 	bl	80044ac <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80050f8:	6013      	str	r3, [r2, #0]
but::ButtonWrapper *but2 = but::ButtonControlBlock::CreateButton(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_SET);
 80050fa:	2201      	movs	r2, #1
 80050fc:	2120      	movs	r1, #32
 80050fe:	480d      	ldr	r0, [pc, #52]	; (8005134 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005100:	f7ff f9d4 	bl	80044ac <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8005104:	4603      	mov	r3, r0
 8005106:	4a0d      	ldr	r2, [pc, #52]	; (800513c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005108:	6013      	str	r3, [r2, #0]
but::ButtonWrapper *but3 = but::ButtonControlBlock::CreateButton(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_SET);
 800510a:	2201      	movs	r2, #1
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4809      	ldr	r0, [pc, #36]	; (8005134 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005110:	f7ff f9cc 	bl	80044ac <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8005114:	4603      	mov	r3, r0
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005118:	6013      	str	r3, [r2, #0]
but::ButtonWrapper *but4 = but::ButtonControlBlock::CreateButton(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_SET);
 800511a:	2201      	movs	r2, #1
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	4805      	ldr	r0, [pc, #20]	; (8005134 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005120:	f7ff f9c4 	bl	80044ac <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8005124:	4603      	mov	r3, r0
 8005126:	4a07      	ldr	r2, [pc, #28]	; (8005144 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40010c00 	.word	0x40010c00
 8005138:	200001a4 	.word	0x200001a4
 800513c:	200001a8 	.word	0x200001a8
 8005140:	200001ac 	.word	0x200001ac
 8005144:	200001b0 	.word	0x200001b0

08005148 <_GLOBAL__sub_I_but1>:
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
 800514c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005150:	2001      	movs	r0, #1
 8005152:	f7ff ffbd 	bl	80050d0 <_Z41__static_initialization_and_destruction_0ii>
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZN10CoordinateC1Ell>:

struct Coordinate
{
	int32_t X;
	int32_t Y;
	Coordinate(int32_t X_, int32_t Y_) : X(X_), Y(Y_) {}
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>:

struct SnakeNode
{
	Coordinate Coord{-1, -1};
	color_t color;
	SnakeNode(Coordinate Coord_, color_t color_) : Coord{ Coord_ }, color(color_) {}
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	1d38      	adds	r0, r7, #4
 8005186:	e880 0006 	stmia.w	r0, {r1, r2}
 800518a:	807b      	strh	r3, [r7, #2]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	461a      	mov	r2, r3
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005196:	e882 0003 	stmia.w	r2, {r0, r1}
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	811a      	strh	r2, [r3, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <_ZN5snake12ClassicSnake7PromoteER10Coordinate>:
#include <SnakeLogic.hpp>
using namespace snake;


Coordinate& ClassicSnake::Promote(Coordinate& coord)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	switch (currentDir)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d822      	bhi.n	8005204 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x58>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x18>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051d5 	.word	0x080051d5
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	080051f9 	.word	0x080051f9
	{
	case directions::UP:	coord.Y -= 1; break;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e011      	b.n	8005204 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x58>
	case directions::DOWN:	coord.Y += 1; break;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e00b      	b.n	8005204 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x58>
	case directions::LEFT:	coord.X -= 1; break;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e005      	b.n	8005204 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x58>
	case directions::RIGHT:	coord.X += 1; break;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	bf00      	nop
	}
	return coord;
 8005204:	683b      	ldr	r3, [r7, #0]
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate>:
Coordinate& ClassicSnake::CheckBoundaries(Coordinate& coord)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	if (coord.X == (upLeftField.X - 1)) coord.X = lowRightField.X;		//left
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3b01      	subs	r3, #1
 8005224:	429a      	cmp	r2, r3
 8005226:	d104      	bne.n	8005232 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x22>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e022      	b.n	8005278 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x68>
	else if (coord.X == (lowRightField.X + 1)) coord.X = upLeftField.X;	//right
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	3301      	adds	r3, #1
 800523c:	429a      	cmp	r2, r3
 800523e:	d104      	bne.n	800524a <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x3a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e016      	b.n	8005278 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x68>
	else if (coord.Y == (upLeftField.Y - 1)) coord.Y = lowRightField.Y;	//up
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d104      	bne.n	8005262 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x52>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	e00a      	b.n	8005278 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x68>
	else if (coord.Y == (lowRightField.Y + 1)) coord.Y = upLeftField.Y;	//down
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	429a      	cmp	r2, r3
 800526e:	d103      	bne.n	8005278 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x68>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	return coord;
 8005278:	683b      	ldr	r3, [r7, #0]
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <_ZN5snake9SnakeNodeC1Ev>:
	SnakeNode() = default;
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	f04f 31ff 	mov.w	r1, #4294967295
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff5e 	bl	8005158 <_ZN10CoordinateC1Ell>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EEC1Ev>:
      _List_base() = default;
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fa01 	bl	80056b8 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE10_List_implC1Ev>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EEC1Ev>:
      list() = default;
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ffeb 	bl	80052a6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EEC1Ev>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <_ZN5snake12ClassicSnakeC1E10CoordinateS1_tttt>:

ClassicSnake::ClassicSnake(Coordinate UpLeft_, Coordinate DownRight_, color_t ColorHead_, color_t ColorBody_,
 80052da:	b082      	sub	sp, #8
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b091      	sub	sp, #68	; 0x44
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	1d38      	adds	r0, r7, #4
 80052e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80052ea:	657b      	str	r3, [r7, #84]	; 0x54
		color_t ColorFruit_, color_t ColorBackGround_)
: upLeftField(UpLeft_), lowRightField(DownRight_), colorHead(ColorHead_), colorBody(ColorBody_),
  colorFruit(ColorFruit_), colorBackGround(ColorBackGround_), currentDir(defDirections)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3308      	adds	r3, #8
 80052fe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005306:	e883 0003 	stmia.w	r3, {r0, r1}
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8005310:	821a      	strh	r2, [r3, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8005318:	825a      	strh	r2, [r3, #18]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8005320:	829a      	strh	r2, [r3, #20]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8005328:	82da      	strh	r2, [r3, #22]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	619a      	str	r2, [r3, #24]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	331c      	adds	r3, #28
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ffa5 	bl	8005284 <_ZN5snake9SnakeNodeC1Ev>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3328      	adds	r3, #40	; 0x28
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ffbe 	bl	80052c0 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EEC1Ev>
{
	Coordinate tmpCoord = { ((DownRight_.X - UpLeft_.X) / 2) + UpLeft_.X,((DownRight_.Y - UpLeft_.Y) / 2) + UpLeft_.Y };//center field
 8005344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	0fda      	lsrs	r2, r3, #31
 800534c:	4413      	add	r3, r2
 800534e:	105b      	asrs	r3, r3, #1
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	18d1      	adds	r1, r2, r3
 8005356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	0fda      	lsrs	r2, r3, #31
 800535e:	4413      	add	r3, r2
 8005360:	105b      	asrs	r3, r3, #1
 8005362:	461a      	mov	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	441a      	add	r2, r3
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fef3 	bl	8005158 <_ZN10CoordinateC1Ell>
//___
	mySnake.push_front({ tmpCoord, ColorHead_ });
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005378:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800537c:	f107 001c 	add.w	r0, r7, #28
 8005380:	f107 0214 	add.w	r2, r7, #20
 8005384:	ca06      	ldmia	r2, {r1, r2}
 8005386:	f7ff fef9 	bl	800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>
 800538a:	f107 031c 	add.w	r3, r7, #28
 800538e:	4619      	mov	r1, r3
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f9a1 	bl	80056d8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE10push_frontEOS2_>
	Promote(tmpCoord);
 8005396:	f107 0314 	add.w	r3, r7, #20
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff05 	bl	80051ac <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
	mySnake.push_front({ tmpCoord,  ColorBody_ });
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80053a8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80053ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80053b0:	f107 0214 	add.w	r2, r7, #20
 80053b4:	ca06      	ldmia	r2, {r1, r2}
 80053b6:	f7ff fee1 	bl	800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>
 80053ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053be:	4619      	mov	r1, r3
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 f989 	bl	80056d8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE10push_frontEOS2_>
	Promote(tmpCoord);
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	4619      	mov	r1, r3
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff feed 	bl	80051ac <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
	mySnake.push_front({ tmpCoord, ColorBackGround_ });
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80053d8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80053dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80053e0:	f107 0214 	add.w	r2, r7, #20
 80053e4:	ca06      	ldmia	r2, {r1, r2}
 80053e6:	f7ff fec9 	bl	800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>
 80053ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053ee:	4619      	mov	r1, r3
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 f971 	bl	80056d8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE10push_frontEOS2_>
//___
	GenerateNewFruit().color = ColorFruit_;
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f8fc 	bl	80055f4 <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
 80053fc:	4602      	mov	r2, r0
 80053fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005402:	8113      	strh	r3, [r2, #8]
}
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4618      	mov	r0, r3
 8005408:	3744      	adds	r7, #68	; 0x44
 800540a:	46bd      	mov	sp, r7
 800540c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005410:	b002      	add	sp, #8
 8005412:	4770      	bx	lr

08005414 <_ZN5snake12ClassicSnake4MoveEv>:

ClassicSnake& ClassicSnake::Move()
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b08b      	sub	sp, #44	; 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	auto tail = (*++mySnake.begin()).Coord;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3328      	adds	r3, #40	; 0x28
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f96f 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 8005426:	4603      	mov	r3, r0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f979 	bl	8005726 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEppEv>
 8005434:	4603      	mov	r3, r0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f984 	bl	8005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>
 800543c:	4602      	mov	r2, r0
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005446:	e883 0003 	stmia.w	r3, {r0, r1}
	mySnake.erase(++mySnake.begin());
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3328      	adds	r3, #40	; 0x28
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f955 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 800545a:	4603      	mov	r3, r0
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	f107 031c 	add.w	r3, r7, #28
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f95f 	bl	8005726 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEppEv>
 8005468:	4602      	mov	r2, r0
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f975 	bl	8005760 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1ERKSt14_List_iteratorIS1_E>
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	4620      	mov	r0, r4
 800547a:	f000 f980 	bl	800577e <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
	mySnake.front().Coord = tail;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3328      	adds	r3, #40	; 0x28
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f996 	bl	80057b4 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5frontEv>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005494:	e882 0003 	stmia.w	r2, {r0, r1}
//___
	tail = mySnake.back().Coord;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3328      	adds	r3, #40	; 0x28
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f99c 	bl	80057da <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4backEv>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f107 030c 	add.w	r3, r7, #12
 80054a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054ac:	e883 0003 	stmia.w	r3, {r0, r1}
	Promote(mySnake.back().Coord);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3328      	adds	r3, #40	; 0x28
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f990 	bl	80057da <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4backEv>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fe74 	bl	80051ac <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
	mySnake.emplace(--mySnake.end(), tail, colorBody);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3328      	adds	r3, #40	; 0x28
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f99b 	bl	800580a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>
 80054d4:	4603      	mov	r3, r0
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f9a4 	bl	800582a <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEmmEv>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f107 0320 	add.w	r3, r7, #32
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f938 	bl	8005760 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1ERKSt14_List_iteratorIS1_E>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3312      	adds	r3, #18
 80054f4:	f107 020c 	add.w	r2, r7, #12
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 f9a4 	bl	8005848 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE7emplaceIJR10CoordinateRtEEESt14_List_iteratorIS2_ESt20_List_const_iteratorIS2_EDpOT_>
//___
	CheckBoundaries(mySnake.back().Coord);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3328      	adds	r3, #40	; 0x28
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f968 	bl	80057da <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4backEv>
 800550a:	4603      	mov	r3, r0
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe7e 	bl	8005210 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate>
	return *this;
 8005514:	687b      	ldr	r3, [r7, #4]
}
 8005516:	4618      	mov	r0, r3
 8005518:	372c      	adds	r7, #44	; 0x2c
 800551a:	46bd      	mov	sp, r7
 800551c:	bd90      	pop	{r4, r7, pc}

0800551e <_ZN5snake12ClassicSnake12AddNodeToEndEv>:

ClassicSnake& ClassicSnake::AddNodeToEnd()
{
 800551e:	b590      	push	{r4, r7, lr}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	mySnake.emplace(++mySnake.begin(), Coordinate{ -1, -1 }, colorBody);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3328      	adds	r3, #40	; 0x28
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f8e7 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 8005536:	4603      	mov	r3, r0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	f107 030c 	add.w	r3, r7, #12
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f8f1 	bl	8005726 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEppEv>
 8005544:	4602      	mov	r2, r0
 8005546:	f107 0308 	add.w	r3, r7, #8
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f907 	bl	8005760 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1ERKSt14_List_iteratorIS1_E>
 8005552:	f107 0310 	add.w	r3, r7, #16
 8005556:	f04f 32ff 	mov.w	r2, #4294967295
 800555a:	f04f 31ff 	mov.w	r1, #4294967295
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fdfa 	bl	8005158 <_ZN10CoordinateC1Ell>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3312      	adds	r3, #18
 8005568:	f107 0210 	add.w	r2, r7, #16
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4620      	mov	r0, r4
 8005570:	f000 f99a 	bl	80058a8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE7emplaceIJ10CoordinateRtEEESt14_List_iteratorIS2_ESt20_List_const_iteratorIS2_EDpOT_>
	return *this;
 8005574:	687b      	ldr	r3, [r7, #4]
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>:

ClassicSnake& ClassicSnake::NewDirection(directions newDir)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
	currentDir = newDir;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	619a      	str	r2, [r3, #24]
	return *this;
 800558e:	687b      	ldr	r3, [r7, #4]
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>:

bool ClassicSnake::CheckSnakeCollision(const SnakeNode& myNode) const
{
 800559a:	b590      	push	{r4, r7, lr}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
	return !std::none_of(++mySnake.begin(), --mySnake.end(), [&myNode](auto& rhs)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3328      	adds	r3, #40	; 0x28
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f9ad 	bl	8005908 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 80055ae:	4603      	mov	r3, r0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f9b7 	bl	800592a <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEppEv>
 80055bc:	4604      	mov	r4, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3328      	adds	r3, #40	; 0x28
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f9c0 	bl	8005948 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>
 80055c8:	4603      	mov	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f9c9 	bl	8005968 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEmmEv>
 80055d6:	4603      	mov	r3, r0
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	f000 f9d2 	bl	8005986 <_ZSt7none_ofISt20_List_const_iteratorIN5snake9SnakeNodeEEZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EbS7_S7_T0_>
 80055e2:	4603      	mov	r3, r0
			{return (rhs.Coord.X == myNode.Coord.X) && (rhs.Coord.Y == myNode.Coord.Y); });
 80055e4:	f083 0301 	eor.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}
	...

080055f4 <_ZN5snake12ClassicSnake16GenerateNewFruitEv>:

SnakeNode& ClassicSnake::GenerateNewFruit()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	static std::size_t counter = 0;
	fruitCoordinate.Coord.X = ((HAL_GetTick() +  ++counter) % lowRightField.X) + upLeftField.X;
 80055fc:	f7fb fd7c 	bl	80010f8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4917      	ldr	r1, [pc, #92]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 800560a:	600b      	str	r3, [r1, #0]
 800560c:	4b16      	ldr	r3, [pc, #88]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	fbb3 f1f2 	udiv	r1, r3, r2
 800561a:	fb01 f202 	mul.w	r2, r1, r2
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	4413      	add	r3, r2
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	61da      	str	r2, [r3, #28]
	fruitCoordinate.Coord.Y = ((HAL_GetTick() +  ++counter) % lowRightField.Y) + upLeftField.Y;
 800562c:	f7fb fd64 	bl	80010f8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	490b      	ldr	r1, [pc, #44]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <_ZN5snake12ClassicSnake16GenerateNewFruitEv+0x74>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4413      	add	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	fbb3 f1f2 	udiv	r1, r3, r2
 800564a:	fb01 f202 	mul.w	r2, r1, r2
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6852      	ldr	r2, [r2, #4]
 8005654:	4413      	add	r3, r2
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	621a      	str	r2, [r3, #32]
	return fruitCoordinate;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	331c      	adds	r3, #28
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200001b4 	.word	0x200001b4

0800566c <_ZN5snake12ClassicSnake10CheckFruitEv>:
bool ClassicSnake::CheckFruit()
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	const SnakeNode& head = *mySnake.rbegin();
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f99a 	bl	80059ba <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE6rbeginEv>
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f9a6 	bl	80059dc <_ZNKSt16reverse_iteratorISt14_List_iteratorIN5snake9SnakeNodeEEEdeEv>
 8005690:	60f8      	str	r0, [r7, #12]
	if ((head.Coord.X == fruitCoordinate.Coord.X) && (head.Coord.Y == fruitCoordinate.Coord.Y))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d107      	bne.n	80056ae <_ZN5snake12ClassicSnake10CheckFruitEv+0x42>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d101      	bne.n	80056ae <_ZN5snake12ClassicSnake10CheckFruitEv+0x42>
		return true;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <_ZN5snake12ClassicSnake10CheckFruitEv+0x44>
	else return false;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9ac 	bl	8005a1e <_ZNSaISt10_List_nodeIN5snake9SnakeNodeEEEC1Ev>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe fe64 	bl	8004396 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE10push_frontEOS2_>:
      push_front(value_type&& __x)
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), std::move(__x)); }
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f80e 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 80056e8:	4604      	mov	r4, r0
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f000 f9a3 	bl	8005a36 <_ZSt4moveIRN5snake9SnakeNodeEEONSt16remove_referenceIT_E4typeEOS4_>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	4621      	mov	r1, r4
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9a7 	bl	8005a4a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE9_M_insertIJS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bd90      	pop	{r4, r7, pc}

08005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f9b5 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
	return *this;
 8005738:	687b      	ldr	r3, [r7, #4]
      }
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f9a6 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8005756:	4603      	mov	r3, r0
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f977 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 8005798:	463b      	mov	r3, r7
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f9b5 	bl	8005b0a <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEE13_M_const_castEv>
 80057a0:	4603      	mov	r3, r0
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f98a 	bl	8005abe <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 80057aa:	68fb      	ldr	r3, [r7, #12]
    }
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ffa1 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 80057c2:	4603      	mov	r3, r0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ffba 	bl	8005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f811 	bl	800580a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	60fb      	str	r3, [r7, #12]
	--__tmp;
 80057ec:	f107 030c 	add.w	r3, r7, #12
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f81a 	bl	800582a <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEmmEv>
	return *__tmp;
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ffa2 	bl	8005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>
 8005800:	4603      	mov	r3, r0
      }
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f933 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	601a      	str	r2, [r3, #0]
	return *this;
 800583c:	687b      	ldr	r3, [r7, #4]
      }
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE7emplaceIJR10CoordinateRtEEESt14_List_iteratorIS2_ESt20_List_const_iteratorIS2_EDpOT_>:
      list<_Tp, _Alloc>::
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f968 	bl	8005b2c <_ZSt7forwardIR10CoordinateEOT_RNSt16remove_referenceIS2_E4typeE>
 800585c:	4604      	mov	r4, r0
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f000 f96e 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	4621      	mov	r1, r4
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f972 	bl	8005b54 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJR10CoordinateRtEEEPSt10_List_nodeIS2_EDpOT_>
 8005870:	6178      	str	r0, [r7, #20]
	__tmp->_M_hook(__position._M_const_cast()._M_node);
 8005872:	697c      	ldr	r4, [r7, #20]
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f946 	bl	8005b0a <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEE13_M_const_castEv>
 800587e:	4603      	mov	r3, r0
 8005880:	4619      	mov	r1, r3
 8005882:	4620      	mov	r0, r4
 8005884:	f006 fc4e 	bl	800c124 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	this->_M_inc_size(1);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2101      	movs	r1, #1
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f99a 	bl	8005bc6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_inc_sizeEj>
	return iterator(__tmp);
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f8f4 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
 800589e:	693b      	ldr	r3, [r7, #16]
      }
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}

080058a8 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE7emplaceIJ10CoordinateRtEEESt14_List_iteratorIS2_ESt20_List_const_iteratorIS2_EDpOT_>:
      list<_Tp, _Alloc>::
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
	_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f995 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 80058bc:	4604      	mov	r4, r0
 80058be:	6838      	ldr	r0, [r7, #0]
 80058c0:	f000 f93e 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f995 	bl	8005bfa <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJ10CoordinateRtEEEPSt10_List_nodeIS2_EDpOT_>
 80058d0:	6178      	str	r0, [r7, #20]
	__tmp->_M_hook(__position._M_const_cast()._M_node);
 80058d2:	697c      	ldr	r4, [r7, #20]
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 f916 	bl	8005b0a <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEE13_M_const_castEv>
 80058de:	4603      	mov	r3, r0
 80058e0:	4619      	mov	r1, r3
 80058e2:	4620      	mov	r0, r4
 80058e4:	f006 fc1e 	bl	800c124 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	this->_M_inc_size(1);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2101      	movs	r1, #1
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f96a 	bl	8005bc6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_inc_sizeEj>
	return iterator(__tmp);
 80058f2:	f107 0310 	add.w	r3, r7, #16
 80058f6:	6979      	ldr	r1, [r7, #20]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f8c4 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
 80058fe:	693b      	ldr	r3, [r7, #16]
      }
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd90      	pop	{r4, r7, pc}

08005908 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_node._M_next); }
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	f107 030c 	add.w	r3, r7, #12
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f9a6 	bl	8005c6c <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1EPKNSt8__detail15_List_node_baseE>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
	return *this;
 800593c:	687b      	ldr	r3, [r7, #4]
      }
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_node); }
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	f107 030c 	add.w	r3, r7, #12
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f987 	bl	8005c6c <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1EPKNSt8__detail15_List_node_baseE>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
	return *this;
 800597a:	687b      	ldr	r3, [r7, #4]
      }
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <_ZSt7none_ofISt20_List_const_iteratorIN5snake9SnakeNodeEEZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EbS7_S7_T0_>:
   *  @p [__first,__last), and false otherwise.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
    { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f976 	bl	8005c88 <_ZSt7find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_ES7_S7_S7_T0_>
 800599c:	4603      	mov	r3, r0
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	f107 0214 	add.w	r2, r7, #20
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f980 	bl	8005cb0 <_ZSteqRKSt20_List_const_iteratorIN5snake9SnakeNodeEES4_>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE6rbeginEv>:
      rbegin() _GLIBCXX_NOEXCEPT
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
      { return reverse_iterator(end()); }
 80059c4:	6838      	ldr	r0, [r7, #0]
 80059c6:	f7ff ff20 	bl	800580a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>
 80059ca:	4603      	mov	r3, r0
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f981 	bl	8005cd6 <_ZNSt16reverse_iteratorISt14_List_iteratorIN5snake9SnakeNodeEEEC1ES3_>
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNKSt16reverse_iteratorISt14_List_iteratorIN5snake9SnakeNodeEEEdeEv>:
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */
      _GLIBCXX17_CONSTEXPR reference
      operator*() const
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
      {
	_Iterator __tmp = current;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff ff1b 	bl	800582a <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEmmEv>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fea4 	bl	8005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>
 80059fc:	4603      	mov	r3, r0
      }
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f96f 	bl	8005cf2 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE13_M_node_countEv>
 8005a14:	4603      	mov	r3, r0
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <_ZNSaISt10_List_nodeIN5snake9SnakeNodeEEEC1Ev>:
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f970 	bl	8005d0c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEEC1Ev>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_ZSt4moveIRN5snake9SnakeNodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE9_M_insertIJS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f988 	bl	8005d6c <_ZSt7forwardIN5snake9SnakeNodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f98d 	bl	8005d80 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8005a66:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f006 fb58 	bl	800c124 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2101      	movs	r1, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f8a4 	bl	8005bc6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_inc_sizeEj>
       }
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3308      	adds	r3, #8
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f99a 	bl	8005de8 <_ZN9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE6_M_ptrEv>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8005abe:	b590      	push	{r4, r7, lr}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2101      	movs	r1, #1
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f997 	bl	8005e00 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f006 fb2c 	bl	800c132 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f91d 	bl	8005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ffda 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8005aee:	4603      	mov	r3, r0
 8005af0:	4619      	mov	r1, r3
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f91e 	bl	8005d34 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f926 	bl	8005d4e <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd90      	pop	{r4, r7, pc}

08005b0a <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	f107 030c 	add.w	r3, r7, #12
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ffb2 	bl	8005a86 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEC1EPNSt8__detail15_List_node_baseE>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_ZSt7forwardIR10CoordinateEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJR10CoordinateRtEEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005b54:	b5b0      	push	{r4, r5, r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
	  auto __p = this->_M_get_node();
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f95c 	bl	8005e20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_nodeEv>
 8005b68:	61f8      	str	r0, [r7, #28]
	  auto& __alloc = _M_get_Node_allocator();
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f8d7 	bl	8005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>
 8005b72:	61b8      	str	r0, [r7, #24]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005b74:	f107 0310 	add.w	r3, r7, #16
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	69b9      	ldr	r1, [r7, #24]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f95d 	bl	8005e3c <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8005b82:	69f8      	ldr	r0, [r7, #28]
 8005b84:	f7ff ff8d 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	68b8      	ldr	r0, [r7, #8]
 8005b8c:	f7ff ffce 	bl	8005b2c <_ZSt7forwardIR10CoordinateEOT_RNSt16remove_referenceIS2_E4typeE>
 8005b90:	4605      	mov	r5, r0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ffd4 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	69b8      	ldr	r0, [r7, #24]
 8005ba0:	f000 f975 	bl	8005e8e <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_JR10CoordinateRtEEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8005ba4:	f107 0310 	add.w	r3, r7, #16
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f987 	bl	8005ebe <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEaSEDn>
	  return __p;
 8005bb0:	69fc      	ldr	r4, [r7, #28]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005bb2:	f107 0310 	add.w	r3, r7, #16
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f954 	bl	8005e64 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEED1Ev>
	  return __p;
 8005bbc:	4623      	mov	r3, r4
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}

08005bc6 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJ10CoordinateRtEEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005bfa:	b5b0      	push	{r4, r5, r7, lr}
 8005bfc:	b088      	sub	sp, #32
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
	  auto __p = this->_M_get_node();
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f909 	bl	8005e20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_nodeEv>
 8005c0e:	61f8      	str	r0, [r7, #28]
	  auto& __alloc = _M_get_Node_allocator();
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f884 	bl	8005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>
 8005c18:	61b8      	str	r0, [r7, #24]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f90a 	bl	8005e3c <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8005c28:	69f8      	ldr	r0, [r7, #28]
 8005c2a:	f7ff ff3a 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	68b8      	ldr	r0, [r7, #8]
 8005c32:	f7ff ffd8 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8005c36:	4605      	mov	r5, r0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff81 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	462a      	mov	r2, r5
 8005c42:	4621      	mov	r1, r4
 8005c44:	69b8      	ldr	r0, [r7, #24]
 8005c46:	f000 f948 	bl	8005eda <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_J10CoordinateRtEEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8005c4a:	f107 0310 	add.w	r3, r7, #16
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f934 	bl	8005ebe <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEaSEDn>
	  return __p;
 8005c56:	69fc      	ldr	r4, [r7, #28]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005c58:	f107 0310 	add.w	r3, r7, #16
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f901 	bl	8005e64 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEED1Ev>
	  return __p;
 8005c62:	4623      	mov	r3, r4
	}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bdb0      	pop	{r4, r5, r7, pc}

08005c6c <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEC1EPKNSt8__detail15_List_node_baseE>:
      _List_const_iterator(const __detail::_List_node_base* __x)
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <_ZSt7find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_ES7_S7_S7_T0_>:
   *  such that @p __pred(*i) is true, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	      typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__find_if(__first, __last,
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f938 	bl	8005f0a <_ZN9__gnu_cxx5__ops11__pred_iterIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EENS0_10_Iter_predIS7_EES7_>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f946 	bl	8005f32 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_>
 8005ca6:	4603      	mov	r3, r0
			    __gnu_cxx::__ops::__pred_iter(__pred));
    }
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZSteqRKSt20_List_const_iteratorIN5snake9SnakeNodeEES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <_ZNSt16reverse_iteratorISt14_List_iteratorIN5snake9SnakeNodeEEEC1ES3_>:
      reverse_iterator(iterator_type __x) : current(__x) { }
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr

08005cf2 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f92e 	bl	8005f5e <_ZNKSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_sizeEv>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f917 	bl	8005f74 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE7destroyIS3_EEvPT_>
	}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f912 	bl	8005f88 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE10deallocateERS4_PS3_j>
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <_ZSt7forwardIN5snake9SnakeNodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE14_M_create_nodeIJS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f847 	bl	8005e20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_nodeEv>
 8005d92:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ffc2 	bl	8005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>
 8005d9c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	6939      	ldr	r1, [r7, #16]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f848 	bl	8005e3c <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8005dac:	6978      	ldr	r0, [r7, #20]
 8005dae:	f7ff fe78 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8005db2:	4604      	mov	r4, r0
 8005db4:	6838      	ldr	r0, [r7, #0]
 8005db6:	f7ff ffd9 	bl	8005d6c <_ZSt7forwardIN5snake9SnakeNodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	6938      	ldr	r0, [r7, #16]
 8005dc2:	f000 f8f0 	bl	8005fa6 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8005dc6:	f107 0308 	add.w	r3, r7, #8
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f876 	bl	8005ebe <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEaSEDn>
	  return __p;
 8005dd2:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f843 	bl	8005e64 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEED1Ev>
	  return __p;
 8005dde:	4623      	mov	r3, r4
	}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd90      	pop	{r4, r7, pc}

08005de8 <_ZN9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f8eb 	bl	8005fcc <_ZN9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE7_M_addrEv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	1ad2      	subs	r2, r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f8d7 	bl	8005fe0 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE8allocateERS4_j>
 8005e32:	4603      	mov	r3, r0
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEC1ERS4_PS3_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005e48:	68b8      	ldr	r0, [r7, #8]
 8005e4a:	f000 f8d8 	bl	8005ffe <_ZSt11__addressofISaISt10_List_nodeIN5snake9SnakeNodeEEEEPT_RS5_>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]
      { }
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEED1Ev>:
      ~__allocated_ptr()
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f000 f882 	bl	8005f88 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE10deallocateERS4_PS3_j>
      }
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_JR10CoordinateRtEEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005e8e:	b590      	push	{r4, r7, lr}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fe45 	bl	8005b2c <_ZSt7forwardIR10CoordinateEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	6838      	ldr	r0, [r7, #0]
 8005ea6:	f7ff fe4b 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4622      	mov	r2, r4
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f8ae 	bl	8006012 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_JR10CoordinateRtEEEvPT_DpOT0_>
	}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd90      	pop	{r4, r7, pc}

08005ebe <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5snake9SnakeNodeEEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
	return *this;
 8005ece:	687b      	ldr	r3, [r7, #4]
      }
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_J10CoordinateRtEEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005eda:	b590      	push	{r4, r7, lr}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe7c 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	6838      	ldr	r0, [r7, #0]
 8005ef2:	f7ff fe25 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4622      	mov	r2, r4
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f8ad 	bl	800605c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_J10CoordinateRtEEEvPT_DpOT0_>
	}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd90      	pop	{r4, r7, pc}

08005f0a <_ZN9__gnu_cxx5__ops11__pred_iterIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EENS0_10_Iter_predIS7_EES7_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f8c6 	bl	80060a6 <_ZSt4moveIRZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS0_9SnakeNodeEEUlRT_E_EONSt16remove_referenceIS5_E4typeEOS5_>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f8c9 	bl	80060ba <_ZN9__gnu_cxx5__ops10_Iter_predIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EC1ES9_>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8005f32:	b590      	push	{r4, r7, lr}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f8cb 	bl	80060de <_ZSt19__iterator_categoryISt20_List_const_iteratorIN5snake9SnakeNodeEEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return __find_if(__first, __last, __pred,
 8005f48:	4623      	mov	r3, r4
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f8cf 	bl	80060f2 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag>
 8005f54:	4603      	mov	r3, r0
    }
 8005f56:	4618      	mov	r0, r3
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}

08005f5e <_ZNKSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f8d7 	bl	800614c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE10deallocateEPS4_j>
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff feda 	bl	8005d6c <_ZSt7forwardIN5snake9SnakeNodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8d7 	bl	8006172 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_JS3_EEEvPT_DpOT0_>
	}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZN9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE7_M_addrEv>:
      _M_addr() noexcept
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005fea:	2200      	movs	r2, #0
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8d7 	bl	80061a2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE8allocateEjPKv>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_ZSt11__addressofISaISt10_List_nodeIN5snake9SnakeNodeEEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_JR10CoordinateRtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006012:	b590      	push	{r4, r7, lr}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fd83 	bl	8005b2c <_ZSt7forwardIR10CoordinateEOT_RNSt16remove_referenceIS2_E4typeE>
 8006026:	4602      	mov	r2, r0
 8006028:	f107 0310 	add.w	r3, r7, #16
 800602c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006030:	e883 0003 	stmia.w	r3, {r0, r1}
 8006034:	6838      	ldr	r0, [r7, #0]
 8006036:	f7ff fd83 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800603a:	4603      	mov	r3, r0
 800603c:	881c      	ldrh	r4, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4619      	mov	r1, r3
 8006042:	200c      	movs	r0, #12
 8006044:	f7fe f99c 	bl	8004380 <_ZnwjPv>
 8006048:	4623      	mov	r3, r4
 800604a:	f107 0210 	add.w	r2, r7, #16
 800604e:	ca06      	ldmia	r2, {r1, r2}
 8006050:	f7ff f894 	bl	800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bd90      	pop	{r4, r7, pc}

0800605c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_J10CoordinateRtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fdbb 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8006070:	4602      	mov	r2, r0
 8006072:	f107 0310 	add.w	r3, r7, #16
 8006076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800607a:	e883 0003 	stmia.w	r3, {r0, r1}
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	f7ff fd5e 	bl	8005b40 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8006084:	4603      	mov	r3, r0
 8006086:	881c      	ldrh	r4, [r3, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4619      	mov	r1, r3
 800608c:	200c      	movs	r0, #12
 800608e:	f7fe f977 	bl	8004380 <_ZnwjPv>
 8006092:	4623      	mov	r3, r4
 8006094:	f107 0210 	add.w	r2, r7, #16
 8006098:	ca06      	ldmia	r2, {r1, r2}
 800609a:	f7ff f86f 	bl	800517c <_ZN5snake9SnakeNodeC1E10Coordinatet>
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}

080060a6 <_ZSt4moveIRZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS0_9SnakeNodeEEUlRT_E_EONSt16remove_referenceIS5_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <_ZN9__gnu_cxx5__ops10_Iter_predIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EC1ES9_>:
      _Iter_pred(_Predicate __pred)
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80060c4:	463b      	mov	r3, r7
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ffed 	bl	80060a6 <_ZSt4moveIRZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS0_9SnakeNodeEEUlRT_E_EONSt16remove_referenceIS5_E4typeEOS5_>
 80060cc:	4602      	mov	r2, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	601a      	str	r2, [r3, #0]
      { }
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <_ZSt19__iterator_categoryISt20_List_const_iteratorIN5snake9SnakeNodeEEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80060e6:	bf00      	nop
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag>:
    __find_if(_InputIterator __first, _InputIterator __last,
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	703b      	strb	r3, [r7, #0]
      while (__first != __last && !__pred(__first))
 8006100:	f107 0208 	add.w	r2, r7, #8
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	4611      	mov	r1, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f86a 	bl	80061e4 <_ZStneRKSt20_List_const_iteratorIN5snake9SnakeNodeEES4_>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00c      	beq.n	8006130 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag+0x3e>
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f890 	bl	8006240 <_ZN9__gnu_cxx5__ops10_Iter_predIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EclISt20_List_const_iteratorIS4_EEEbS7_>
 8006120:	4603      	mov	r3, r0
 8006122:	f083 0301 	eor.w	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag+0x3e>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag+0x40>
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag+0x50>
	++__first;
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fbf5 	bl	800592a <_ZNSt20_List_const_iteratorIN5snake9SnakeNodeEEppEv>
      while (__first != __last && !__pred(__first))
 8006140:	e7de      	b.n	8006100 <_ZSt9__find_ifISt20_List_const_iteratorIN5snake9SnakeNodeEEN9__gnu_cxx5__ops10_Iter_predIZNKS1_12ClassicSnake19CheckSnakeCollisionERKS2_EUlRT_E_EEESA_SA_SA_T0_St18input_iterator_tag+0xe>
      return __first;
 8006142:	68fb      	ldr	r3, [r7, #12]
    }
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4619      	mov	r1, r3
 8006164:	68b8      	ldr	r0, [r7, #8]
 8006166:	f005 ffca 	bl	800c0fe <_ZdlPvj>
      }
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE9constructIS3_JS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006172:	b590      	push	{r4, r7, lr}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fdf4 	bl	8005d6c <_ZSt7forwardIN5snake9SnakeNodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006184:	4604      	mov	r4, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4619      	mov	r1, r3
 800618a:	200c      	movs	r0, #12
 800618c:	f7fe f8f8 	bl	8004380 <_ZnwjPv>
 8006190:	4603      	mov	r3, r0
 8006192:	4622      	mov	r2, r4
 8006194:	ca07      	ldmia	r2, {r0, r1, r2}
 8006196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}

080061a2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f85a 	bl	8006268 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE11_M_max_sizeEv>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bf8c      	ite	hi
 80061bc:	2301      	movhi	r3, #1
 80061be:	2300      	movls	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80061c6:	f005 ffb9 	bl	800c13c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f005 ff94 	bl	800c102 <_Znwj>
 80061da:	4603      	mov	r3, r0
      }
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <_ZStneRKSt20_List_const_iteratorIN5snake9SnakeNodeEES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <_ZZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeEENKUlRT_E_clIS2_EEDaS5_>:
	return !std::none_of(++mySnake.begin(), --mySnake.end(), [&myNode](auto& rhs)
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
			{return (rhs.Coord.X == myNode.Coord.X) && (rhs.Coord.Y == myNode.Coord.Y); });
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
	return !std::none_of(++mySnake.begin(), --mySnake.end(), [&myNode](auto& rhs)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
			{return (rhs.Coord.X == myNode.Coord.X) && (rhs.Coord.Y == myNode.Coord.Y); });
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d108      	bne.n	8006234 <_ZZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeEENKUlRT_E_clIS2_EEDaS5_+0x2a>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
	return !std::none_of(++mySnake.begin(), --mySnake.end(), [&myNode](auto& rhs)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
			{return (rhs.Coord.X == myNode.Coord.X) && (rhs.Coord.Y == myNode.Coord.Y); });
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d101      	bne.n	8006234 <_ZZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeEENKUlRT_E_clIS2_EEDaS5_+0x2a>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <_ZZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeEENKUlRT_E_clIS2_EEDaS5_+0x2c>
 8006234:	2300      	movs	r3, #0
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <_ZN9__gnu_cxx5__ops10_Iter_predIZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS2_9SnakeNodeEEUlRT_E_EclISt20_List_const_iteratorIS4_EEEbS7_>:
	operator()(_Iterator __it)
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 800624a:	687c      	ldr	r4, [r7, #4]
 800624c:	463b      	mov	r3, r7
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f816 	bl	8006280 <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEEdeEv>
 8006254:	4603      	mov	r3, r0
 8006256:	4619      	mov	r1, r3
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff ffd6 	bl	800620a <_ZZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeEENKUlRT_E_clIS2_EEDaS5_>
 800625e:	4603      	mov	r3, r0
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bd90      	pop	{r4, r7, pc}

08006268 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEE11_M_max_sizeEv+0x14>)
      }
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	06666666 	.word	0x06666666

08006280 <_ZNKSt20_List_const_iteratorIN5snake9SnakeNodeEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f805 	bl	800629c <_ZNKSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 8006292:	4603      	mov	r3, r0
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZNKSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>:
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3308      	adds	r3, #8
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f805 	bl	80062b8 <_ZNK9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE6_M_ptrEv>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <_ZNK9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f805 	bl	80062d0 <_ZNK9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE7_M_addrEv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZNK9__gnu_cxx16__aligned_membufIN5snake9SnakeNodeEE7_M_addrEv>:
      _M_addr() const noexcept
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <_ZN5snake16printSnakeSquareERNS_9SnakeNodeE>:
extern but::ButtonWrapper* but3;
extern but::ButtonWrapper* but4;


void snake::printSnakeSquare(SnakeNode& sn)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
	tft_fillRoundRect(sn.Coord.X * SIZE_SIDE_SQUARE, sn.Coord.Y *
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	0112      	lsls	r2, r2, #4
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	b218      	sxth	r0, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	b29b      	uxth	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	0112      	lsls	r2, r2, #4
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	b29b      	uxth	r3, r3
 800630a:	b219      	sxth	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	891b      	ldrh	r3, [r3, #8]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2302      	movs	r3, #2
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	230f      	movs	r3, #15
 8006318:	220f      	movs	r2, #15
 800631a:	f7fc fc8a 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
			SIZE_SIDE_SQUARE, SIZE_SIDE_SQUARE, SIZE_SIDE_SQUARE, RADIUS_ROUNDING, sn.color);
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EED1Ev>:
      ~list() = default;
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 f969 	bl	8006608 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EED1Ev>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <_ZN5snake12ClassicSnakeD1Ev>:
};


class ClassicSnake
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3328      	adds	r3, #40	; 0x28
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff ffea 	bl	8006326 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EED1Ev>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZN5snake9SnakeTaskEv>:

void snake::SnakeTask()
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b09d      	sub	sp, #116	; 0x74
 8006360:	af06      	add	r7, sp, #24
	ClassicSnake SnakeObj(Coordinate{0, 0}, Coordinate{20, 15},
			ILI9341_BLACK, ILI9341_GREEN, ILI9341_DARKRED, ILI9341_BLUE);
 8006362:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fef4 	bl	8005158 <_ZN10CoordinateC1Ell>
 8006370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006374:	220f      	movs	r2, #15
 8006376:	2114      	movs	r1, #20
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe feed 	bl	8005158 <_ZN10CoordinateC1Ell>
 800637e:	1d38      	adds	r0, r7, #4
 8006380:	231f      	movs	r3, #31
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800638e:	9302      	str	r3, [sp, #8]
 8006390:	2300      	movs	r3, #0
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800639e:	ca06      	ldmia	r2, {r1, r2}
 80063a0:	f7fe ff9b 	bl	80052da <_ZN5snake12ClassicSnakeC1E10CoordinateS1_tttt>
	uint32_t time = HAL_GetTick();
 80063a4:	f7fa fea8 	bl	80010f8 <HAL_GetTick>
 80063a8:	6578      	str	r0, [r7, #84]	; 0x54
	directions tmpDir;
	uint32_t currentDelay = INIT_SPEED_GAME;
 80063aa:	23c8      	movs	r3, #200	; 0xc8
 80063ac:	653b      	str	r3, [r7, #80]	; 0x50

	tft_fillScreen(ILI9341_BLUE);
 80063ae:	201f      	movs	r0, #31
 80063b0:	f7fc fb74 	bl	8002a9c <_Z14tft_fillScreent>
	printSnakeSquare(SnakeObj.fruitCoordinate);
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	331c      	adds	r3, #28
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff93 	bl	80062e4 <_ZN5snake16printSnakeSquareERNS_9SnakeNodeE>

	while(!SnakeObj.CheckSnakeCollision(*SnakeObj.mySnake.rbegin()))
 80063be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	3328      	adds	r3, #40	; 0x28
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7ff faf6 	bl	80059ba <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE6rbeginEv>
 80063ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fb02 	bl	80059dc <_ZNKSt16reverse_iteratorISt14_List_iteratorIN5snake9SnakeNodeEEEdeEv>
 80063d8:	4602      	mov	r2, r0
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff f8db 	bl	800559a <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f083 0301 	eor.w	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d053      	beq.n	8006498 <_ZN5snake9SnakeTaskEv+0x13c>
	{
		SnakeObj.Move();
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff f80e 	bl	8005414 <_ZN5snake12ClassicSnake4MoveEv>
		if(SnakeObj.CheckFruit())
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f936 	bl	800566c <_ZN5snake12ClassicSnake10CheckFruitEv>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01c      	beq.n	8006440 <_ZN5snake9SnakeTaskEv+0xe4>
		{
			SnakeObj.GenerateNewFruit();
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff f8f3 	bl	80055f4 <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
			SnakeObj.AddNodeToEnd();
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f884 	bl	800551e <_ZN5snake12ClassicSnake12AddNodeToEndEv>
			while(SnakeObj.CheckSnakeCollision(SnakeObj.fruitCoordinate))
 8006416:	1d3b      	adds	r3, r7, #4
 8006418:	f103 021c 	add.w	r2, r3, #28
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff f8ba 	bl	800559a <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <_ZN5snake9SnakeTaskEv+0xda>
				SnakeObj.GenerateNewFruit();
 800642c:	1d3b      	adds	r3, r7, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f8e0 	bl	80055f4 <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
			while(SnakeObj.CheckSnakeCollision(SnakeObj.fruitCoordinate))
 8006434:	e7ef      	b.n	8006416 <_ZN5snake9SnakeTaskEv+0xba>
			printSnakeSquare(SnakeObj.fruitCoordinate);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	331c      	adds	r3, #28
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff52 	bl	80062e4 <_ZN5snake16printSnakeSquareERNS_9SnakeNodeE>
			//if(!((SnakeObj.mySnake.size() - 1) % 3) && (currentDelay != FINAL_SPEED_GAME))
				//currentDelay -= 25;
		}
		std::for_each(SnakeObj.mySnake.begin(), SnakeObj.mySnake.end(), printSnakeSquare);
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	3328      	adds	r3, #40	; 0x28
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff f95d 	bl	8005704 <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE5beginEv>
 800644a:	4604      	mov	r4, r0
 800644c:	1d3b      	adds	r3, r7, #4
 800644e:	3328      	adds	r3, #40	; 0x28
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff f9da 	bl	800580a <_ZNSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE3endEv>
 8006456:	4603      	mov	r3, r0
 8006458:	4a34      	ldr	r2, [pc, #208]	; (800652c <_ZN5snake9SnakeTaskEv+0x1d0>)
 800645a:	4619      	mov	r1, r3
 800645c:	4620      	mov	r0, r4
 800645e:	f000 f8e3 	bl	8006628 <_ZSt8for_eachISt14_List_iteratorIN5snake9SnakeNodeEEPFvRS2_EET0_T_S8_S7_>
		tmpDir = SnakeObj.currentDir;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	64fb      	str	r3, [r7, #76]	; 0x4c
		while(computeTimeDuration(time) < currentDelay)
 8006466:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006468:	f7fe fe24 	bl	80050b4 <_Z19computeTimeDurationm>
 800646c:	4602      	mov	r2, r0
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	4293      	cmp	r3, r2
 8006472:	bf8c      	ite	hi
 8006474:	2301      	movhi	r3, #1
 8006476:	2300      	movls	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <_ZN5snake9SnakeTaskEv+0x134>
		{
			if(tmpDir == SnakeObj.currentDir)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006482:	429a      	cmp	r2, r3
 8006484:	d1ef      	bne.n	8006466 <_ZN5snake9SnakeTaskEv+0x10a>
				SnakeButtonHandler(SnakeObj);
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f859 	bl	8006540 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE>
		while(computeTimeDuration(time) < currentDelay)
 800648e:	e7ea      	b.n	8006466 <_ZN5snake9SnakeTaskEv+0x10a>
		}
		time = HAL_GetTick();
 8006490:	f7fa fe32 	bl	80010f8 <HAL_GetTick>
 8006494:	6578      	str	r0, [r7, #84]	; 0x54
	while(!SnakeObj.CheckSnakeCollision(*SnakeObj.mySnake.rbegin()))
 8006496:	e792      	b.n	80063be <_ZN5snake9SnakeTaskEv+0x62>
	}
	tft_setTextColor(ILI9341_DARKRED);
 8006498:	f44f 4008 	mov.w	r0, #34816	; 0x8800
 800649c:	f7fc ff3e 	bl	800331c <_Z16tft_setTextColort>
	tft_setTextSize(6);
 80064a0:	2006      	movs	r0, #6
 80064a2:	f7fc ff27 	bl	80032f4 <_Z15tft_setTextSizeh>
	tft_setCursor(0, 0);
 80064a6:	2100      	movs	r1, #0
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7fc ff0b 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print(int(SnakeObj.mySnake.size() - 1));
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	3328      	adds	r3, #40	; 0x28
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff faa7 	bl	8005a06 <_ZNKSt7__cxx114listIN5snake9SnakeNodeESaIS2_EE4sizeEv>
 80064b8:	4603      	mov	r3, r0
 80064ba:	3b01      	subs	r3, #1
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd f803 	bl	80034c8 <_Z9tft_printi>
	tft_fillRoundRect(0, 200, 150, 40, 0, ILI9341_DARKRED);
 80064c2:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2328      	movs	r3, #40	; 0x28
 80064ce:	2296      	movs	r2, #150	; 0x96
 80064d0:	21c8      	movs	r1, #200	; 0xc8
 80064d2:	2000      	movs	r0, #0
 80064d4:	f7fc fbad 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_setTextColor(ILI9341_BLUE);
 80064d8:	201f      	movs	r0, #31
 80064da:	f7fc ff1f 	bl	800331c <_Z16tft_setTextColort>
	tft_setTextSize(2);
 80064de:	2002      	movs	r0, #2
 80064e0:	f7fc ff08 	bl	80032f4 <_Z15tft_setTextSizeh>
	tft_setCursor(0, 204);
 80064e4:	21cc      	movs	r1, #204	; 0xcc
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7fc feec 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("HOLD 1 MENU");
 80064ec:	4810      	ldr	r0, [pc, #64]	; (8006530 <_ZN5snake9SnakeTaskEv+0x1d4>)
 80064ee:	f7fc ffcf 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(0, 224);
 80064f2:	21e0      	movs	r1, #224	; 0xe0
 80064f4:	2000      	movs	r0, #0
 80064f6:	f7fc fee5 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("HOLD 2 REST");
 80064fa:	480e      	ldr	r0, [pc, #56]	; (8006534 <_ZN5snake9SnakeTaskEv+0x1d8>)
 80064fc:	f7fc ffc8 	bl	8003490 <_Z9tft_printPKc>
	while(true)
	{
		if(but1->LogicState_ == LogicState::WAS_HOLDED)
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <_ZN5snake9SnakeTaskEv+0x1dc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	2b02      	cmp	r3, #2
 8006508:	d104      	bne.n	8006514 <_ZN5snake9SnakeTaskEv+0x1b8>
			ILI9341_BLACK, ILI9341_GREEN, ILI9341_DARKRED, ILI9341_BLUE);
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff17 	bl	8006340 <_ZN5snake12ClassicSnakeD1Ev>
			return;
 8006512:	e007      	b.n	8006524 <_ZN5snake9SnakeTaskEv+0x1c8>
		else if(but2->LogicState_ == LogicState::WAS_HOLDED)
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <_ZN5snake9SnakeTaskEv+0x1e0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	2b02      	cmp	r3, #2
 800651c:	d1f0      	bne.n	8006500 <_ZN5snake9SnakeTaskEv+0x1a4>
			SnakeTask();
 800651e:	f7ff ff1d 	bl	800635c <_ZN5snake9SnakeTaskEv>
		if(but1->LogicState_ == LogicState::WAS_HOLDED)
 8006522:	e7ed      	b.n	8006500 <_ZN5snake9SnakeTaskEv+0x1a4>
	}
}
 8006524:	375c      	adds	r7, #92	; 0x5c
 8006526:	46bd      	mov	sp, r7
 8006528:	bd90      	pop	{r4, r7, pc}
 800652a:	bf00      	nop
 800652c:	080062e5 	.word	0x080062e5
 8006530:	0800d2b0 	.word	0x0800d2b0
 8006534:	0800d2bc 	.word	0x0800d2bc
 8006538:	200001a4 	.word	0x200001a4
 800653c:	200001a8 	.word	0x200001a8

08006540 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE>:

void snake::SnakeButtonHandler(ClassicSnake& cd)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	if((but1->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::RIGHT)){
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10c      	bne.n	800656c <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x2c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d008      	beq.n	800656c <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x2c>
		cd.NewDirection(directions::LEFT);
 800655a:	2102      	movs	r1, #2
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff f80e 	bl	800557e <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but1->LogicState_ = LogicState::NONE;
 8006562:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	629a      	str	r2, [r3, #40]	; 0x28
 800656a:	e035      	b.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
	}
	else if((but2->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::DOWN)){
 800656c:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10c      	bne.n	8006590 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x50>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d008      	beq.n	8006590 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x50>
		cd.NewDirection(directions::UP);
 800657e:	2100      	movs	r1, #0
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7fe fffc 	bl	800557e <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but2->LogicState_ = LogicState::NONE;
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
 800658e:	e023      	b.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
	}
	else if((but3->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::UP)){
 8006590:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10c      	bne.n	80065b4 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x74>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x74>
		cd.NewDirection(directions::DOWN);
 80065a2:	2101      	movs	r1, #1
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fe ffea 	bl	800557e <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but3->LogicState_ = LogicState::NONE;
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xa8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	629a      	str	r2, [r3, #40]	; 0x28
 80065b2:	e011      	b.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
	}
	else if((but4->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::LEFT)){
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xac>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10c      	bne.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d008      	beq.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
		cd.NewDirection(directions::RIGHT);
 80065c6:	2103      	movs	r1, #3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fe ffd8 	bl	800557e <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but4->LogicState_ = LogicState::NONE;
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0xac>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80065d6:	e7ff      	b.n	80065d8 <_ZN5snake18SnakeButtonHandlerERNS_12ClassicSnakeE+0x98>
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200001a4 	.word	0x200001a4
 80065e4:	200001a8 	.word	0x200001a8
 80065e8:	200001ac 	.word	0x200001ac
 80065ec:	200001b0 	.word	0x200001b0

080065f0 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f83a 	bl	8006672 <_ZNSaISt10_List_nodeIN5snake9SnakeNodeEEED1Ev>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f83a 	bl	800668a <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE8_M_clearEv>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff ffe9 	bl	80065f0 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE10_List_implD1Ev>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZSt8for_eachISt14_List_iteratorIN5snake9SnakeNodeEEPFvRS2_EET0_T_S8_S7_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8006634:	f107 0208 	add.w	r2, r7, #8
 8006638:	f107 030c 	add.w	r3, r7, #12
 800663c:	4611      	mov	r1, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f848 	bl	80066d4 <_ZStneRKSt14_List_iteratorIN5snake9SnakeNodeEES4_>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <_ZSt8for_eachISt14_List_iteratorIN5snake9SnakeNodeEEPFvRS2_EET0_T_S8_S7_+0x40>
	__f(*__first);
 800664a:	f107 030c 	add.w	r3, r7, #12
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff f878 	bl	8005744 <_ZNKSt14_List_iteratorIN5snake9SnakeNodeEEdeEv>
 8006654:	4602      	mov	r2, r0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
      for (; __first != __last; ++__first)
 800665c:	f107 030c 	add.w	r3, r7, #12
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff f860 	bl	8005726 <_ZNSt14_List_iteratorIN5snake9SnakeNodeEEppEv>
 8006666:	e7e5      	b.n	8006634 <_ZSt8for_eachISt14_List_iteratorIN5snake9SnakeNodeEEPFvRS2_EET0_T_S8_S7_+0xc>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8006668:	687b      	ldr	r3, [r7, #4]
    }
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <_ZNSaISt10_List_nodeIN5snake9SnakeNodeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f83d 	bl	80066fa <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEED1Ev>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	429a      	cmp	r2, r3
 800669e:	d015      	beq.n	80066cc <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f7ff f9f9 	bl	8005aa2 <_ZNSt10_List_nodeIN5snake9SnakeNodeEE9_M_valptrEv>
 80066b0:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fb34 	bl	8005d20 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE21_M_get_Node_allocatorEv>
 80066b8:	4603      	mov	r3, r0
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fb39 	bl	8005d34 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5snake9SnakeNodeEEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 80066c2:	6939      	ldr	r1, [r7, #16]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fb42 	bl	8005d4e <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 80066ca:	e7e5      	b.n	8006698 <_ZNSt7__cxx1110_List_baseIN5snake9SnakeNodeESaIS2_EE8_M_clearEv+0xe>
    }
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_ZStneRKSt14_List_iteratorIN5snake9SnakeNodeEES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	bf14      	ite	ne
 80066ea:	2301      	movne	r3, #1
 80066ec:	2300      	moveq	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5snake9SnakeNodeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d201      	bcs.n	8006728 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	e000      	b.n	800672a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006728:	687b      	ldr	r3, [r7, #4]
    }
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <_ZN6tetris15PartTetrisBlockC1Ebm>:

struct PartTetrisBlock
{
	bool isFeeled;
	color_t color;
	PartTetrisBlock(bool isFeeled_ = false, color_t color_ = BACKGROUND) : isFeeled(isFeeled_), color(color_) {}
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	460b      	mov	r3, r1
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	72fb      	strb	r3, [r7, #11]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	7afa      	ldrb	r2, [r7, #11]
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 f8f1 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f8d4 	bl	800792a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1Ev>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff ffeb 	bl	8006772 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1Ev>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f928 	bl	8007a04 <_ZNSaIN6tetris12TetrisFigureEED1Ev>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 f90b 	bl	80079e4 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implC1Ev>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEC1Ev>:
      vector() = default;
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff ffeb 	bl	80067be <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EEC1Ev>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <_ZN6tetris13TetrisManagerC1Ev>:
#include <TetrisLogic.hpp>
using namespace tetris;
TetrisManager::TetrisManager()
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 f8c8 	bl	8007994 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1Ev>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f8c3 	bl	8007994 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1Ev>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	60da      	str	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	611a      	str	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3308      	adds	r3, #8
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ffb1 	bl	800678c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1Ev>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	751a      	strb	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3318      	adds	r3, #24
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ffcf 	bl	80067d8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEC1Ev>
{
	field.resize(ROW_OF_FIELD * COL_OF_FIELD);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3308      	adds	r3, #8
 800683e:	21c8      	movs	r1, #200	; 0xc8
 8006840:	4618      	mov	r0, r3
 8006842:	f001 f924 	bl	8007a8e <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6resizeEj>
	myFigure = CreateFigures(*this);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f103 0418 	add.w	r4, r3, #24
 800684c:	f107 0308 	add.w	r3, r7, #8
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fbb2 	bl	8006fbc <_Z13CreateFiguresRN6tetris13TetrisManagerE>
 8006858:	f107 0308 	add.w	r3, r7, #8
 800685c:	4619      	mov	r1, r3
 800685e:	4620      	mov	r0, r4
 8006860:	f001 f94a 	bl	8007af8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEaSEOS3_>
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4618      	mov	r0, r3
 800686a:	f001 f8f5 	bl	8007a58 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EED1Ev>
	nextFigure = myFigure.begin() + (HAL_GetTick() % QUANTITY_FIGURE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3318      	adds	r3, #24
 8006872:	4618      	mov	r0, r3
 8006874:	f001 f955 	bl	8007b22 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE5beginEv>
 8006878:	4603      	mov	r3, r0
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	f7fa fc3c 	bl	80010f8 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <_ZN6tetris13TetrisManagerC1Ev+0xc8>)
 8006884:	fba3 1302 	umull	r1, r3, r3, r2
 8006888:	1ad1      	subs	r1, r2, r3
 800688a:	0849      	lsrs	r1, r1, #1
 800688c:	440b      	add	r3, r1
 800688e:	0899      	lsrs	r1, r3, #2
 8006890:	460b      	mov	r3, r1
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a5b      	subs	r3, r3, r1
 8006896:	1ad1      	subs	r1, r2, r3
 8006898:	460a      	mov	r2, r1
 800689a:	687c      	ldr	r4, [r7, #4]
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 f94d 	bl	8007b42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEplEi>
 80068a8:	6060      	str	r0, [r4, #4]
	GenerateNewFigure();
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8a2 	bl	80069f4 <_ZN6tetris13TetrisManager17GenerateNewFigureEv>
}
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}
 80068ba:	bf00      	nop
 80068bc:	24924925 	.word	0x24924925

080068c0 <_ZN6tetris13TetrisManager14EraseFilledRowEv>:

size_t TetrisManager::EraseFilledRow()
{
 80068c0:	b5b0      	push	{r4, r5, r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	auto itBeg = field.begin();
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3308      	adds	r3, #8
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f953 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 80068d2:	4603      	mov	r3, r0
 80068d4:	60fb      	str	r3, [r7, #12]
	auto itEnd = itBeg;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
	size_t ErasedRows = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
	size_t row = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
	for (; itBeg != field.end(); itBeg += COL_OF_FIELD, ++row)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3308      	adds	r3, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f956 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 80068ec:	4603      	mov	r3, r0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	f107 0210 	add.w	r2, r7, #16
 80068f4:	f107 030c 	add.w	r3, r7, #12
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f95d 	bl	8007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d070      	beq.n	80069e8 <_ZN6tetris13TetrisManager14EraseFilledRowEv+0x128>
	{
		itEnd += COL_OF_FIELD;
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	210a      	movs	r1, #10
 800690c:	4618      	mov	r0, r3
 800690e:	f001 f96c 	bl	8007bea <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEpLEi>
		if (std::all_of(itBeg, itEnd, [](auto& block)
 8006912:	462a      	mov	r2, r5
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 f979 	bl	8007c0e <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EbSA_SA_T0_>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d058      	beq.n	80069d4 <_ZN6tetris13TetrisManager14EraseFilledRowEv+0x114>
			{return block.isFeeled; }))
		{
			field.erase(itBeg, itEnd);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f103 0408 	add.w	r4, r3, #8
 8006928:	f107 020c 	add.w	r2, r7, #12
 800692c:	f107 0314 	add.w	r3, r7, #20
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f001 f985 	bl	8007c42 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8006938:	f107 0208 	add.w	r2, r7, #8
 800693c:	f107 0318 	add.w	r3, r7, #24
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 f97d 	bl	8007c42 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	6979      	ldr	r1, [r7, #20]
 800694c:	4620      	mov	r0, r4
 800694e:	f001 f989 	bl	8007c64 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>
			field.insert(field.begin(), COL_OF_FIELD, {});
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f103 0408 	add.w	r4, r3, #8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3308      	adds	r3, #8
 800695c:	4618      	mov	r0, r3
 800695e:	f001 f90b 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006962:	4603      	mov	r3, r0
 8006964:	623b      	str	r3, [r7, #32]
 8006966:	f107 0220 	add.w	r2, r7, #32
 800696a:	f107 031c 	add.w	r3, r7, #28
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f001 f966 	bl	8007c42 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8006976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800697a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fed7 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8006986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698a:	220a      	movs	r2, #10
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	4620      	mov	r0, r4
 8006990:	f001 f9a1 	bl	8007cd6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEjRS6_>
			itBeg = field.begin() + (COL_OF_FIELD * row);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3308      	adds	r3, #8
 8006998:	4618      	mov	r0, r3
 800699a:	f001 f8ed 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 800699e:	4603      	mov	r3, r0
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	461a      	mov	r2, r3
 80069ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f9c4 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 80069ba:	4603      	mov	r3, r0
 80069bc:	60fb      	str	r3, [r7, #12]
			itEnd = itBeg + COL_OF_FIELD;
 80069be:	f107 030c 	add.w	r3, r7, #12
 80069c2:	210a      	movs	r1, #10
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f9bc 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 80069ca:	4603      	mov	r3, r0
 80069cc:	60bb      	str	r3, [r7, #8]
			++ErasedRows;
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	3301      	adds	r3, #1
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
	for (; itBeg != field.end(); itBeg += COL_OF_FIELD, ++row)
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	210a      	movs	r1, #10
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f905 	bl	8007bea <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEpLEi>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	3301      	adds	r3, #1
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
 80069e6:	e77c      	b.n	80068e2 <_ZN6tetris13TetrisManager14EraseFilledRowEv+0x22>
		}
	}
	return ErasedRows;
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3738      	adds	r7, #56	; 0x38
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080069f4 <_ZN6tetris13TetrisManager17GenerateNewFigureEv>:

void TetrisManager::GenerateNewFigure()
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	static std::size_t counter = 1;
	currentFigure = nextFigure;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6852      	ldr	r2, [r2, #4]
 8006a02:	601a      	str	r2, [r3, #0]
	nextFigure = myFigure.begin() + ((HAL_GetTick() + ++counter) % QUANTITY_FIGURE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3318      	adds	r3, #24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f88a 	bl	8007b22 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE5beginEv>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	f7fa fb71 	bl	80010f8 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <_ZN6tetris13TetrisManager17GenerateNewFigureEv+0x64>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	490e      	ldr	r1, [pc, #56]	; (8006a58 <_ZN6tetris13TetrisManager17GenerateNewFigureEv+0x64>)
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <_ZN6tetris13TetrisManager17GenerateNewFigureEv+0x64>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	441a      	add	r2, r3
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <_ZN6tetris13TetrisManager17GenerateNewFigureEv+0x68>)
 8006a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a2e:	1ad1      	subs	r1, r2, r3
 8006a30:	0849      	lsrs	r1, r1, #1
 8006a32:	440b      	add	r3, r1
 8006a34:	0899      	lsrs	r1, r3, #2
 8006a36:	460b      	mov	r3, r1
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	1ad1      	subs	r1, r2, r3
 8006a3e:	460a      	mov	r2, r1
 8006a40:	687c      	ldr	r4, [r7, #4]
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 f87a 	bl	8007b42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEplEi>
 8006a4e:	6060      	str	r0, [r4, #4]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd90      	pop	{r4, r7, pc}
 8006a58:	20000014 	.word	0x20000014
 8006a5c:	24924925 	.word	0x24924925

08006a60 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>:
      _Vector_base(_Vector_base&&) = default;
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f988 	bl	8007d86 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1EOS4_>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff ffe5 	bl	8006a60 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE>:
TetrisFigure::TetrisFigure(block_t&& figure_, Coordinate coordFigure_, size_t sideFigure_, color_t colorFigure, TetrisManager& manager_)
 8006aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4639      	mov	r1, r7
 8006aac:	e881 000c 	stmia.w	r1, {r2, r3}
	: figure(std::move(figure_)), initFigure(figure), initCoord(coordFigure_),  prevCoord(coordFigure_),
	  coord(coordFigure_), manager(manager_), side(sideFigure_)
 8006ab0:	68fc      	ldr	r4, [r7, #12]
	: figure(std::move(figure_)), initFigure(figure), initCoord(coordFigure_),  prevCoord(coordFigure_),
 8006ab2:	68b8      	ldr	r0, [r7, #8]
 8006ab4:	f001 f95d 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8006ab8:	4603      	mov	r3, r0
	  coord(coordFigure_), manager(manager_), side(sideFigure_)
 8006aba:	4619      	mov	r1, r3
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff ffdf 	bl	8006a80 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fe60 	bl	800678c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1Ev>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3318      	adds	r3, #24
	: figure(std::move(figure_)), initFigure(figure), initCoord(coordFigure_),  prevCoord(coordFigure_),
 8006ad0:	68fa      	ldr	r2, [r7, #12]
	  coord(coordFigure_), manager(manager_), side(sideFigure_)
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f971 	bl	8007dbc <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ERKS3_>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	463a      	mov	r2, r7
 8006ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ae4:	e883 0003 	stmia.w	r3, {r0, r1}
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	332c      	adds	r3, #44	; 0x2c
 8006aec:	463a      	mov	r2, r7
 8006aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006af2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3334      	adds	r3, #52	; 0x34
 8006afa:	463a      	mov	r2, r7
 8006afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
{
	for(int i = 0; i < pow(side, 2); ++i)
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	6978      	ldr	r0, [r7, #20]
 8006b16:	f7f9 fc75 	bl	8000404 <__aeabi_i2d>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7f9 fc5e 	bl	80003e4 <__aeabi_ui2d>
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b30:	f005 fb14 	bl	800c15c <pow>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	2101      	movs	r1, #1
 8006b3a:	460e      	mov	r6, r1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7f9 ff3c 	bl	80009bc <__aeabi_dcmplt>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE+0xae>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	461e      	mov	r6, r3
 8006b4e:	b2f3      	uxtb	r3, r6
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d020      	beq.n	8006b96 <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE+0xf6>
		if (figure[i].isFeeled)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 f96b 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 8006b60:	4603      	mov	r3, r0
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d012      	beq.n	8006b8e <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE+0xee>
		{
			figure[i].color = colorFigure;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f961 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	6053      	str	r3, [r2, #4]
			initFigure[i].color = colorFigure;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3318      	adds	r3, #24
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f957 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < pow(side, 2); ++i)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	3301      	adds	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	e7be      	b.n	8006b14 <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE+0x74>
		}
}
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ba0 <_ZN6tetris12TetrisFigure6RotateEv>:

void TetrisFigure::Rotate()
{
 8006ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba2:	b08d      	sub	sp, #52	; 0x34
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
	prevFigure = figure;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	330c      	adds	r3, #12
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f95d 	bl	8007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>
	prevCoord = coord;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	332c      	adds	r3, #44	; 0x2c
 8006bbc:	3234      	adds	r2, #52	; 0x34
 8006bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bc2:	e883 0003 	stmia.w	r3, {r0, r1}
	auto counter = 1;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
	size_t row = side - counter;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]
	std::for_each(figure.begin(), figure.end(), [&](auto& block)
		{block = prevFigure[row]; row += side; if (row > pow(side, 2)) row = side - ++counter; });
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 ffce 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006bdc:	4605      	mov	r5, r0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 ffd9 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8006be6:	4606      	mov	r6, r0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	f107 0308 	add.w	r3, r7, #8
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	f107 030c 	add.w	r3, r7, #12
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	f107 0410 	add.w	r4, r7, #16
 8006bfc:	466a      	mov	r2, sp
 8006bfe:	f107 0320 	add.w	r3, r7, #32
 8006c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006c06:	e882 0003 	stmia.w	r2, {r0, r1}
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 fa78 	bl	8008106 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure6RotateEvEUlRT_E_ET0_SA_SA_SD_>
	while (CheckBoundaries());
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8a9 	bl	8006d6e <_ZN6tetris12TetrisFigure15CheckBoundariesEv>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d000      	beq.n	8006c24 <_ZN6tetris12TetrisFigure6RotateEv+0x84>
 8006c22:	e7f8      	b.n	8006c16 <_ZN6tetris12TetrisFigure6RotateEv+0x76>
	if (isIntersectionBlocks())
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f94c 	bl	8006ec2 <_ZN6tetris12TetrisFigure20isIntersectionBlocksEv>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <_ZN6tetris12TetrisFigure6RotateEv+0xae>
	{
		figure = prevFigure;
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	330c      	adds	r3, #12
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f001 f919 	bl	8007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>
		coord = prevCoord;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	3334      	adds	r3, #52	; 0x34
 8006c44:	322c      	adds	r2, #44	; 0x2c
 8006c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c4a:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8006c4e:	bf00      	nop
 8006c50:	372c      	adds	r7, #44	; 0x2c
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c56 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE>:
void TetrisFigure::MoveHorizontally(Directions direction)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
	prevFigure = figure;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	330c      	adds	r3, #12
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f901 	bl	8007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>
	prevCoord = coord;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	332c      	adds	r3, #44	; 0x2c
 8006c74:	3234      	adds	r2, #52	; 0x34
 8006c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c7a:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (direction)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE+0x36>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d006      	beq.n	8006c98 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE+0x42>
	{
	case Directions::LEFT: --coord.X; break;
	case Directions::RIGHT: ++coord.X; break;
	default: return;
 8006c8a:	e01c      	b.n	8006cc6 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE+0x70>
	case Directions::LEFT: --coord.X; break;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	1e5a      	subs	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	635a      	str	r2, [r3, #52]	; 0x34
 8006c96:	e005      	b.n	8006ca4 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE+0x4e>
	case Directions::RIGHT: ++coord.X; break;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ca2:	bf00      	nop
	}
	CheckBoundaries();
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f862 	bl	8006d6e <_ZN6tetris12TetrisFigure15CheckBoundariesEv>
	if (isIntersectionBlocks()) coord = prevCoord;
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f909 	bl	8006ec2 <_ZN6tetris12TetrisFigure20isIntersectionBlocksEv>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d007      	beq.n	8006cc6 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE+0x70>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	3334      	adds	r3, #52	; 0x34
 8006cbc:	322c      	adds	r2, #44	; 0x2c
 8006cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cc2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN6tetris12TetrisFigure8MoveDownEv>:
bool TetrisFigure::MoveDown()
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	prevFigure = figure;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f8c7 	bl	8007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>
	prevCoord = coord;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	332c      	adds	r3, #44	; 0x2c
 8006ce8:	3234      	adds	r2, #52	; 0x34
 8006cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cee:	e883 0003 	stmia.w	r3, {r0, r1}
	++coord.Y;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
	bool returnCB = CheckBoundaries();
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f836 	bl	8006d6e <_ZN6tetris12TetrisFigure15CheckBoundariesEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
	bool returnIB = isIntersectionBlocks();
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8db 	bl	8006ec2 <_ZN6tetris12TetrisFigure20isIntersectionBlocksEv>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73bb      	strb	r3, [r7, #14]
	if (returnIB) --coord.Y;
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <_ZN6tetris12TetrisFigure8MoveDownEv+0x54>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
	if (returnIB || returnCB)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <_ZN6tetris12TetrisFigure8MoveDownEv+0x60>
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01b      	beq.n	8006d64 <_ZN6tetris12TetrisFigure8MoveDownEv+0x98>
	{
		if (CheckEndGame()) return true;
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f927 	bl	8006f80 <_ZN6tetris12TetrisFigure12CheckEndGameEv>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <_ZN6tetris12TetrisFigure8MoveDownEv+0x70>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e014      	b.n	8006d66 <_ZN6tetris12TetrisFigure8MoveDownEv+0x9a>
		FillFieldFigure();
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8f2 	bl	8006f26 <_ZN6tetris12TetrisFigure15FillFieldFigureEv>
		figure = initFigure;
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3318      	adds	r3, #24
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f001 f890 	bl	8007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>
		coord = initCoord;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	3334      	adds	r3, #52	; 0x34
 8006d56:	3224      	adds	r2, #36	; 0x24
 8006d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5c:	e883 0003 	stmia.w	r3, {r0, r1}
		return false;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e000      	b.n	8006d66 <_ZN6tetris12TetrisFigure8MoveDownEv+0x9a>
	}
	else return true;
 8006d64:	2301      	movs	r3, #1
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <_ZN6tetris12TetrisFigure15CheckBoundariesEv>:

bool TetrisFigure::CheckBoundaries()
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
	bool returnStatus = false;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
	if ((coord.Y + side - 1) >= ROW_OF_FIELD)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	4413      	add	r3, r2
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b13      	cmp	r3, #19
 8006d8a:	d911      	bls.n	8006db0 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0x42>
	{
		if (isContainsUnitInRow((ROW_OF_FIELD - (coord.Y + (side - 1)) + (side - 1))))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	425b      	negs	r3, r3
 8006d92:	3314      	adds	r3, #20
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f86b 	bl	8006e72 <_ZN6tetris12TetrisFigure19isContainsUnitInRowEj>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0x42>
		{
			coord.Y -= 1; returnStatus = true;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
 8006dac:	2301      	movs	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (coord.X < 0)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da14      	bge.n	8006de2 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0x74>
	{
		if (isContainsUnitInColumne(abs(coord.X) - 1))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfb8      	it	lt
 8006dc0:	425b      	neglt	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f82b 	bl	8006e22 <_ZN6tetris12TetrisFigure23isContainsUnitInColumneEj>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d022      	beq.n	8006e18 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0xaa>
		{
			coord.X += 1; returnStatus = true;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	635a      	str	r2, [r3, #52]	; 0x34
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
 8006de0:	e01a      	b.n	8006e18 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0xaa>
		}
	}
	else if ((coord.X + side - 1) >= COL_OF_FIELD)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	4413      	add	r3, r2
 8006dee:	3b01      	subs	r3, #1
 8006df0:	2b09      	cmp	r3, #9
 8006df2:	d911      	bls.n	8006e18 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0xaa>
	{
		if (isContainsUnitInColumne((COL_OF_FIELD - (coord.X + (side - 1)) + (side - 1))))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	425b      	negs	r3, r3
 8006dfa:	330a      	adds	r3, #10
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f80f 	bl	8006e22 <_ZN6tetris12TetrisFigure23isContainsUnitInColumneEj>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d006      	beq.n	8006e18 <_ZN6tetris12TetrisFigure15CheckBoundariesEv+0xaa>
		{
			coord.X -= 1; returnStatus = true;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0e:	1e5a      	subs	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
		}
	}
	return returnStatus;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <_ZN6tetris12TetrisFigure23isContainsUnitInColumneEj>:

bool TetrisFigure::isContainsUnitInColumne(size_t icol)
{
 8006e22:	b590      	push	{r4, r7, lr}
 8006e24:	b089      	sub	sp, #36	; 0x24
 8006e26:	af02      	add	r7, sp, #8
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
	size_t irow = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
	auto lambd1 = [&](auto& block)
	{
		if (irow == side) irow = 0;
		if (irow++ == icol) return !block.isFeeled;
		else return true;
	};
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	613b      	str	r3, [r7, #16]
	return !std::all_of(figure.begin(), figure.end(), lambd1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fe99 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006e46:	4604      	mov	r4, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fea4 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8006e50:	4601      	mov	r1, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	cb0c      	ldmia	r3, {r2, r3}
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f001 f985 	bl	800816c <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EbSA_SA_T0_>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f083 0301 	eor.w	r3, r3, #1
 8006e68:	b2db      	uxtb	r3, r3
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}

08006e72 <_ZN6tetris12TetrisFigure19isContainsUnitInRowEj>:
bool TetrisFigure::isContainsUnitInRow(size_t irow)
{
 8006e72:	b590      	push	{r4, r7, lr}
 8006e74:	b089      	sub	sp, #36	; 0x24
 8006e76:	af02      	add	r7, sp, #8
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
	size_t counter = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
	auto lambd2 = [&](auto& block)
	{
		if (irow == size_t(counter++ / side)) return !block.isFeeled;
		else return true;
	};
 8006e80:	463b      	mov	r3, r7
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	f107 0314 	add.w	r3, r7, #20
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	613b      	str	r3, [r7, #16]
	return !std::all_of(figure.begin(), figure.end(), lambd2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fe71 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006e96:	4604      	mov	r4, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fe7c 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f107 0308 	add.w	r3, r7, #8
 8006eaa:	cb0c      	ldmia	r3, {r2, r3}
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 f981 	bl	80081b4 <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EbSA_SA_T0_>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f083 0301 	eor.w	r3, r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}

08006ec2 <_ZN6tetris12TetrisFigure20isIntersectionBlocksEv>:
bool TetrisFigure::isIntersectionBlocks()
{
 8006ec2:	b5b0      	push	{r4, r5, r7, lr}
 8006ec4:	b08c      	sub	sp, #48	; 0x30
 8006ec6:	af02      	add	r7, sp, #8
 8006ec8:	6078      	str	r0, [r7, #4]
	size_t row = 0, col = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ece:	2300      	movs	r3, #0
 8006ed0:	623b      	str	r3, [r7, #32]
	bool flag = false;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	77fb      	strb	r3, [r7, #31]
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
				flag = true;
		}
		if (++col == side) { ++row, col = 0; }
		return flag;
	};
 8006ed6:	f107 031f 	add.w	r3, r7, #31
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	f107 0320 	add.w	r3, r7, #32
 8006eea:	61bb      	str	r3, [r7, #24]
	return std::any_of(figure.begin(), figure.end(), lambd3);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fe42 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fe4d 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8006efe:	4605      	mov	r5, r0
 8006f00:	466a      	mov	r2, sp
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f0e:	f107 030c 	add.w	r3, r7, #12
 8006f12:	cb0c      	ldmia	r3, {r2, r3}
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	f001 f970 	bl	80081fc <_ZSt6any_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EbSA_SA_T0_>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3728      	adds	r7, #40	; 0x28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bdb0      	pop	{r4, r5, r7, pc}

08006f26 <_ZN6tetris12TetrisFigure15FillFieldFigureEv>:

void TetrisFigure::FillFieldFigure()
{
 8006f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f28:	b08d      	sub	sp, #52	; 0x34
 8006f2a:	af02      	add	r7, sp, #8
 8006f2c:	6078      	str	r0, [r7, #4]
	size_t row = 0, col = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
			manager.field[index].isFeeled = true;
			manager.field[index].color = block.color;
		}
		if (++col == side) { ++row, col = 0; }
	};
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	f107 0318 	add.w	r3, r7, #24
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	613b      	str	r3, [r7, #16]
	std::for_each(figure.begin(), figure.end(), lambd4);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fe15 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fe20 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f107 041c 	add.w	r4, r7, #28
 8006f5e:	466a      	mov	r2, sp
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f68:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4632      	mov	r2, r6
 8006f70:	4629      	mov	r1, r5
 8006f72:	4620      	mov	r0, r4
 8006f74:	f001 f9b8 	bl	80082e8 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure15FillFieldFigureEvEUlRT_E_ET0_SA_SA_SD_>
}
 8006f78:	bf00      	nop
 8006f7a:	372c      	adds	r7, #44	; 0x2c
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f80 <_ZN6tetris12TetrisFigure12CheckEndGameEv>:

bool TetrisFigure::CheckEndGame()
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	if (coord.Y < HIDDEN_ROW_OF_FIELD)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	dc10      	bgt.n	8006fb2 <_ZN6tetris12TetrisFigure12CheckEndGameEv+0x32>
	{
		if (isContainsUnitInRow((HIDDEN_ROW_OF_FIELD - 1) - coord.Y))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	f1c3 0303 	rsb	r3, r3, #3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ff69 	bl	8006e72 <_ZN6tetris12TetrisFigure19isContainsUnitInRowEj>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <_ZN6tetris12TetrisFigure12CheckEndGameEv+0x32>
		{
			manager.END_OF_GAME = true;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	2201      	movs	r2, #1
 8006fac:	751a      	strb	r2, [r3, #20]
			return true;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <_ZN6tetris12TetrisFigure12CheckEndGameEv+0x34>
		}
	}
	return false;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_Z13CreateFiguresRN6tetris13TetrisManagerE>:
std::vector<TetrisFigure> CreateFigures(TetrisManager& man)
{
 8006fbc:	b590      	push	{r4, r7, lr}
 8006fbe:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
 8006fc2:	af02      	add	r7, sp, #8
 8006fc4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006fc8:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8006fcc:	6018      	str	r0, [r3, #0]
 8006fce:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006fd2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8006fd6:	6019      	str	r1, [r3, #0]
	{
		{0},{0},{0},{0},
		{0},{0},{0},{0},
		{1},{1},{1},{1},
		{0},{0},{0},{0}
	};
 8006fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fba6 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8006fe8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006fec:	3308      	adds	r3, #8
 8006fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff fb9d 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8006ffa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ffe:	3310      	adds	r3, #16
 8007000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fb94 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800700c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007010:	3318      	adds	r3, #24
 8007012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fb8b 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800701e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007022:	3320      	adds	r3, #32
 8007024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fb82 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007034:	3328      	adds	r3, #40	; 0x28
 8007036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fb79 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007042:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007046:	3330      	adds	r3, #48	; 0x30
 8007048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fb70 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007054:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007058:	3338      	adds	r3, #56	; 0x38
 800705a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fb67 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007066:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800706a:	3340      	adds	r3, #64	; 0x40
 800706c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007070:	2101      	movs	r1, #1
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fb5e 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800707c:	3348      	adds	r3, #72	; 0x48
 800707e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007082:	2101      	movs	r1, #1
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fb55 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800708a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800708e:	3350      	adds	r3, #80	; 0x50
 8007090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007094:	2101      	movs	r1, #1
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fb4c 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800709c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070a0:	3358      	adds	r3, #88	; 0x58
 80070a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070a6:	2101      	movs	r1, #1
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fb43 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80070ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070b2:	3360      	adds	r3, #96	; 0x60
 80070b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b8:	2100      	movs	r1, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fb3a 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80070c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070c4:	3368      	adds	r3, #104	; 0x68
 80070c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fb31 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80070d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070d6:	3370      	adds	r3, #112	; 0x70
 80070d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fb28 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80070e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070e8:	3378      	adds	r3, #120	; 0x78
 80070ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff fb1f 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80070f6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80070fa:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80070fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007108:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800710c:	2210      	movs	r2, #16
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f91a 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 800711a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800711e:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8007122:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8007126:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800712a:	ca06      	ldmia	r2, {r1, r2}
 800712c:	f001 f91b 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8007130:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fc08 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig2
	{
		{0},{0},{0},
		{1},{1},{1},
		{1},{0},{0}
	};
 800713a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800713e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff faf5 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800714a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800714e:	3308      	adds	r3, #8
 8007150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff faec 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800715c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007160:	3310      	adds	r3, #16
 8007162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fae3 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800716e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007172:	3318      	adds	r3, #24
 8007174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007178:	2101      	movs	r1, #1
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fada 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007180:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007184:	3320      	adds	r3, #32
 8007186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fad1 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007192:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007196:	3328      	adds	r3, #40	; 0x28
 8007198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fac8 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80071a4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80071a8:	3330      	adds	r3, #48	; 0x30
 80071aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fabf 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80071b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80071ba:	3338      	adds	r3, #56	; 0x38
 80071bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fab6 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80071c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80071cc:	3340      	adds	r3, #64	; 0x40
 80071ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff faad 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80071da:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80071de:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80071e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80071ec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80071f0:	2209      	movs	r2, #9
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f8a8 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 80071fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007202:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8007206:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 800720a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800720e:	ca06      	ldmia	r2, {r1, r2}
 8007210:	f001 f8a9 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8007214:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fb96 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig3
	{
		{0},{0},{0},
		{1},{1},{1},
		{0},{0},{1}
	};
 800721e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fa83 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800722e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007232:	3308      	adds	r3, #8
 8007234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fa7a 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007240:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007244:	3310      	adds	r3, #16
 8007246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fa71 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007252:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007256:	3318      	adds	r3, #24
 8007258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff fa68 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007264:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007268:	3320      	adds	r3, #32
 800726a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800726e:	2101      	movs	r1, #1
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fa5f 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007276:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800727a:	3328      	adds	r3, #40	; 0x28
 800727c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007280:	2101      	movs	r1, #1
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fa56 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007288:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800728c:	3330      	adds	r3, #48	; 0x30
 800728e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fa4d 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800729a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800729e:	3338      	adds	r3, #56	; 0x38
 80072a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fa44 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80072ac:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80072b0:	3340      	adds	r3, #64	; 0x40
 80072b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fa3b 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80072be:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80072c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80072c6:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80072d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80072d4:	2209      	movs	r2, #9
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 f836 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 80072e2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072e6:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80072ea:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 80072ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80072f2:	ca06      	ldmia	r2, {r1, r2}
 80072f4:	f001 f837 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80072f8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fb24 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig4
	{
		{0},{0},{0},
		{0},{1},{1},
		{1},{1},{0}
	};
 8007302:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800730a:	2100      	movs	r1, #0
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fa11 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007312:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007316:	3308      	adds	r3, #8
 8007318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fa08 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007324:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007328:	3310      	adds	r3, #16
 800732a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff f9ff 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007336:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800733a:	3318      	adds	r3, #24
 800733c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff f9f6 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007348:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800734c:	3320      	adds	r3, #32
 800734e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007352:	2101      	movs	r1, #1
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff f9ed 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800735a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800735e:	3328      	adds	r3, #40	; 0x28
 8007360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff f9e4 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800736c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007370:	3330      	adds	r3, #48	; 0x30
 8007372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007376:	2101      	movs	r1, #1
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff f9db 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800737e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007382:	3338      	adds	r3, #56	; 0x38
 8007384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007388:	2101      	movs	r1, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f9d2 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007390:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007394:	3340      	adds	r3, #64	; 0x40
 8007396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff f9c9 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80073a2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80073a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073aa:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80073b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073b8:	2209      	movs	r2, #9
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 ffc4 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 80073c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80073ca:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80073ce:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80073d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80073d6:	ca06      	ldmia	r2, {r1, r2}
 80073d8:	f000 ffc5 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80073dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fab2 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig5
	{
		{0},{0},{0},
		{1},{1},{0},
		{0},{1},{1}
	};
 80073e6:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80073ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff f99f 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80073f6:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80073fa:	3308      	adds	r3, #8
 80073fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff f996 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007408:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800740c:	3310      	adds	r3, #16
 800740e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff f98d 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800741a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800741e:	3318      	adds	r3, #24
 8007420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff f984 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800742c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8007430:	3320      	adds	r3, #32
 8007432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff f97b 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800743e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8007442:	3328      	adds	r3, #40	; 0x28
 8007444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff f972 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007450:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8007454:	3330      	adds	r3, #48	; 0x30
 8007456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff f969 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007462:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8007466:	3338      	adds	r3, #56	; 0x38
 8007468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800746c:	2101      	movs	r1, #1
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f960 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007474:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8007478:	3340      	adds	r3, #64	; 0x40
 800747a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800747e:	2101      	movs	r1, #1
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff f957 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007486:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800748a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800748e:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007498:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800749c:	2209      	movs	r2, #9
 800749e:	605a      	str	r2, [r3, #4]
 80074a0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ff52 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 80074aa:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80074ae:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80074b2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80074b6:	f107 0020 	add.w	r0, r7, #32
 80074ba:	ca06      	ldmia	r2, {r1, r2}
 80074bc:	f000 ff53 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80074c0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fa40 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig6
	{
		{0},{0},{0},
		{1},{1},{1},
		{0},{1},{0}
	};
 80074ca:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80074ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff f92d 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80074da:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80074de:	3308      	adds	r3, #8
 80074e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff f924 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80074ec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80074f0:	3310      	adds	r3, #16
 80074f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff f91b 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80074fe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007502:	3318      	adds	r3, #24
 8007504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007508:	2101      	movs	r1, #1
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff f912 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007510:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007514:	3320      	adds	r3, #32
 8007516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff f909 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007522:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007526:	3328      	adds	r3, #40	; 0x28
 8007528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff f900 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007534:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007538:	3330      	adds	r3, #48	; 0x30
 800753a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff f8f7 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007546:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800754a:	3338      	adds	r3, #56	; 0x38
 800754c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f8ee 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 8007558:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800755c:	3340      	adds	r3, #64	; 0x40
 800755e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff f8e5 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800756a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800756e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8007572:	2309      	movs	r3, #9
 8007574:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8007578:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fee6 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 8007582:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007586:	f107 0014 	add.w	r0, r7, #20
 800758a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800758e:	ca06      	ldmia	r2, {r1, r2}
 8007590:	f000 fee9 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8007594:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f9d6 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	block_t fig7
	{
		{1},{1},
		{1},{1}
	};
 800759e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80075a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a6:	2101      	movs	r1, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff f8c3 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80075ae:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80075b2:	3308      	adds	r3, #8
 80075b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075b8:	2101      	movs	r1, #1
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff f8ba 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80075c0:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80075c4:	3310      	adds	r3, #16
 80075c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ca:	2101      	movs	r1, #1
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f8b1 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80075d2:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80075d6:	3318      	adds	r3, #24
 80075d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075dc:	2101      	movs	r1, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f8a8 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 80075e4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80075e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80075ec:	2304      	movs	r3, #4
 80075ee:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80075f2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fea9 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 80075fc:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8007600:	f107 0008 	add.w	r0, r7, #8
 8007604:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8007608:	ca06      	ldmia	r2, {r1, r2}
 800760a:	f000 feac 	bl	8008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 800760e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f999 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	std::vector<TetrisFigure> myFigure;
 8007618:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800761c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f7ff f8d9 	bl	80067d8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEC1Ev>
	myFigure.reserve(QUANTITY_FIGURE);
 8007626:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800762a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800762e:	2107      	movs	r1, #7
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f000 fecf 	bl	80083d4 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj>
	myFigure.emplace_back(std::move(fig1), Coordinate{ 3, 2 }, 4, FIG1COLOR, man);
 8007636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fb99 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007640:	4604      	mov	r4, r0
 8007642:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8007646:	2202      	movs	r2, #2
 8007648:	2103      	movs	r1, #3
 800764a:	4618      	mov	r0, r3
 800764c:	f7fd fd84 	bl	8005158 <_ZN10CoordinateC1Ell>
 8007650:	2304      	movs	r3, #4
 8007652:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8007656:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800765a:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
 800765e:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007662:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8007666:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800766a:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 800766e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007672:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	460b      	mov	r3, r1
 8007682:	4621      	mov	r1, r4
 8007684:	6800      	ldr	r0, [r0, #0]
 8007686:	f000 ff31 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig2), Coordinate{ 3, 2 }, 3, FIG2COLOR, man);
 800768a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fb6f 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007694:	4604      	mov	r4, r0
 8007696:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800769a:	2202      	movs	r2, #2
 800769c:	2103      	movs	r1, #3
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd fd5a 	bl	8005158 <_ZN10CoordinateC1Ell>
 80076a4:	2303      	movs	r3, #3
 80076a6:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80076aa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80076ae:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
 80076b2:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80076b6:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80076ba:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80076be:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 80076c2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80076c6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	f207 23d6 	addw	r3, r7, #726	; 0x2d6
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	460b      	mov	r3, r1
 80076d6:	4621      	mov	r1, r4
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f000 ff07 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig3), Coordinate{ 3, 2 }, 3, FIG3COLOR, man);
 80076de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fb45 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80076e8:	4604      	mov	r4, r0
 80076ea:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80076ee:	2202      	movs	r2, #2
 80076f0:	2103      	movs	r1, #3
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd fd30 	bl	8005158 <_ZN10CoordinateC1Ell>
 80076f8:	2303      	movs	r3, #3
 80076fa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80076fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8007702:	f8a7 32e6 	strh.w	r3, [r7, #742]	; 0x2e6
 8007706:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800770a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800770e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007712:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 8007716:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800771a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	f207 23e6 	addw	r3, r7, #742	; 0x2e6
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	460b      	mov	r3, r1
 800772a:	4621      	mov	r1, r4
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f000 fedd 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig4), Coordinate{ 3, 2 }, 3, FIG4COLOR, man);
 8007732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fb1b 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800773c:	4604      	mov	r4, r0
 800773e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8007742:	2202      	movs	r2, #2
 8007744:	2103      	movs	r1, #3
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd fd06 	bl	8005158 <_ZN10CoordinateC1Ell>
 800774c:	2303      	movs	r3, #3
 800774e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8007752:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007756:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 800775a:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 800775e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8007762:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007766:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 800776a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800776e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	460b      	mov	r3, r1
 800777e:	4621      	mov	r1, r4
 8007780:	6800      	ldr	r0, [r0, #0]
 8007782:	f000 feb3 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig5), Coordinate{ 3, 2 }, 3, FIG5COLOR, man);
 8007786:	f107 0320 	add.w	r3, r7, #32
 800778a:	4618      	mov	r0, r3
 800778c:	f000 faf1 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007790:	4604      	mov	r4, r0
 8007792:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8007796:	2202      	movs	r2, #2
 8007798:	2103      	movs	r1, #3
 800779a:	4618      	mov	r0, r3
 800779c:	f7fd fcdc 	bl	8005158 <_ZN10CoordinateC1Ell>
 80077a0:	2303      	movs	r3, #3
 80077a2:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80077a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80077aa:	f8a7 3306 	strh.w	r3, [r7, #774]	; 0x306
 80077ae:	f507 7140 	add.w	r1, r7, #768	; 0x300
 80077b2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80077b6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80077ba:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 80077be:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80077c2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	f207 3306 	addw	r3, r7, #774	; 0x306
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	460b      	mov	r3, r1
 80077d2:	4621      	mov	r1, r4
 80077d4:	6800      	ldr	r0, [r0, #0]
 80077d6:	f000 fe89 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig6), Coordinate{ 3, 2 }, 3, FIG6COLOR, man);
 80077da:	f107 0314 	add.w	r3, r7, #20
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fac7 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80077e4:	4604      	mov	r4, r0
 80077e6:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80077ea:	2202      	movs	r2, #2
 80077ec:	2103      	movs	r1, #3
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd fcb2 	bl	8005158 <_ZN10CoordinateC1Ell>
 80077f4:	2303      	movs	r3, #3
 80077f6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80077fa:	f647 030f 	movw	r3, #30735	; 0x780f
 80077fe:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
 8007802:	f507 7144 	add.w	r1, r7, #784	; 0x310
 8007806:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800780a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800780e:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 8007812:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007816:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f207 3316 	addw	r3, r7, #790	; 0x316
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	460b      	mov	r3, r1
 8007826:	4621      	mov	r1, r4
 8007828:	6800      	ldr	r0, [r0, #0]
 800782a:	f000 fe5f 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	myFigure.emplace_back(std::move(fig7), Coordinate{ 3, 3 }, 2, FIG7COLOR, man);
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fa9d 	bl	8007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007838:	4604      	mov	r4, r0
 800783a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800783e:	2203      	movs	r2, #3
 8007840:	2103      	movs	r1, #3
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fc88 	bl	8005158 <_ZN10CoordinateC1Ell>
 8007848:	2302      	movs	r3, #2
 800784a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800784e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007852:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326
 8007856:	f507 7148 	add.w	r1, r7, #800	; 0x320
 800785a:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800785e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8007862:	f5a3 7049 	sub.w	r0, r3, #804	; 0x324
 8007866:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800786a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	f207 3326 	addw	r3, r7, #806	; 0x326
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	460b      	mov	r3, r1
 800787a:	4621      	mov	r1, r4
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f000 fe35 	bl	80084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>
	return myFigure;
 8007882:	bf00      	nop
	};
 8007884:	f107 0308 	add.w	r3, r7, #8
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f890 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f88b 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 8007898:	f107 0320 	add.w	r3, r7, #32
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f886 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 80078a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f881 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 80078ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f87c 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 80078b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f877 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	};
 80078c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f872 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
	return myFigure;
 80078ca:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80078ce:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80078d2:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80078d6:	f5a2 7249 	sub.w	r2, r2, #804	; 0x324
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80078e2:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd90      	pop	{r4, r7, pc}

080078f0 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d201      	bcs.n	800790a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	e000      	b.n	800790c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800790a:	687b      	ldr	r3, [r7, #4]
    }
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr

0800792a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fd0b 	bl	800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fe32 	bl	80085a4 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>:
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fe39 	bl	80085ca <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEED1Ev>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800797a:	461a      	mov	r2, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fe2e 	bl	80085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>
      }
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fee8 	bl	800675a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implD1Ev>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80079ae:	b5b0      	push	{r4, r5, r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681c      	ldr	r4, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fe1f 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 80079c6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80079c8:	461a      	mov	r2, r3
 80079ca:	4629      	mov	r1, r5
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fe23 	bl	8008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff ffc4 	bl	8007962 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bdb0      	pop	{r4, r5, r7, pc}

080079e4 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fe21 	bl	8008634 <_ZNSaIN6tetris12TetrisFigureEEC1Ev>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fe29 	bl	800864c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <_ZNSaIN6tetris12TetrisFigureEED1Ev>:
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fe30 	bl	8008672 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEED1Ev>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	109b      	asrs	r3, r3, #2
 8007a34:	4a07      	ldr	r2, [pc, #28]	; (8007a54 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EED1Ev+0x38>)
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fe22 	bl	8008686 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13_M_deallocateEPS1_j>
      }
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe feae 	bl	80067a6 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implD1Ev>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	f0f0f0f1 	.word	0xf0f0f0f1

08007a58 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007a58:	b5b0      	push	{r4, r5, r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681c      	ldr	r4, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fe1e 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8007a70:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007a72:	461a      	mov	r2, r3
 8007a74:	4629      	mov	r1, r5
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fe22 	bl	80086c0 <_ZSt8_DestroyIPN6tetris12TetrisFigureES1_EvT_S3_RSaIT0_E>
      }
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff ffcc 	bl	8007a1c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EED1Ev>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bdb0      	pop	{r4, r5, r7, pc}

08007a8e <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fe1f 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	bf8c      	ite	hi
 8007aa6:	2301      	movhi	r3, #1
 8007aa8:	2300      	movls	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fe13 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fe30 	bl	8008724 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8007ac4:	e014      	b.n	8007af0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6resizeEj+0x62>
	else if (__new_size < size())
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fe08 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007acc:	4602      	mov	r2, r0
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	bf34      	ite	cc
 8007ad4:	2301      	movcc	r3, #1
 8007ad6:	2300      	movcs	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fed8 	bl	80088a0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_M_erase_at_endEPS1_>
      }
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8007b02:	2301      	movs	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	f000 feeb 	bl	80088e2 <_ZSt4moveIRSt6vectorIN6tetris12TetrisFigureESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 feef 	bl	80088f6 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 8007b18:	687b      	ldr	r3, [r7, #4]
      }
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd90      	pop	{r4, r7, pc}

08007b22 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	f107 030c 	add.w	r3, r7, #12
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 ff1d 	bl	8008972 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEplEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	f107 020c 	add.w	r2, r7, #12
 8007b62:	f107 0308 	add.w	r3, r7, #8
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 ff02 	bl	8008972 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 ff01 	bl	8008990 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fef0 	bl	8008990 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007bba:	b590      	push	{r4, r7, lr}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fef2 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	681c      	ldr	r4, [r3, #0]
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f000 feed 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd90      	pop	{r4, r7, pc}

08007bea <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
      { _M_current += __n; return *this; }
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr

08007c0e <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EbSA_SA_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fecf 	bl	80089c2 <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_ESA_SA_SA_T0_>
 8007c24:	4603      	mov	r3, r0
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	f107 0214 	add.w	r2, r7, #20
 8007c2c:	f107 0308 	add.w	r3, r7, #8
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fed8 	bl	80089e8 <_ZN9__gnu_cxxeqIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8007c4c:	6838      	ldr	r0, [r7, #0]
 8007c4e:	f000 feae 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8007c52:	4603      	mov	r3, r0
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>:
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __first, const_iterator __last)
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
      {
	const auto __beg = begin();
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff ff81 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007c76:	4603      	mov	r3, r0
 8007c78:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fecc 	bl	8008a18 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6cbeginEv>
 8007c80:	4603      	mov	r3, r0
 8007c82:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 8007c84:	f107 0210 	add.w	r2, r7, #16
 8007c88:	f107 0308 	add.w	r3, r7, #8
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fed2 	bl	8008a38 <_ZN9__gnu_cxxmiIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8007c94:	4602      	mov	r2, r0
 8007c96:	f107 0314 	add.w	r3, r7, #20
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 f850 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f107 0210 	add.w	r2, r7, #16
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fec3 	bl	8008a38 <_ZN9__gnu_cxxmiIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	f107 0314 	add.w	r3, r7, #20
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f841 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fecb 	bl	8008a62 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>
 8007ccc:	4603      	mov	r3, r0
      }
 8007cce:	4618      	mov	r0, r3
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd90      	pop	{r4, r7, pc}

08007cd6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEjRS6_>:
      insert(const_iterator __position, size_type __n, const value_type& __x)
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b088      	sub	sp, #32
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
	difference_type __offset = __position - cbegin();
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fe97 	bl	8008a18 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6cbeginEv>
 8007cea:	4603      	mov	r3, r0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	f107 0210 	add.w	r2, r7, #16
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fe9d 	bl	8008a38 <_ZN9__gnu_cxxmiIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8007cfe:	61f8      	str	r0, [r7, #28]
	_M_fill_insert(begin() + __offset, __n, __x);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ff39 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007d06:	4603      	mov	r3, r0
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	f107 0314 	add.w	r3, r7, #20
 8007d0e:	69f9      	ldr	r1, [r7, #28]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f816 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 8007d16:	4601      	mov	r1, r0
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fee7 	bl	8008af0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
	return begin() + __offset;
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ff28 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	f107 0318 	add.w	r3, r7, #24
 8007d30:	69f9      	ldr	r1, [r7, #28]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 f805 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 8007d38:	4603      	mov	r3, r0
      }
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	f107 020c 	add.w	r2, r7, #12
 8007d5c:	f107 0308 	add.w	r3, r7, #8
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fe14 	bl	8008990 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <_ZSt4moveIRSt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1EOS4_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8007d86:	b590      	push	{r4, r7, lr}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8007d90:	6838      	ldr	r0, [r7, #0]
 8007d92:	f000 ffed 	bl	8008d70 <_ZSt4moveIRNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>
 8007d96:	4603      	mov	r3, r0
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fff2 	bl	8008d84 <_ZNSaIN6tetris15PartTetrisBlockEEC1ERKS1_>
 8007da0:	687c      	ldr	r4, [r7, #4]
 8007da2:	6838      	ldr	r0, [r7, #0]
 8007da4:	f000 ffe4 	bl	8008d70 <_ZSt4moveIRNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>
 8007da8:	4603      	mov	r3, r0
 8007daa:	4619      	mov	r1, r3
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fff7 	bl	8008da0 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_Vector_impl_dataC1EOS4_>
	{ }
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd90      	pop	{r4, r7, pc}

08007dbc <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8007dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8007dc6:	687c      	ldr	r4, [r7, #4]
 8007dc8:	6838      	ldr	r0, [r7, #0]
 8007dca:	f000 fc87 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 f814 	bl	8008e00 <_ZNKSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f107 030c 	add.w	r3, r7, #12
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 ffff 	bl	8008de4 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E17_S_select_on_copyERKS3_>
 8007de6:	f107 030c 	add.w	r3, r7, #12
 8007dea:	461a      	mov	r2, r3
 8007dec:	4629      	mov	r1, r5
 8007dee:	4620      	mov	r0, r4
 8007df0:	f001 f810 	bl	8008e14 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1EjRKS2_>
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7ff fda6 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007dfe:	6838      	ldr	r0, [r7, #0]
 8007e00:	f001 f81c 	bl	8008e3c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007e04:	4605      	mov	r5, r0
 8007e06:	6838      	ldr	r0, [r7, #0]
 8007e08:	f001 f828 	bl	8008e5c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fbf5 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007e1a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	f001 f82c 	bl	8008e7e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8007e26:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	605a      	str	r2, [r3, #4]
      }
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
      }
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr

08007e62 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8007e62:	b480      	push	{r7}
 8007e64:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8007e66:	2301      	movs	r3, #1
 8007e68:	4618      	mov	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr

08007e70 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f000 80e6 	beq.w	8008050 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x1e0>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8007e84:	f7ff ffe6 	bl	8007e54 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E27_S_propagate_on_copy_assignEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d043      	beq.n	8007f16 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0xa6>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8007e8e:	f7ff ffe8 	bl	8007e62 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E15_S_always_equalEv>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f083 0301 	eor.w	r3, r3, #1
 8007e98:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d012      	beq.n	8007ec4 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x54>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fbaf 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ffa8 	bl	8008e00 <_ZNKSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fff3 	bl	8008ea0 <_ZStneRKSaIN6tetris15PartTetrisBlockEES3_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x54>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x56>
 8007ec4:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d017      	beq.n	8007efa <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x8a>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fff3 	bl	8008eb6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	10db      	asrs	r3, r3, #3
		  _M_deallocate(this->_M_impl._M_start,
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f000 fb7b 	bl	80085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fb81 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007f02:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 ff7a 	bl	8008e00 <_ZNKSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007f0c:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 ffde 	bl	8008ed2 <_ZSt15__alloc_on_copyISaIN6tetris15PartTetrisBlockEEEvRT_RKS3_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8007f16:	6838      	ldr	r0, [r7, #0]
 8007f18:	f000 fbe0 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007f1c:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 ffe5 	bl	8008eee <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8capacityEv>
 8007f24:	4602      	mov	r2, r0
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	bf8c      	ite	hi
 8007f2c:	2301      	movhi	r3, #1
 8007f2e:	2300      	movls	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d032      	beq.n	8007f9c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x12c>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8007f36:	6838      	ldr	r0, [r7, #0]
 8007f38:	f000 ff80 	bl	8008e3c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	6838      	ldr	r0, [r7, #0]
 8007f40:	f000 ff8c 	bl	8008e5c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8007f44:	4603      	mov	r3, r0
 8007f46:	4622      	mov	r2, r4
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 ffde 	bl	8008f0c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 8007f50:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681c      	ldr	r4, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fb51 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007f62:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007f64:	461a      	mov	r2, r3
 8007f66:	4629      	mov	r1, r5
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fb55 	bl	8008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 8007f80:	461a      	mov	r2, r3
 8007f82:	f000 fb2c 	bl	80085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	441a      	add	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
 8007f9a:	e052      	b.n	8008042 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x1d2>
	    }
	  else if (size() >= __xlen)
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fb9d 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bf94      	ite	ls
 8007faa:	2301      	movls	r3, #1
 8007fac:	2300      	movhi	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x186>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8007fb4:	6838      	ldr	r0, [r7, #0]
 8007fb6:	f000 ff41 	bl	8008e3c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007fba:	4604      	mov	r4, r0
 8007fbc:	6838      	ldr	r0, [r7, #0]
 8007fbe:	f000 ff4d 	bl	8008e5c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff fdd7 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 ffb7 	bl	8008f44 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fddd 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8007fde:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fb0e 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8007fe8:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8007fea:	461a      	mov	r2, r3
 8007fec:	4629      	mov	r1, r5
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 ffc0 	bl	8008f74 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 8007ff4:	e025      	b.n	8008042 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEaSERKS3_+0x1d2>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681c      	ldr	r4, [r3, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fb6c 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8008004:	4603      	mov	r3, r0
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	18e1      	adds	r1, r4, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	4628      	mov	r0, r5
 8008012:	f000 ffbd 	bl	8008f90 <_ZSt4copyIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681c      	ldr	r4, [r3, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb5e 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8008020:	4603      	mov	r3, r0
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fae7 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008036:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8008038:	4632      	mov	r2, r6
 800803a:	4629      	mov	r1, r5
 800803c:	4620      	mov	r0, r4
 800803e:	f000 ffbf 	bl	8008fc0 <_ZSt22__uninitialized_copy_aIPN6tetris15PartTetrisBlockES2_S1_ET0_T_S4_S3_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	441a      	add	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8008050:	687b      	ldr	r3, [r7, #4]
    }
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800805a <_ZZN6tetris12TetrisFigure6RotateEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
	std::for_each(figure.begin(), figure.end(), [&](auto& block)
 800805a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
		{block = prevFigure[row]; row += side; if (row > pow(side, 2)) row = side - ++counter; });
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f103 020c 	add.w	r2, r3, #12
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7ff fede 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800807a:	4602      	mov	r2, r0
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008082:	e883 0003 	stmia.w	r3, {r0, r1}
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	6819      	ldr	r1, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	440a      	add	r2, r1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7f8 f99f 	bl	80003e4 <__aeabi_ui2d>
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f8 f997 	bl	80003e4 <__aeabi_ui2d>
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080be:	f004 f84d 	bl	800c15c <pow>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	2101      	movs	r1, #1
 80080c8:	460e      	mov	r6, r1
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 fc93 	bl	80009f8 <__aeabi_dcmpgt>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <_ZZN6tetris12TetrisFigure6RotateEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x82>
 80080d8:	2300      	movs	r3, #0
 80080da:	461e      	mov	r6, r3
 80080dc:	b2f3      	uxtb	r3, r6
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <_ZZN6tetris12TetrisFigure6RotateEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0xa4>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	3101      	adds	r1, #1
 80080f0:	6019      	str	r1, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	1a52      	subs	r2, r2, r1
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008106 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure6RotateEvEUlRT_E_ET0_SA_SA_SD_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8008106:	b082      	sub	sp, #8
 8008108:	b590      	push	{r4, r7, lr}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
      for (; __first != __last; ++__first)
 8008116:	1d3a      	adds	r2, r7, #4
 8008118:	f107 0308 	add.w	r3, r7, #8
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fd4b 	bl	8007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d011      	beq.n	800814e <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure6RotateEvEUlRT_E_ET0_SA_SA_SD_+0x48>
	__f(*__first);
 800812a:	f107 0308 	add.w	r3, r7, #8
 800812e:	4618      	mov	r0, r3
 8008130:	f000 ff67 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 8008134:	4602      	mov	r2, r0
 8008136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff ff8c 	bl	800805a <_ZZN6tetris12TetrisFigure6RotateEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
      for (; __first != __last; ++__first)
 8008142:	f107 0308 	add.w	r3, r7, #8
 8008146:	4618      	mov	r0, r3
 8008148:	f000 ff4b 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
 800814c:	e7e3      	b.n	8008116 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure6RotateEvEUlRT_E_ET0_SA_SA_SD_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	461c      	mov	r4, r3
 8008152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800815a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008168:	b002      	add	sp, #8
 800816a:	4770      	bx	lr

0800816c <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EbSA_SA_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800816c:	b082      	sub	sp, #8
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af02      	add	r7, sp, #8
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
 8008178:	f107 0118 	add.w	r1, r7, #24
 800817c:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __last == std::find_if_not(__first, __last, __pred); }
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	f107 0318 	add.w	r3, r7, #24
 8008188:	cb0c      	ldmia	r3, {r2, r3}
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 ff43 	bl	8009018 <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_ESA_SA_SA_T0_>
 8008192:	4603      	mov	r3, r0
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	f107 020c 	add.w	r2, r7, #12
 800819a:	463b      	mov	r3, r7
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fc22 	bl	80089e8 <_ZN9__gnu_cxxeqIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80081a4:	4603      	mov	r3, r0
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081b0:	b002      	add	sp, #8
 80081b2:	4770      	bx	lr

080081b4 <_ZSt6all_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EbSA_SA_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 80081b4:	b082      	sub	sp, #8
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af02      	add	r7, sp, #8
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
 80081c0:	f107 0118 	add.w	r1, r7, #24
 80081c4:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __last == std::find_if_not(__first, __last, __pred); }
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	f107 0318 	add.w	r3, r7, #24
 80081d0:	cb0c      	ldmia	r3, {r2, r3}
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 ff41 	bl	800905c <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_ESA_SA_SA_T0_>
 80081da:	4603      	mov	r3, r0
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	f107 020c 	add.w	r2, r7, #12
 80081e2:	463b      	mov	r3, r7
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fbfe 	bl	80089e8 <_ZN9__gnu_cxxeqIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80081ec:	4603      	mov	r3, r0
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081f8:	b002      	add	sp, #8
 80081fa:	4770      	bx	lr

080081fc <_ZSt6any_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EbSA_SA_T0_>:
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 80081fc:	b082      	sub	sp, #8
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af02      	add	r7, sp, #8
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
 8008208:	f107 0110 	add.w	r1, r7, #16
 800820c:	e881 000c 	stmia.w	r1, {r2, r3}
    { return !std::none_of(__first, __last, __pred); }
 8008210:	466a      	mov	r2, sp
 8008212:	f107 0318 	add.w	r3, r7, #24
 8008216:	e893 0003 	ldmia.w	r3, {r0, r1}
 800821a:	e882 0003 	stmia.w	r2, {r0, r1}
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	cb0c      	ldmia	r3, {r2, r3}
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 ff3a 	bl	80090a0 <_ZSt7none_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EbSA_SA_T0_>
 800822c:	4603      	mov	r3, r0
 800822e:	f083 0301 	eor.w	r3, r3, #1
 8008232:	b2db      	uxtb	r3, r3
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800823e:	b002      	add	sp, #8
 8008240:	4770      	bx	lr

08008242 <_ZZN6tetris12TetrisFigure15FillFieldFigureEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
	auto lambd4 = [&](auto& block)
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
		if (block.isFeeled)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d02c      	beq.n	80082ae <_ZZN6tetris12TetrisFigure15FillFieldFigureEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x6c>
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	461a      	mov	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	441a      	add	r2, r3
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	461a      	mov	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
			manager.field[index].isFeeled = true;
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	3308      	adds	r3, #8
 8008288:	68f9      	ldr	r1, [r7, #12]
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fdd3 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 8008290:	4603      	mov	r3, r0
 8008292:	2201      	movs	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
			manager.field[index].color = block.color;
 800829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829c:	3308      	adds	r3, #8
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fdc8 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 80082a6:	4602      	mov	r2, r0
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	6053      	str	r3, [r2, #4]
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
		if (++col == side) { ++row, col = 0; }
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	3201      	adds	r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
		if (++col == side) { ++row, col = 0; }
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bf0c      	ite	eq
 80082c4:	2301      	moveq	r3, #1
 80082c6:	2300      	movne	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <_ZZN6tetris12TetrisFigure15FillFieldFigureEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x9e>
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
		if (++col == side) { ++row, col = 0; }
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	3201      	adds	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
		if (++col == side) { ++row, col = 0; }
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
	};
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure15FillFieldFigureEvEUlRT_E_ET0_SA_SA_SD_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 80082e8:	b082      	sub	sp, #8
 80082ea:	b590      	push	{r4, r7, lr}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
      for (; __first != __last; ++__first)
 80082f8:	1d3a      	adds	r2, r7, #4
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fc5a 	bl	8007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d011      	beq.n	8008330 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure15FillFieldFigureEvEUlRT_E_ET0_SA_SA_SD_+0x48>
	__f(*__first);
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fe76 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 8008316:	4602      	mov	r2, r0
 8008318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff ff8f 	bl	8008242 <_ZZN6tetris12TetrisFigure15FillFieldFigureEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
      for (; __first != __last; ++__first)
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fe5a 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
 800832e:	e7e3      	b.n	80082f8 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure15FillFieldFigureEvEUlRT_E_ET0_SA_SA_SD_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	461c      	mov	r4, r3
 8008334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800833c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800834a:	b002      	add	sp, #8
 800834c:	4770      	bx	lr

0800834e <_ZNSaIN6tetris15PartTetrisBlockEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fecb 	bl	80090f2 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEEC1Ev>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
 8008366:	b5b0      	push	{r4, r5, r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	1d38      	adds	r0, r7, #4
 8008370:	e880 0006 	stmia.w	r0, {r1, r2}
 8008374:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fec3 	bl	8009106 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fece 	bl	8009124 <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE5beginEv>
 8008388:	4604      	mov	r4, r0
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fed4 	bl	800913a <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE3endEv>
 8008392:	4602      	mov	r2, r0
 8008394:	462b      	mov	r3, r5
 8008396:	4621      	mov	r1, r4
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fee0 	bl	800915e <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bdb0      	pop	{r4, r5, r7, pc}

080083a8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f805 	bl	80083be <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80083b4:	4603      	mov	r3, r0
      }
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80083c6:	2301      	movs	r3, #1
      }
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr
	...

080083d4 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj>:
    vector<_Tp, _Alloc>::
 80083d4:	b5b0      	push	{r4, r5, r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fef6 	bl	80091d0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8max_sizeEv>
 80083e4:	4602      	mov	r2, r0
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	4293      	cmp	r3, r2
 80083ea:	bf8c      	ite	hi
 80083ec:	2301      	movhi	r3, #1
 80083ee:	2300      	movls	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80083f6:	483b      	ldr	r0, [pc, #236]	; (80084e4 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0x110>)
 80083f8:	f003 fea3 	bl	800c142 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fef9 	bl	80091f4 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8capacityEv>
 8008402:	4602      	mov	r2, r0
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	4293      	cmp	r3, r2
 8008408:	bf8c      	ite	hi
 800840a:	2301      	movhi	r3, #1
 800840c:	2300      	movls	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d063      	beq.n	80084dc <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0x108>
	  const size_type __old_size = size();
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 ff01 	bl	800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>
 800841a:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800841c:	f7ff ffc4 	bl	80083a8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE15_S_use_relocateEv>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 ff0a 	bl	8009244 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj>
 8008430:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681c      	ldr	r4, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 f935 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8008442:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4629      	mov	r1, r5
 8008448:	4620      	mov	r0, r4
 800844a:	f000 ff0f 	bl	800926c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800844e:	e01f      	b.n	8008490 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 ff1d 	bl	8009294 <_ZSt32__make_move_if_noexcept_iteratorIN6tetris12TetrisFigureESt13move_iteratorIPS1_EET0_PT_>
 800845a:	4604      	mov	r4, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ff17 	bl	8009294 <_ZSt32__make_move_if_noexcept_iteratorIN6tetris12TetrisFigureESt13move_iteratorIPS1_EET0_PT_>
 8008466:	4603      	mov	r3, r0
 8008468:	4622      	mov	r2, r4
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 ff20 	bl	80092b2 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>
 8008472:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681c      	ldr	r4, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f914 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8008484:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008486:	461a      	mov	r2, r3
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f918 	bl	80086c0 <_ZSt8_DestroyIPN6tetris12TetrisFigureES1_EvT_S3_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	109b      	asrs	r3, r3, #2
 80084a2:	4a11      	ldr	r2, [pc, #68]	; (80084e8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE7reserveEj+0x114>)
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
	  _M_deallocate(this->_M_impl._M_start,
 80084a8:	461a      	mov	r2, r3
 80084aa:	f000 f8ec 	bl	8008686 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13_M_deallocateEPS1_j>
	  this->_M_impl._M_start = __tmp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	461a      	mov	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	441a      	add	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6819      	ldr	r1, [r3, #0]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4613      	mov	r3, r2
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	18ca      	adds	r2, r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	609a      	str	r2, [r3, #8]
    }
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bdb0      	pop	{r4, r5, r7, pc}
 80084e4:	0800d2c8 	.word	0x0800d2c8
 80084e8:	f0f0f0f1 	.word	0xf0f0f0f1

080084ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80084ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f0:	b08b      	sub	sp, #44	; 0x2c
 80084f2:	af04      	add	r7, sp, #16
 80084f4:	6178      	str	r0, [r7, #20]
 80084f6:	6139      	str	r1, [r7, #16]
 80084f8:	60fa      	str	r2, [r7, #12]
 80084fa:	60bb      	str	r3, [r7, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	429a      	cmp	r2, r3
 8008506:	d027      	beq.n	8008558 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_+0x6c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008508:	697c      	ldr	r4, [r7, #20]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685d      	ldr	r5, [r3, #4]
 800850e:	6938      	ldr	r0, [r7, #16]
 8008510:	f000 feeb 	bl	80092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008514:	4680      	mov	r8, r0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7fd fb65 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 800851c:	4681      	mov	r9, r0
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f7ff f9f9 	bl	8007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008524:	4606      	mov	r6, r0
 8008526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008528:	f000 fee9 	bl	80092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008530:	f000 feef 	bl	8009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008534:	4603      	mov	r3, r0
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	9600      	str	r6, [sp, #0]
 800853e:	464b      	mov	r3, r9
 8008540:	4642      	mov	r2, r8
 8008542:	4629      	mov	r1, r5
 8008544:	4620      	mov	r0, r4
 8008546:	f000 feee 	bl	8009326 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE9constructIS1_JSt6vectorINS0_15PartTetrisBlockESaIS6_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	605a      	str	r2, [r3, #4]
      }
 8008556:	e020      	b.n	800859a <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE12emplace_backIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvDpOT_+0xae>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008558:	6978      	ldr	r0, [r7, #20]
 800855a:	f000 ff0e 	bl	800937a <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE3endEv>
 800855e:	4606      	mov	r6, r0
 8008560:	6938      	ldr	r0, [r7, #16]
 8008562:	f000 fec2 	bl	80092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008566:	4680      	mov	r8, r0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7fd fb3c 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 800856e:	4681      	mov	r9, r0
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	f7ff f9d0 	bl	8007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008576:	4604      	mov	r4, r0
 8008578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800857a:	f000 fec0 	bl	80092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>
 800857e:	4605      	mov	r5, r0
 8008580:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008582:	f000 fec6 	bl	8009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008586:	4603      	mov	r3, r0
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	9501      	str	r5, [sp, #4]
 800858c:	9400      	str	r4, [sp, #0]
 800858e:	464b      	mov	r3, r9
 8008590:	4642      	mov	r2, r8
 8008592:	4631      	mov	r1, r6
 8008594:	6978      	ldr	r0, [r7, #20]
 8008596:	f000 ff01 	bl	800939c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080085a4 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	609a      	str	r2, [r3, #8]
	{ }
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEED1Ev>:
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 ffbe 	bl	8009578 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE10deallocateERS2_PS1_j>
      }
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 ffb5 	bl	8009596 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockEEvT_S3_>
    }
 800862c:	bf00      	nop
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <_ZNSaIN6tetris12TetrisFigureEEC1Ev>:
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 ffb7 	bl	80095b0 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEEC1Ev>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	605a      	str	r2, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	609a      	str	r2, [r3, #8]
	{ }
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr

08008672 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEED1Ev>:
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
	if (__p)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 ff90 	bl	80095c4 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE10deallocateERS2_PS1_j>
      }
 80086a4:	bf00      	nop
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <_ZSt8_DestroyIPN6tetris12TetrisFigureES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 ff87 	bl	80095e2 <_ZSt8_DestroyIPN6tetris12TetrisFigureEEvT_S3_>
    }
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	10db      	asrs	r3, r3, #3
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f805 	bl	8008710 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8008706:	4603      	mov	r3, r0
      }
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8008718:	2301      	movs	r3, #1
      }
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8008724:	b5b0      	push	{r4, r5, r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80af 	beq.w	8008894 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x170>
	{
	  const size_type __size = size();
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff ffd0 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 800873c:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	10db      	asrs	r3, r3, #3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800874a:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 ff55 	bl	80095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>
 8008752:	4602      	mov	r2, r0
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4293      	cmp	r3, r2
 8008758:	d808      	bhi.n	800876c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x48>
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 ff4e 	bl	80095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>
 8008760:	4602      	mov	r2, r0
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	429a      	cmp	r2, r3
 800876a:	d901      	bls.n	8008770 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x4c>
 800876c:	2301      	movs	r3, #1
 800876e:	e000      	b.n	8008772 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x4e>
 8008770:	2300      	movs	r3, #0
 8008772:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d30f      	bcc.n	800879c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff ff3e 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008788:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800878a:	461a      	mov	r2, r3
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	4620      	mov	r0, r4
 8008790:	f000 ff45 	bl	800961e <_ZSt27__uninitialized_default_n_aIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RSaIT1_E>
 8008794:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800879a:	e07b      	b.n	8008894 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x170>
		_M_check_len(__n, "vector::_M_default_append");
 800879c:	4a3f      	ldr	r2, [pc, #252]	; (800889c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x178>)
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 ff4b 	bl	800963c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc>
 80087a6:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6979      	ldr	r1, [r7, #20]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 ff8c 	bl	80096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>
 80087b2:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80087b4:	f7ff ffa1 	bl	80086fa <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_S_use_relocateEv>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01c      	beq.n	80087f8 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0xd4>
		      std::__uninitialized_default_n_a(__new_start + __size,
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff ff1b 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 80087ce:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80087d0:	461a      	mov	r2, r3
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 ff22 	bl	800961e <_ZSt27__uninitialized_default_n_aIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681c      	ldr	r4, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff ff0d 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 80087ea:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4629      	mov	r1, r5
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 ff7e 	bl	80096f2 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80087f6:	e030      	b.n	800885a <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_M_default_appendEj+0x136>
		  pointer __destroy_from = pointer();
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fefc 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 800880c:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800880e:	461a      	mov	r2, r3
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	4620      	mov	r0, r4
 8008814:	f000 ff03 	bl	800961e <_ZSt27__uninitialized_default_n_aIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681c      	ldr	r4, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fee9 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008832:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4629      	mov	r1, r5
 8008838:	4620      	mov	r0, r4
 800883a:	f000 ff6e 	bl	800971a <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681c      	ldr	r4, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fedb 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 800884e:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008850:	461a      	mov	r2, r3
 8008852:	4629      	mov	r1, r5
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff fedf 	bl	8008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 800886c:	461a      	mov	r2, r3
 800886e:	f7ff feb6 	bl	80085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __new_start;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	4413      	add	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	441a      	add	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	609a      	str	r2, [r3, #8]
    }
 8008894:	bf00      	nop
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bdb0      	pop	{r4, r5, r7, pc}
 800889c:	0800d2d8 	.word	0x0800d2d8

080088a0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	10db      	asrs	r3, r3, #3
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fe9e 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 80088c8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80088ca:	461a      	mov	r2, r3
 80088cc:	4621      	mov	r1, r4
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f7ff fea2 	bl	8008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd90      	pop	{r4, r7, pc}

080088e2 <_ZSt4moveIRSt6vectorIN6tetris12TetrisFigureESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bc80      	pop	{r7}
 80088f4:	4770      	bx	lr

080088f6 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80088f6:	b590      	push	{r4, r7, lr}
 80088f8:	b089      	sub	sp, #36	; 0x24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	f107 031c 	add.w	r3, r7, #28
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f000 ff1e 	bl	800974c <_ZNKSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13get_allocatorEv>
 8008910:	f107 021c 	add.w	r2, r7, #28
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f000 ff27 	bl	800976e <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEC1ERKS2_>
 8008920:	f107 031c 	add.w	r3, r7, #28
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff f86d 	bl	8007a04 <_ZNSaIN6tetris12TetrisFigureEED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f000 ff2b 	bl	800978c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f000 ff24 	bl	800978c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff feb0 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 800894c:	4604      	mov	r4, r0
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff feab 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8008956:	4603      	mov	r3, r0
 8008958:	4619      	mov	r1, r3
 800895a:	4620      	mov	r0, r4
 800895c:	f000 ff34 	bl	80097c8 <_ZSt15__alloc_on_moveISaIN6tetris12TetrisFigureEEEvRT_S4_>
	vector __tmp(get_allocator());
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff f877 	bl	8007a58 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EED1Ev>
      }
 800896a:	bf00      	nop
 800896c:	3724      	adds	r7, #36	; 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}

08008972 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr

080089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr

080089c2 <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_ESA_SA_SA_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 80089c2:	b590      	push	{r4, r7, lr}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 ff08 	bl	80097e4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EENS0_10_Iter_predIS4_EES4_>
 80089d4:	4622      	mov	r2, r4
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 ff16 	bl	800980a <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_>
 80089de:	4603      	mov	r3, r0
    }
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd90      	pop	{r4, r7, pc}

080089e8 <_ZN9__gnu_cxxeqIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff ffdb 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 80089f8:	4603      	mov	r3, r0
 80089fa:	681c      	ldr	r4, [r3, #0]
 80089fc:	6838      	ldr	r0, [r7, #0]
 80089fe:	f7ff ffd6 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008a02:	4603      	mov	r3, r0
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429c      	cmp	r4, r3
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd90      	pop	{r4, r7, pc}

08008a18 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	f107 030c 	add.w	r3, r7, #12
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 ff07 	bl	800983c <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <_ZN9__gnu_cxxmiIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 ff09 	bl	800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	681c      	ldr	r4, [r3, #0]
 8008a4c:	6838      	ldr	r0, [r7, #0]
 8008a4e:	f000 ff04 	bl	800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008a52:	4603      	mov	r3, r0
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	1ae3      	subs	r3, r4, r3
 8008a58:	10db      	asrs	r3, r3, #3
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd90      	pop	{r4, r7, pc}

08008a62 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>:
    vector<_Tp, _Alloc>::
 8008a62:	b590      	push	{r4, r7, lr}
 8008a64:	b087      	sub	sp, #28
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 8008a6e:	1d3a      	adds	r2, r7, #4
 8008a70:	f107 0308 	add.w	r3, r7, #8
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff f89f 	bl	8007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d031      	beq.n	8008ae6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x84>
	  if (__last != end())
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff f888 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	f107 0210 	add.w	r2, r7, #16
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff f890 	bl	8007bba <_ZN9__gnu_cxxneIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff f879 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fede 	bl	800986e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 8008ab2:	f107 0308 	add.w	r3, r7, #8
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff ff79 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	681c      	ldr	r4, [r3, #0]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff f869 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	1d3a      	adds	r2, r7, #4
 8008acc:	f107 0314 	add.w	r3, r7, #20
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fee3 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	4423      	add	r3, r4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff fedd 	bl	80088a0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_M_erase_at_endEPS1_>
      return __first;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
    }
 8008ae8:	4618      	mov	r0, r3
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}

08008af0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
    vector<_Tp, _Alloc>::
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b091      	sub	sp, #68	; 0x44
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
      if (__n != 0)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 812e 	beq.w	8008d62 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x272>
	  if (size_type(this->_M_impl._M_end_of_storage
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	10db      	asrs	r3, r3, #3
	  if (size_type(this->_M_impl._M_end_of_storage
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f200 80a3 	bhi.w	8008c62 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x172>
	      _Temporary_value __tmp(this, __x);
 8008b1c:	f107 0310 	add.w	r3, r7, #16
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	68f9      	ldr	r1, [r7, #12]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fecf 	bl	80098c8 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_valueC1IJRKS1_EEEPS3_DpOT_>
	      value_type& __x_copy = __tmp._M_val();
 8008b2a:	f107 0310 	add.w	r3, r7, #16
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fefc 	bl	800992c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_valEv>
 8008b34:	62f8      	str	r0, [r7, #44]	; 0x2c
	      const size_type __elems_after = end() - __position;
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff f82e 	bl	8007b98 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	f107 0208 	add.w	r2, r7, #8
 8008b44:	f107 031c 	add.w	r3, r7, #28
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fea7 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008b50:	4603      	mov	r3, r0
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
	      pointer __old_finish(this->_M_impl._M_finish);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
	      if (__elems_after > __n)
 8008b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d941      	bls.n	8008be6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0xf6>
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	425b      	negs	r3, r3
 8008b6c:	18d4      	adds	r4, r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685d      	ldr	r5, [r3, #4]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685e      	ldr	r6, [r3, #4]
					      _M_get_Tp_allocator());
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff fd43 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008b7e:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8008b80:	4632      	mov	r2, r6
 8008b82:	4629      	mov	r1, r5
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fedd 	bl	8009944 <_ZSt22__uninitialized_move_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
		  this->_M_impl._M_finish += __n;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	441a      	add	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff06 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	425b      	negs	r3, r3
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	4413      	add	r3, r2
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	f000 fedf 	bl	8009976 <_ZSt13move_backwardIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>
		  std::fill(__position.base(), __position.base() + __n,
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fef6 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	681c      	ldr	r4, [r3, #0]
 8008bc6:	f107 0308 	add.w	r3, r7, #8
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff feef 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4413      	add	r3, r2
 8008bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 fee1 	bl	80099a6 <_ZSt4fillIPN6tetris15PartTetrisBlockES1_EvT_S3_RKT0_>
 8008be4:	e037      	b.n	8008c56 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x166>
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685c      	ldr	r4, [r3, #4]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	1ad5      	subs	r5, r2, r3
						  _M_get_Tp_allocator());
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fd06 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008bf8:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8008bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fee0 	bl	80099c4 <_ZSt24__uninitialized_fill_n_aIPN6tetris15PartTetrisBlockEjS1_S1_ET_S3_T0_RKT1_RSaIT2_E>
 8008c04:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8008c0a:	f107 0308 	add.w	r3, r7, #8
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff fecd 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008c14:	4603      	mov	r3, r0
 8008c16:	681c      	ldr	r4, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685d      	ldr	r5, [r3, #4]
					      _M_get_Tp_allocator());
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fcf0 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008c24:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8008c26:	462a      	mov	r2, r5
 8008c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fe8a 	bl	8009944 <_ZSt22__uninitialized_move_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	441a      	add	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff feb3 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fea8 	bl	80099a6 <_ZSt4fillIPN6tetris15PartTetrisBlockES1_EvT_S3_RKT0_>
	      _Temporary_value __tmp(this, __x);
 8008c56:	f107 0310 	add.w	r3, r7, #16
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fe52 	bl	8009904 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_valueD1Ev>
    }
 8008c60:	e07f      	b.n	8008d62 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x272>
		_M_check_len(__n, "vector::_M_fill_insert");
 8008c62:	4a42      	ldr	r2, [pc, #264]	; (8008d6c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x27c>)
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fce8 	bl	800963c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc>
 8008c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
	      const size_type __elems_before = __position - begin();
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7fe ff82 	bl	8007b78 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>
 8008c74:	4603      	mov	r3, r0
 8008c76:	623b      	str	r3, [r7, #32]
 8008c78:	f107 0220 	add.w	r2, r7, #32
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fe0b 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
	      pointer __new_start(this->_M_allocate(__len));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fd1a 	bl	80096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>
 8008c96:	6378      	str	r0, [r7, #52]	; 0x34
	      pointer __new_finish(__new_start);
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	633b      	str	r3, [r7, #48]	; 0x30
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca2:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fcac 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008cac:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fe86 	bl	80099c4 <_ZSt24__uninitialized_fill_n_aIPN6tetris15PartTetrisBlockEjS1_S1_ET_S3_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 8008cb8:	2300      	movs	r3, #0
 8008cba:	633b      	str	r3, [r7, #48]	; 0x30
		    (this->_M_impl._M_start, __position.base(),
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681c      	ldr	r4, [r3, #0]
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fe72 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff fc97 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008cd6:	4603      	mov	r3, r0
		    (this->_M_impl._M_start, __position.base(),
 8008cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fd1c 	bl	800971a <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
 8008ce2:	6338      	str	r0, [r7, #48]	; 0x30
		  __new_finish += __n;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cea:	4413      	add	r3, r2
 8008cec:	633b      	str	r3, [r7, #48]	; 0x30
		    (__position.base(), this->_M_impl._M_finish,
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fe5b 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	681c      	ldr	r4, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fc7e 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008d08:	4603      	mov	r3, r0
		    (__position.base(), this->_M_impl._M_finish,
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fd03 	bl	800971a <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
 8008d14:	6338      	str	r0, [r7, #48]	; 0x30
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681c      	ldr	r4, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fc6f 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008d26:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f7ff fc73 	bl	8008618 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockES1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 8008d44:	461a      	mov	r2, r3
 8008d46:	f7ff fc4a 	bl	80085de <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __new_start;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4e:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d54:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	609a      	str	r2, [r3, #8]
    }
 8008d62:	bf00      	nop
 8008d64:	3744      	adds	r7, #68	; 0x44
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0800d2f4 	.word	0x0800d2f4

08008d70 <_ZSt4moveIRNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr

08008d84 <_ZNSaIN6tetris15PartTetrisBlockEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fe28 	bl	80099e6 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEEC1ERKS3_>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_Vector_impl_dataC1EOS4_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	605a      	str	r2, [r3, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bc80      	pop	{r7}
 8008de2:	4770      	bx	lr

08008de4 <_ZN9__gnu_cxx14__alloc_traitsISaIN6tetris15PartTetrisBlockEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fe02 	bl	80099fc <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE37select_on_container_copy_constructionERKS2_>
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <_ZNKSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr

08008e14 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fdf6 	bl	8009a16 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fe04 	bl	8009a3a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_M_create_storageEj>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f107 030c 	add.w	r3, r7, #12
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fcf5 	bl	800983c <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	f107 030c 	add.w	r3, r7, #12
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fce4 	bl	800983c <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 fded 	bl	8009a70 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZStneRKSaIN6tetris15PartTetrisBlockEES3_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
      { return false; }
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fceb 	bl	80088a0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE15_M_erase_at_endEPS1_>
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <_ZSt15__alloc_on_copyISaIN6tetris15PartTetrisBlockEEEvRT_RKS3_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8008edc:	461a      	mov	r2, r3
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fdd7 	bl	8009a94 <_ZSt18__do_alloc_on_copyISaIN6tetris15PartTetrisBlockEEEvRT_RKS3_St17integral_constantIbLb0EE>
    }
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	10db      	asrs	r3, r3, #3
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr

08008f0c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fbd3 	bl	80096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>
 8008f24:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fb6b 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8008f2e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff ffa2 	bl	8008e7e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 8008f3a:	697b      	ldr	r3, [r7, #20]
	}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fdaa 	bl	8009aaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_SA_>
 8008f56:	4604      	mov	r4, r0
 8008f58:	68b8      	ldr	r0, [r7, #8]
 8008f5a:	f000 fda6 	bl	8009aaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_SA_>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fdaa 	bl	8009abe <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 8008f6a:	4603      	mov	r3, r0
    }
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd90      	pop	{r4, r7, pc}

08008f74 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fdbc 	bl	8009b00 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZSt4copyIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fdbc 	bl	8009b1a <_ZSt12__miter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	68b8      	ldr	r0, [r7, #8]
 8008fa6:	f000 fdb8 	bl	8009b1a <_ZSt12__miter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8008faa:	4603      	mov	r3, r0
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fdbc 	bl	8009b2e <_ZSt13__copy_move_aILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 8008fb6:	4603      	mov	r3, r0
    }
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd90      	pop	{r4, r7, pc}

08008fc0 <_ZSt22__uninitialized_copy_aIPN6tetris15PartTetrisBlockES2_S1_ET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fdce 	bl	8009b74 <_ZSt18uninitialized_copyIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f103 0208 	add.w	r2, r3, #8
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ff6:	687b      	ldr	r3, [r7, #4]
      }
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_ESA_SA_SA_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 8009018:	b082      	sub	sp, #8
 800901a:	b580      	push	{r7, lr}
 800901c:	b088      	sub	sp, #32
 800901e:	af02      	add	r7, sp, #8
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
 8009024:	f107 0120 	add.w	r1, r7, #32
 8009028:	e881 000c 	stmia.w	r1, {r2, r3}
      return std::__find_if_not(__first, __last,
 800902c:	f107 000c 	add.w	r0, r7, #12
 8009030:	f107 0320 	add.w	r3, r7, #32
 8009034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009036:	f000 fdaf 	bl	8009b98 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EENS0_10_Iter_predIS4_EES4_>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	f107 030c 	add.w	r3, r7, #12
 8009042:	cb0c      	ldmia	r3, {r2, r3}
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fdba 	bl	8009bc0 <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_>
 800904c:	4603      	mov	r3, r0
    }
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009058:	b002      	add	sp, #8
 800905a:	4770      	bx	lr

0800905c <_ZSt11find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_ESA_SA_SA_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800905c:	b082      	sub	sp, #8
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af02      	add	r7, sp, #8
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
 8009068:	f107 0120 	add.w	r1, r7, #32
 800906c:	e881 000c 	stmia.w	r1, {r2, r3}
      return std::__find_if_not(__first, __last,
 8009070:	f107 000c 	add.w	r0, r7, #12
 8009074:	f107 0320 	add.w	r3, r7, #32
 8009078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800907a:	f000 fdc9 	bl	8009c10 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EENS0_10_Iter_predIS4_EES4_>
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	cb0c      	ldmia	r3, {r2, r3}
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fdd4 	bl	8009c38 <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_>
 8009090:	4603      	mov	r3, r0
    }
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909c:	b002      	add	sp, #8
 800909e:	4770      	bx	lr

080090a0 <_ZSt7none_ofIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EbSA_SA_T0_>:
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 80090a0:	b082      	sub	sp, #8
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af02      	add	r7, sp, #8
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
 80090ac:	f107 0118 	add.w	r1, r7, #24
 80090b0:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 80090b4:	466a      	mov	r2, sp
 80090b6:	f107 0320 	add.w	r3, r7, #32
 80090ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090be:	e882 0003 	stmia.w	r2, {r0, r1}
 80090c2:	f107 0318 	add.w	r3, r7, #24
 80090c6:	cb0c      	ldmia	r3, {r2, r3}
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fddc 	bl	8009c88 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_ESA_SA_SA_T0_>
 80090d0:	4603      	mov	r3, r0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	f107 020c 	add.w	r2, r7, #12
 80090d8:	463b      	mov	r3, r7
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fc83 	bl	80089e8 <_ZN9__gnu_cxxeqIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ee:	b002      	add	sp, #8
 80090f0:	4770      	bx	lr

080090f2 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr

08009106 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fc7e 	bl	8009a16 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1ERKS2_>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr

0800913a <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800913a:	b590      	push	{r4, r7, lr}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff ffee 	bl	8009124 <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE5beginEv>
 8009148:	4604      	mov	r4, r0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fdc5 	bl	8009cda <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE4sizeEv>
 8009150:	4603      	mov	r3, r0
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4423      	add	r3, r4
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bd90      	pop	{r4, r7, pc}

0800915e <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800915e:	b590      	push	{r4, r7, lr}
 8009160:	b087      	sub	sp, #28
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	68b8      	ldr	r0, [r7, #8]
 8009170:	f000 fdbe 	bl	8009cf0 <_ZSt8distanceIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8009174:	4603      	mov	r3, r0
 8009176:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8009178:	68fc      	ldr	r4, [r7, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fa41 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 8009182:	4603      	mov	r3, r0
 8009184:	4619      	mov	r1, r3
 8009186:	6978      	ldr	r0, [r7, #20]
 8009188:	f000 fdc6 	bl	8009d18 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_S_check_init_lenEjRKS2_>
 800918c:	4603      	mov	r3, r0
 800918e:	4619      	mov	r1, r3
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fa9a 	bl	80096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>
 8009196:	4602      	mov	r2, r0
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fa27 	bl	8008604 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 80091b6:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80091b8:	4622      	mov	r2, r4
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	68b8      	ldr	r0, [r7, #8]
 80091be:	f000 fdd3 	bl	8009d68 <_ZSt22__uninitialized_copy_aIPKN6tetris15PartTetrisBlockEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 80091c2:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
	}
 80091c8:	bf00      	nop
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd90      	pop	{r4, r7, pc}

080091d0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fdf2 	bl	8009dc4 <_ZNKSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 80091e0:	4603      	mov	r3, r0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fdd2 	bl	8009d8c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_max_sizeERKS2_>
 80091e8:	4603      	mov	r3, r0
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	109b      	asrs	r3, r3, #2
 8009208:	4a03      	ldr	r2, [pc, #12]	; (8009218 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8capacityEv+0x24>)
 800920a:	fb02 f303 	mul.w	r3, r2, r3
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	f0f0f0f1 	.word	0xf0f0f0f1

0800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	109b      	asrs	r3, r3, #2
 8009230:	4a03      	ldr	r2, [pc, #12]	; (8009240 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv+0x24>)
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr
 8009240:	f0f0f0f1 	.word	0xf0f0f0f1

08009244 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d006      	beq.n	8009262 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj+0x1e>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fdbd 	bl	8009dd8 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE8allocateERS2_j>
 800925e:	4603      	mov	r3, r0
 8009260:	e000      	b.n	8009264 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj+0x20>
 8009262:	2300      	movs	r3, #0
      }
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b087      	sub	sp, #28
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800927a:	f88d 4000 	strb.w	r4, [sp]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 fdb6 	bl	8009df6 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800928a:	4603      	mov	r3, r0
      }
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <_ZSt32__make_move_if_noexcept_iteratorIN6tetris12TetrisFigureESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800929c:	f107 030c 	add.w	r3, r7, #12
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fdb9 	bl	8009e1a <_ZNSt13move_iteratorIPN6tetris12TetrisFigureEEC1ES2_>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff ffbd 	bl	8009244 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj>
 80092ca:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff f9ec 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 80092d4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fdaf 	bl	8009e3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris12TetrisFigureEES3_S2_ET0_T_S6_S5_RSaIT1_E>
	      return __result;
 80092e0:	697b      	ldr	r3, [r7, #20]
	}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr

080092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	bc80      	pop	{r7}
 8009324:	4770      	bx	lr

08009326 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE9constructIS1_JSt6vectorINS0_15PartTetrisBlockESaIS6_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af04      	add	r7, sp, #16
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff ffd7 	bl	80092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800933c:	4606      	mov	r6, r0
 800933e:	6838      	ldr	r0, [r7, #0]
 8009340:	f7fc fc51 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8009344:	4680      	mov	r8, r0
 8009346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009348:	f7fe fae5 	bl	8007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800934c:	4604      	mov	r4, r0
 800934e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009350:	f7ff ffd5 	bl	80092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009354:	4605      	mov	r5, r0
 8009356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009358:	f7ff ffdb 	bl	8009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800935c:	4603      	mov	r3, r0
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	9501      	str	r5, [sp, #4]
 8009362:	9400      	str	r4, [sp, #0]
 8009364:	4643      	mov	r3, r8
 8009366:	4632      	mov	r2, r6
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fd78 	bl	8009e60 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE9constructIS2_JSt6vectorINS1_15PartTetrisBlockESaIS6_EE10CoordinateiNS1_6ColorsERNS1_13TetrisManagerEEEEvPT_DpOT0_>
	}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800937a <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	1d1a      	adds	r2, r3, #4
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff faf0 	bl	8008972 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800939c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093a0:	b093      	sub	sp, #76	; 0x4c
 80093a2:	af04      	add	r7, sp, #16
 80093a4:	6178      	str	r0, [r7, #20]
 80093a6:	6139      	str	r1, [r7, #16]
 80093a8:	60fa      	str	r2, [r7, #12]
 80093aa:	60bb      	str	r3, [r7, #8]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80093ac:	4a69      	ldr	r2, [pc, #420]	; (8009554 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1b8>)
 80093ae:	2101      	movs	r1, #1
 80093b0:	6978      	ldr	r0, [r7, #20]
 80093b2:	f000 fd8d 	bl	8009ed0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc>
 80093b6:	6338      	str	r0, [r7, #48]	; 0x30
      pointer __old_start = this->_M_impl._M_start;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pointer __old_finish = this->_M_impl._M_finish;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
      const size_type __elems_before = __position - begin();
 80093c4:	6978      	ldr	r0, [r7, #20]
 80093c6:	f7fe fbac 	bl	8007b22 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE5beginEv>
 80093ca:	4603      	mov	r3, r0
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	f107 021c 	add.w	r2, r7, #28
 80093d2:	f107 0310 	add.w	r3, r7, #16
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fdc1 	bl	8009f60 <_ZN9__gnu_cxxmiIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80093de:	4603      	mov	r3, r0
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __new_start(this->_M_allocate(__len));
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff ff2c 	bl	8009244 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE11_M_allocateEj>
 80093ec:	6238      	str	r0, [r7, #32]
      pointer __new_finish(__new_start);
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
	  _Alloc_traits::construct(this->_M_impl,
 80093f2:	697c      	ldr	r4, [r7, #20]
				   __new_start + __elems_before,
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	4613      	mov	r3, r2
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	189d      	adds	r5, r3, r2
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff ff70 	bl	80092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800940a:	4680      	mov	r8, r0
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f7fc fbea 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8009412:	4681      	mov	r9, r0
 8009414:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009416:	f7fe fa7e 	bl	8007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800941a:	4606      	mov	r6, r0
 800941c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800941e:	f7ff ff6e 	bl	80092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009426:	f7ff ff74 	bl	8009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800942a:	4603      	mov	r3, r0
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	9600      	str	r6, [sp, #0]
 8009434:	464b      	mov	r3, r9
 8009436:	4642      	mov	r2, r8
 8009438:	4629      	mov	r1, r5
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff ff73 	bl	8009326 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE9constructIS1_JSt6vectorINS0_15PartTetrisBlockESaIS6_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009440:	2300      	movs	r3, #0
 8009442:	637b      	str	r3, [r7, #52]	; 0x34
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8009444:	f7fe ffb0 	bl	80083a8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE15_S_use_relocateEv>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d027      	beq.n	800949e <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x102>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800944e:	f107 0310 	add.w	r3, r7, #16
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fd9e 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 8009458:	4603      	mov	r3, r0
 800945a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff f924 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8009464:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	4621      	mov	r1, r4
 800946a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800946c:	f7ff fefe 	bl	800926c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009470:	6378      	str	r0, [r7, #52]	; 0x34
	      ++__new_finish;
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	3344      	adds	r3, #68	; 0x44
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fd89 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 8009482:	4603      	mov	r3, r0
 8009484:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff f90f 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 800948e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009494:	4620      	mov	r0, r4
 8009496:	f7ff fee9 	bl	800926c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800949a:	6378      	str	r0, [r7, #52]	; 0x34
 800949c:	e026      	b.n	80094ec <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x150>
		(__old_start, __position.base(),
 800949e:	f107 0310 	add.w	r3, r7, #16
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fd76 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 80094a8:	4603      	mov	r3, r0
 80094aa:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f8fc 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 80094b4:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80094b6:	6a3a      	ldr	r2, [r7, #32]
 80094b8:	4621      	mov	r1, r4
 80094ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094bc:	f000 fd74 	bl	8009fa8 <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>
 80094c0:	6378      	str	r0, [r7, #52]	; 0x34
	      ++__new_finish;
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	3344      	adds	r3, #68	; 0x44
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
		(__position.base(), __old_finish,
 80094c8:	f107 0310 	add.w	r3, r7, #16
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fd61 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 80094d2:	4603      	mov	r3, r0
 80094d4:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff f8e7 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 80094de:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80094e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fd5f 	bl	8009fa8 <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>
 80094ea:	6378      	str	r0, [r7, #52]	; 0x34
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80094ec:	f7fe ff5c 	bl	80083a8 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE15_S_use_relocateEv>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f083 0301 	eor.w	r3, r3, #1
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d009      	beq.n	8009510 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff f8d4 	bl	80086ac <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800950a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800950c:	f7ff f8d8 	bl	80086c0 <_ZSt8_DestroyIPN6tetris12TetrisFigureES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8009510:	6978      	ldr	r0, [r7, #20]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	109b      	asrs	r3, r3, #2
 800951c:	4a0e      	ldr	r2, [pc, #56]	; (8009558 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE17_M_realloc_insertIJS_INS0_15PartTetrisBlockESaIS5_EE10CoordinateiNS0_6ColorsERNS0_13TetrisManagerEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1bc>)
 800951e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8009522:	461a      	mov	r2, r3
 8009524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009526:	f7ff f8ae 	bl	8008686 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	6a3a      	ldr	r2, [r7, #32]
 800952e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009534:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009538:	4613      	mov	r3, r2
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	461a      	mov	r2, r3
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	441a      	add	r2, r3
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	609a      	str	r2, [r3, #8]
    }
 800954a:	bf00      	nop
 800954c:	373c      	adds	r7, #60	; 0x3c
 800954e:	46bd      	mov	sp, r7
 8009550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009554:	0800d30c 	.word	0x0800d30c
 8009558:	f0f0f0f1 	.word	0xf0f0f0f1

0800955c <_ZNSaIN6tetris12TetrisFigureEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fd43 	bl	8009ff4 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEEC1ERKS3_>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fd3e 	bl	800a00a <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE10deallocateEPS2_j>
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <_ZSt8_DestroyIPN6tetris15PartTetrisBlockEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fd41 	bl	800a02a <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6tetris15PartTetrisBlockEEEvT_S5_>
    }
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEEC1Ev>:
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	bc80      	pop	{r7}
 80095c2:	4770      	bx	lr

080095c4 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fd32 	bl	800a03e <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE10deallocateEPS2_j>
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <_ZSt8_DestroyIPN6tetris12TetrisFigureEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fd38 	bl	800a064 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6tetris12TetrisFigureEEEvT_S5_>
    }
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fbfa 	bl	8008e00 <_ZNKSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE19_M_get_Tp_allocatorEv>
 800960c:	4603      	mov	r3, r0
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fd40 	bl	800a094 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE11_S_max_sizeERKS2_>
 8009614:	4603      	mov	r3, r0
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <_ZSt27__uninitialized_default_n_aIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fd4b 	bl	800a0c8 <_ZSt25__uninitialized_default_nIPN6tetris15PartTetrisBlockEjET_S3_T0_>
 8009632:	4603      	mov	r3, r0
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800963c:	b590      	push	{r4, r7, lr}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff ffd7 	bl	80095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>
 800964e:	4604      	mov	r4, r0
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff f843 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8009656:	4603      	mov	r3, r0
 8009658:	1ae2      	subs	r2, r4, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	bf34      	ite	cc
 8009660:	2301      	movcc	r3, #1
 8009662:	2300      	movcs	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f002 fd69 	bl	800c142 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff f833 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 8009676:	4604      	mov	r4, r0
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff f82f 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 800967e:	4603      	mov	r3, r0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	f107 0208 	add.w	r2, r7, #8
 8009686:	f107 0310 	add.w	r3, r7, #16
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe f92f 	bl	80078f0 <_ZSt3maxIjERKT_S2_S2_>
 8009692:	4603      	mov	r3, r0
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4423      	add	r3, r4
 8009698:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff f81e 	bl	80086dc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE4sizeEv>
 80096a0:	4602      	mov	r2, r0
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d306      	bcc.n	80096b6 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff ffa7 	bl	80095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>
 80096ae:	4602      	mov	r2, r0
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d904      	bls.n	80096c0 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc+0x84>
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff ffa0 	bl	80095fc <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE8max_sizeEv>
 80096bc:	4603      	mov	r3, r0
 80096be:	e000      	b.n	80096c2 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE12_M_check_lenEjPKc+0x86>
 80096c0:	697b      	ldr	r3, [r7, #20]
      }
 80096c2:	4618      	mov	r0, r3
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd90      	pop	{r4, r7, pc}

080096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d006      	beq.n	80096e8 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj+0x1e>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fd02 	bl	800a0e8 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE8allocateERS2_j>
 80096e4:	4603      	mov	r3, r0
 80096e6:	e000      	b.n	80096ea <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj+0x20>
 80096e8:	2300      	movs	r3, #0
      }
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80096f2:	b590      	push	{r4, r7, lr}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af02      	add	r7, sp, #8
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009700:	f88d 4000 	strb.w	r4, [sp]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fcfb 	bl	800a106 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009710:	4603      	mov	r3, r0
      }
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}

0800971a <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800971a:	b590      	push	{r4, r7, lr}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 fcfe 	bl	800a12a <_ZSt32__make_move_if_noexcept_iteratorIN6tetris15PartTetrisBlockESt13move_iteratorIPS1_EET0_PT_>
 800972e:	4604      	mov	r4, r0
 8009730:	68b8      	ldr	r0, [r7, #8]
 8009732:	f000 fcfa 	bl	800a12a <_ZSt32__make_move_if_noexcept_iteratorIN6tetris15PartTetrisBlockESt13move_iteratorIPS1_EET0_PT_>
 8009736:	4601      	mov	r1, r0
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fd03 	bl	800a148 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris15PartTetrisBlockEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009742:	4603      	mov	r3, r0
    }
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	bd90      	pop	{r4, r7, pc}

0800974c <_ZNKSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f000 fb34 	bl	8009dc4 <_ZNKSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>
 800975c:	4603      	mov	r3, r0
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fefb 	bl	800955c <_ZNSaIN6tetris12TetrisFigureEEC1ERKS1_>
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fcf4 	bl	800a16a <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EEC1ERKS2_>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe ff56 	bl	800864c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fcee 	bl	800a188 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  _M_copy_data(__x);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fcea 	bl	800a188 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  __x._M_copy_data(__tmp);
 80097b4:	f107 030c 	add.w	r3, r7, #12
 80097b8:	4619      	mov	r1, r3
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f000 fce4 	bl	800a188 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	}
 80097c0:	bf00      	nop
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <_ZSt15__alloc_on_moveISaIN6tetris12TetrisFigureEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80097d2:	461a      	mov	r2, r3
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fcec 	bl	800a1b4 <_ZSt18__do_alloc_on_moveISaIN6tetris12TetrisFigureEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EENS0_10_Iter_predIS4_EES4_>:
    __pred_iter(_Predicate __pred)
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fced 	bl	800a1ce <_ZSt4moveIRZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 80097f4:	f107 030c 	add.w	r3, r7, #12
 80097f8:	4629      	mov	r1, r5
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fcf1 	bl	800a1e2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EC1ES6_>
 8009800:	bf00      	nop
 8009802:	4620      	mov	r0, r4
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bdb0      	pop	{r4, r5, r7, pc}

0800980a <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800980a:	b5b0      	push	{r4, r5, r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8009816:	7938      	ldrb	r0, [r7, #4]
 8009818:	f000 fcf1 	bl	800a1fe <_ZN9__gnu_cxx5__ops8__negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>
			    std::__iterator_category(__first));
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fcff 	bl	800a224 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__find_if(__first, __last,
 8009826:	462b      	mov	r3, r5
 8009828:	4622      	mov	r2, r4
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fd03 	bl	800a238 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>
 8009832:	4603      	mov	r3, r0
    }
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bdb0      	pop	{r4, r5, r7, pc}

0800983c <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr

0800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	bc80      	pop	{r7}
 800986c:	4770      	bx	lr

0800986e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800986e:	b590      	push	{r4, r7, lr}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fd75 	bl	800a36a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_S9_>
 8009880:	4604      	mov	r4, r0
 8009882:	68b8      	ldr	r0, [r7, #8]
 8009884:	f000 fd71 	bl	800a36a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_S9_>
 8009888:	4603      	mov	r3, r0
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	4619      	mov	r1, r3
 800988e:	4620      	mov	r0, r4
 8009890:	f000 fd75 	bl	800a37e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8009894:	4603      	mov	r3, r0
    }
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	bd90      	pop	{r4, r7, pc}

0800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800989e:	b590      	push	{r4, r7, lr}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff f880 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 80098ae:	4603      	mov	r3, r0
 80098b0:	681c      	ldr	r4, [r3, #0]
 80098b2:	6838      	ldr	r0, [r7, #0]
 80098b4:	f7ff f87b 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 80098b8:	4603      	mov	r3, r0
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	1ae3      	subs	r3, r4, r3
 80098be:	10db      	asrs	r3, r3, #3
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_valueC1IJRKS1_EEEPS3_DpOT_>:
	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
 80098c8:	b5b0      	push	{r4, r5, r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	601a      	str	r2, [r3, #0]
	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461d      	mov	r5, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fd6d 	bl	800a3c0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_ptrEv>
 80098e6:	4604      	mov	r4, r0
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fd74 	bl	800a3d6 <_ZSt7forwardIRKN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS4_E4typeE>
 80098ee:	4603      	mov	r3, r0
 80098f0:	461a      	mov	r2, r3
 80098f2:	4621      	mov	r1, r4
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 fd78 	bl	800a3ea <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  }
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bdb0      	pop	{r4, r5, r7, pc}

08009904 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_valueD1Ev>:
	~_Temporary_value()
 8009904:	b590      	push	{r4, r7, lr}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461c      	mov	r4, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fd54 	bl	800a3c0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_ptrEv>
 8009918:	4603      	mov	r3, r0
 800991a:	4619      	mov	r1, r3
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fd77 	bl	800a410 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE7destroyIS1_EEvRS2_PT_>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	bd90      	pop	{r4, r7, pc}

0800992c <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_valEv>:
	_M_val() { return *_M_ptr(); }
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd43 	bl	800a3c0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_ptrEv>
 800993a:	4603      	mov	r3, r0
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZSt22__uninitialized_move_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fd69 	bl	800a42a <_ZSt18make_move_iteratorIPN6tetris15PartTetrisBlockEESt13move_iteratorIT_ES4_>
 8009958:	4604      	mov	r4, r0
 800995a:	68b8      	ldr	r0, [r7, #8]
 800995c:	f000 fd65 	bl	800a42a <_ZSt18make_move_iteratorIPN6tetris15PartTetrisBlockEESt13move_iteratorIT_ES4_>
 8009960:	4601      	mov	r1, r0
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4620      	mov	r0, r4
 8009968:	f000 fbee 	bl	800a148 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris15PartTetrisBlockEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800996c:	4603      	mov	r3, r0
    }
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	bd90      	pop	{r4, r7, pc}

08009976 <_ZSt13move_backwardIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8009976:	b590      	push	{r4, r7, lr}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 f8c9 	bl	8009b1a <_ZSt12__miter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8009988:	4604      	mov	r4, r0
 800998a:	68b8      	ldr	r0, [r7, #8]
 800998c:	f000 f8c5 	bl	8009b1a <_ZSt12__miter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8009990:	4603      	mov	r3, r0
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	4619      	mov	r1, r3
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fd5c 	bl	800a454 <_ZSt22__copy_move_backward_aILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800999c:	4603      	mov	r3, r0
    }
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd90      	pop	{r4, r7, pc}

080099a6 <_ZSt4fillIPN6tetris15PartTetrisBlockES1_EvT_S3_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fd6f 	bl	800a49a <_ZSt8__fill_aIPN6tetris15PartTetrisBlockES1_EvT_S3_RKT0_>
    }
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <_ZSt24__uninitialized_fill_n_aIPN6tetris15PartTetrisBlockEjS1_S1_ET_S3_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fd6e 	bl	800a4b8 <_ZSt20uninitialized_fill_nIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RKT1_>
 80099dc:	4603      	mov	r3, r0
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr

080099fc <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff f9bb 	bl	8008d84 <_ZNSaIN6tetris15PartTetrisBlockEEC1ERKS1_>
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff f9ae 	bl	8008d84 <_ZNSaIN6tetris15PartTetrisBlockEEC1ERKS1_>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fdba 	bl	80085a4 <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff fe3f 	bl	80096ca <_ZNSt12_Vector_baseIN6tetris15PartTetrisBlockESaIS1_EE11_M_allocateEj>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	441a      	add	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	609a      	str	r2, [r3, #8]
      }
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fd29 	bl	800a4dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8009a8a:	4603      	mov	r3, r0
    }
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <_ZSt18__do_alloc_on_copyISaIN6tetris15PartTetrisBlockEEEvRT_RKS3_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	713a      	strb	r2, [r7, #4]
    { }
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr

08009aaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bc80      	pop	{r7}
 8009abc:	4770      	bx	lr

08009abe <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009abe:	b5b0      	push	{r4, r5, r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fd35 	bl	800a53a <_ZSt12__niter_baseIPKN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	68b8      	ldr	r0, [r7, #8]
 8009ad4:	f000 fd31 	bl	800a53a <_ZSt12__niter_baseIPKN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8009ad8:	4605      	mov	r5, r0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fd3b 	bl	800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fd43 	bl	800a572 <_ZSt14__copy_move_a1ILb0EPKN6tetris15PartTetrisBlockEPS1_ET1_T0_S6_S5_>
 8009aec:	4603      	mov	r3, r0
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fd4e 	bl	800a592 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8009af6:	4603      	mov	r3, r0
    }
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bdb0      	pop	{r4, r5, r7, pc}

08009b00 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fd57 	bl	800a5c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <_ZSt12__miter_baseIPN6tetris15PartTetrisBlockEET_S3_>:
    __miter_base(_Iterator __it)
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bc80      	pop	{r7}
 8009b2c:	4770      	bx	lr

08009b2e <_ZSt13__copy_move_aILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009b2e:	b5b0      	push	{r4, r5, r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fd4a 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8009b40:	4604      	mov	r4, r0
 8009b42:	68b8      	ldr	r0, [r7, #8]
 8009b44:	f000 fd46 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8009b48:	4605      	mov	r5, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fd41 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 8009b52:	4603      	mov	r3, r0
 8009b54:	461a      	mov	r2, r3
 8009b56:	4629      	mov	r1, r5
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fd45 	bl	800a5e8 <_ZSt14__copy_move_a1ILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	1d3b      	adds	r3, r7, #4
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fd4f 	bl	800a608 <_ZSt12__niter_wrapIPN6tetris15PartTetrisBlockEET_RKS3_S3_>
 8009b6a:	4603      	mov	r3, r0
    }
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bdb0      	pop	{r4, r5, r7, pc}

08009b74 <_ZSt18uninitialized_copyIPN6tetris15PartTetrisBlockES2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fd48 	bl	800a61e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN6tetris15PartTetrisBlockES4_EET0_T_S6_S5_>
 8009b8e:	4603      	mov	r3, r0
    }
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EENS0_10_Iter_predIS4_EES4_>:
    __pred_iter(_Predicate __pred)
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fd58 	bl	800a65e <_ZSt4moveIRZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fd5d 	bl	800a672 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EC1ES6_>
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	b590      	push	{r4, r7, lr}
 8009bc4:	b089      	sub	sp, #36	; 0x24
 8009bc6:	af02      	add	r7, sp, #8
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
 8009bcc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009bd0:	e881 000c 	stmia.w	r1, {r2, r3}
      return std::__find_if(__first, __last,
 8009bd4:	f107 000c 	add.w	r0, r7, #12
 8009bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bde:	f000 fd5d 	bl	800a69c <_ZN9__gnu_cxx5__ops8__negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>
			    std::__iterator_category(__first));
 8009be2:	1d3b      	adds	r3, r7, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fb1d 	bl	800a224 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__find_if(__first, __last,
 8009bea:	f88d 4004 	strb.w	r4, [sp, #4]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	f107 030c 	add.w	r3, r7, #12
 8009bf6:	cb0c      	ldmia	r3, {r2, r3}
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fd62 	bl	800a6c4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>
 8009c00:	4603      	mov	r3, r0
    }
 8009c02:	4618      	mov	r0, r3
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009c0c:	b002      	add	sp, #8
 8009c0e:	4770      	bx	lr

08009c10 <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EENS0_10_Iter_predIS4_EES4_>:
    __pred_iter(_Predicate __pred)
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	4638      	mov	r0, r7
 8009c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8009c1e:	463b      	mov	r3, r7
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 fde3 	bl	800a7ec <_ZSt4moveIRZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 8009c26:	4603      	mov	r3, r0
 8009c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fde8 	bl	800a800 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EC1ES6_>
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <_ZSt13__find_if_notIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8009c38:	b082      	sub	sp, #8
 8009c3a:	b590      	push	{r4, r7, lr}
 8009c3c:	b089      	sub	sp, #36	; 0x24
 8009c3e:	af02      	add	r7, sp, #8
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
 8009c44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009c48:	e881 000c 	stmia.w	r1, {r2, r3}
      return std::__find_if(__first, __last,
 8009c4c:	f107 000c 	add.w	r0, r7, #12
 8009c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c56:	f000 fde8 	bl	800a82a <_ZN9__gnu_cxx5__ops8__negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>
			    std::__iterator_category(__first));
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fae1 	bl	800a224 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__find_if(__first, __last,
 8009c62:	f88d 4004 	strb.w	r4, [sp, #4]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	f107 030c 	add.w	r3, r7, #12
 8009c6e:	cb0c      	ldmia	r3, {r2, r3}
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fded 	bl	800a852 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>
 8009c78:	4603      	mov	r3, r0
    }
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009c84:	b002      	add	sp, #8
 8009c86:	4770      	bx	lr

08009c88 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_ESA_SA_SA_T0_>:
    find_if(_InputIterator __first, _InputIterator __last,
 8009c88:	b082      	sub	sp, #8
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b088      	sub	sp, #32
 8009c8e:	af02      	add	r7, sp, #8
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
 8009c94:	f107 0120 	add.w	r1, r7, #32
 8009c98:	e881 000c 	stmia.w	r1, {r2, r3}
      return std::__find_if(__first, __last,
 8009c9c:	f107 0008 	add.w	r0, r7, #8
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	f107 0320 	add.w	r3, r7, #32
 8009ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009caa:	f000 fe66 	bl	800a97a <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EENS0_10_Iter_predIS4_EES4_>
 8009cae:	466a      	mov	r2, sp
 8009cb0:	f107 0310 	add.w	r3, r7, #16
 8009cb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	cb0c      	ldmia	r3, {r2, r3}
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fe74 	bl	800a9b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_>
 8009cca:	4603      	mov	r3, r0
    }
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cd6:	b002      	add	sp, #8
 8009cd8:	4770      	bx	lr

08009cda <_ZNKSt16initializer_listIN6tetris15PartTetrisBlockEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr

08009cf0 <_ZSt8distanceIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009cf0:	b5b0      	push	{r4, r5, r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8009cfa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009cfc:	1d3b      	adds	r3, r7, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fe7d 	bl	800a9fe <_ZSt19__iterator_categoryIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8009d04:	462a      	mov	r2, r5
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 fe82 	bl	800aa12 <_ZSt10__distanceIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8009d0e:	4603      	mov	r3, r0
    }
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bdb0      	pop	{r4, r5, r7, pc}

08009d18 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff f82b 	bl	8008d84 <_ZNSaIN6tetris15PartTetrisBlockEEC1ERKS1_>
 8009d2e:	f107 030c 	add.w	r3, r7, #12
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f9ae 	bl	800a094 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE11_S_max_sizeERKS2_>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	bf8c      	ite	hi
 8009d40:	2301      	movhi	r3, #1
 8009d42:	2300      	movls	r3, #0
 8009d44:	b2dc      	uxtb	r4, r3
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fd fdfd 	bl	800794a <_ZNSaIN6tetris15PartTetrisBlockEED1Ev>
 8009d50:	2c00      	cmp	r4, #0
 8009d52:	d002      	beq.n	8009d5a <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 8009d54:	4803      	ldr	r0, [pc, #12]	; (8009d64 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 8009d56:	f002 f9f4 	bl	800c142 <_ZSt20__throw_length_errorPKc>
	return __n;
 8009d5a:	687b      	ldr	r3, [r7, #4]
      }
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd90      	pop	{r4, r7, pc}
 8009d64:	0800d328 	.word	0x0800d328

08009d68 <_ZSt22__uninitialized_copy_aIPKN6tetris15PartTetrisBlockEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fe58 	bl	800aa30 <_ZSt18uninitialized_copyIPKN6tetris15PartTetrisBlockEPS1_ET0_T_S6_S5_>
 8009d80:	4603      	mov	r3, r0
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009d94:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8009d96:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fe5b 	bl	800aa54 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE8max_sizeERKS2_>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009da2:	f107 0208 	add.w	r2, r7, #8
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fc fcae 	bl	800670e <_ZSt3minIjERKT_S2_S2_>
 8009db2:	4603      	mov	r3, r0
 8009db4:	681b      	ldr	r3, [r3, #0]
      }
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	01e1e1e1 	.word	0x01e1e1e1

08009dc4 <_ZNKSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009de2:	2200      	movs	r2, #0
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fe40 	bl	800aa6c <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE8allocateEjPKv>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 fe4f 	bl	800aaae <_ZSt12__relocate_aIPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>
 8009e10:	4603      	mov	r3, r0
      }
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <_ZNSt13move_iteratorIPN6tetris12TetrisFigureEEC1ES2_>:
      move_iterator(iterator_type __i)
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8009e24:	463b      	mov	r3, r7
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fe5e 	bl	800aae8 <_ZSt4moveIRPN6tetris12TetrisFigureEEONSt16remove_referenceIT_E4typeEOS5_>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris12TetrisFigureEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fe53 	bl	800aafc <_ZSt18uninitialized_copyISt13move_iteratorIPN6tetris12TetrisFigureEES3_ET0_T_S6_S5_>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE9constructIS2_JSt6vectorINS1_15PartTetrisBlockESaIS6_EE10CoordinateiNS1_6ColorsERNS1_13TetrisManagerEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e62:	b08d      	sub	sp, #52	; 0x34
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	6178      	str	r0, [r7, #20]
 8009e68:	6139      	str	r1, [r7, #16]
 8009e6a:	60fa      	str	r2, [r7, #12]
 8009e6c:	60bb      	str	r3, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fa3b 	bl	80092ea <_ZSt7forwardISt6vectorIN6tetris15PartTetrisBlockESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009e74:	4605      	mov	r5, r0
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	f7fb feb5 	bl	8005be6 <_ZSt7forwardI10CoordinateEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	f107 0318 	add.w	r3, r7, #24
 8009e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e86:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e8c:	f7fd fd43 	bl	8007916 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8009e90:	4603      	mov	r3, r0
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461e      	mov	r6, r3
 8009e96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e98:	f7ff fa31 	bl	80092fe <_ZSt7forwardIN6tetris6ColorsEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	607b      	str	r3, [r7, #4]
 8009ea2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ea4:	f7ff fa35 	bl	8009312 <_ZSt7forwardIRN6tetris13TetrisManagerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	4619      	mov	r1, r3
 8009eae:	2044      	movs	r0, #68	; 0x44
 8009eb0:	f7fa fa66 	bl	8004380 <_ZnwjPv>
 8009eb4:	9402      	str	r4, [sp, #8]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	9600      	str	r6, [sp, #0]
 8009ebc:	f107 0318 	add.w	r3, r7, #24
 8009ec0:	cb0c      	ldmia	r3, {r2, r3}
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7fc fdec 	bl	8006aa0 <_ZN6tetris12TetrisFigureC1EOSt6vectorINS_15PartTetrisBlockESaIS2_EE10CoordinatejmRNS_13TetrisManagerE>
 8009ec8:	bf00      	nop
 8009eca:	3724      	adds	r7, #36	; 0x24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ed0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff f977 	bl	80091d0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8max_sizeEv>
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff f999 	bl	800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>
 8009eea:	4603      	mov	r3, r0
 8009eec:	1ae2      	subs	r2, r4, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	bf34      	ite	cc
 8009ef4:	2301      	movcc	r3, #1
 8009ef6:	2300      	movcs	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f002 f91f 	bl	800c142 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff f989 	bl	800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f7ff f985 	bl	800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>
 8009f12:	4603      	mov	r3, r0
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	f107 0208 	add.w	r2, r7, #8
 8009f1a:	f107 0310 	add.w	r3, r7, #16
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fce5 	bl	80078f0 <_ZSt3maxIjERKT_S2_S2_>
 8009f26:	4603      	mov	r3, r0
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4423      	add	r3, r4
 8009f2c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff f974 	bl	800921c <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE4sizeEv>
 8009f34:	4602      	mov	r2, r0
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d306      	bcc.n	8009f4a <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7ff f947 	bl	80091d0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8max_sizeEv>
 8009f42:	4602      	mov	r2, r0
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d904      	bls.n	8009f54 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc+0x84>
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff f940 	bl	80091d0 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE8max_sizeEv>
 8009f50:	4603      	mov	r3, r0
 8009f52:	e000      	b.n	8009f56 <_ZNKSt6vectorIN6tetris12TetrisFigureESaIS1_EE12_M_check_lenEjPKc+0x86>
 8009f54:	697b      	ldr	r3, [r7, #20]
      }
 8009f56:	4618      	mov	r0, r3
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}
	...

08009f60 <_ZN9__gnu_cxxmiIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f812 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 8009f70:	4603      	mov	r3, r0
 8009f72:	681c      	ldr	r4, [r3, #0]
 8009f74:	6838      	ldr	r0, [r7, #0]
 8009f76:	f000 f80d 	bl	8009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1ae3      	subs	r3, r4, r3
 8009f80:	109b      	asrs	r3, r3, #2
 8009f82:	4a03      	ldr	r2, [pc, #12]	; (8009f90 <_ZN9__gnu_cxxmiIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}
 8009f90:	f0f0f0f1 	.word	0xf0f0f0f1

08009f94 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr

08009fa8 <_ZSt34__uninitialized_move_if_noexcept_aIPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff f96c 	bl	8009294 <_ZSt32__make_move_if_noexcept_iteratorIN6tetris12TetrisFigureESt13move_iteratorIPS1_EET0_PT_>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f7ff f968 	bl	8009294 <_ZSt32__make_move_if_noexcept_iteratorIN6tetris12TetrisFigureESt13move_iteratorIPS1_EET0_PT_>
 8009fc4:	4601      	mov	r1, r0
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7ff ff37 	bl	8009e3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris12TetrisFigureEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009fd0:	4603      	mov	r3, r0
    }
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd90      	pop	{r4, r7, pc}

08009fda <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fdb1 	bl	800ab4e <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE7destroyIS2_EEvPT_>
	}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr

0800a00a <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	4619      	mov	r1, r3
 800a01c:	68b8      	ldr	r0, [r7, #8]
 800a01e:	f002 f86e 	bl	800c0fe <_ZdlPvj>
      }
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6tetris15PartTetrisBlockEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr

0800a03e <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	4613      	mov	r3, r2
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4619      	mov	r1, r3
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	f002 f851 	bl	800c0fe <_ZdlPvj>
      }
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6tetris12TetrisFigureEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d00a      	beq.n	800a08c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6tetris12TetrisFigureEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fd75 	bl	800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>
 800a07c:	4603      	mov	r3, r0
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fd7b 	bl	800ab7a <_ZSt8_DestroyIN6tetris12TetrisFigureEEvPT_>
	  for (; __first != __last; ++__first)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3344      	adds	r3, #68	; 0x44
 800a088:	607b      	str	r3, [r7, #4]
 800a08a:	e7f0      	b.n	800a06e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6tetris12TetrisFigureEEEvT_S5_+0xa>
	}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800a09c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a0a0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd74 	bl	800ab90 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE8max_sizeERKS2_>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800a0ac:	f107 0208 	add.w	r2, r7, #8
 800a0b0:	f107 030c 	add.w	r3, r7, #12
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fc fb29 	bl	800670e <_ZSt3minIjERKT_S2_S2_>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	681b      	ldr	r3, [r3, #0]
      }
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <_ZSt25__uninitialized_default_nIPN6tetris15PartTetrisBlockEjET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fd65 	bl	800aba8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN6tetris15PartTetrisBlockEjEET_S5_T0_>
 800a0de:	4603      	mov	r3, r0
    }
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fd73 	bl	800abe2 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE8allocateEjPKv>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fd7f 	bl	800ac1e <_ZSt12__relocate_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
 800a120:	4603      	mov	r3, r0
      }
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <_ZSt32__make_move_if_noexcept_iteratorIN6tetris15PartTetrisBlockESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a132:	f107 030c 	add.w	r3, r7, #12
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fd8d 	bl	800ac58 <_ZNSt13move_iteratorIPN6tetris15PartTetrisBlockEEC1ES2_>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN6tetris15PartTetrisBlockEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 fd8e 	bl	800ac7c <_ZSt18uninitialized_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES3_ET0_T_S6_S5_>
 800a160:	4603      	mov	r3, r0
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fd91 	bl	800aca0 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implC1ERKS2_>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	609a      	str	r2, [r3, #8]
	}
 800a1aa:	bf00      	nop
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc80      	pop	{r7}
 800a1b2:	4770      	bx	lr

0800a1b4 <_ZSt18__do_alloc_on_moveISaIN6tetris12TetrisFigureEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f000 fd7f 	bl	800acc4 <_ZSt4moveIRSaIN6tetris12TetrisFigureEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <_ZSt4moveIRZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr

0800a1e2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EC1ES6_>:
      _Iter_pred(_Predicate __pred)
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff ffed 	bl	800a1ce <_ZSt4moveIRZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
      { }
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <_ZN9__gnu_cxx5__ops8__negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800a1fe:	b5b0      	push	{r4, r5, r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a206:	1d3b      	adds	r3, r7, #4
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ffe0 	bl	800a1ce <_ZSt4moveIRZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a20e:	f107 030c 	add.w	r3, r7, #12
 800a212:	4629      	mov	r1, r5
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fd5f 	bl	800acd8 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EC1ES6_>
 800a21a:	bf00      	nop
 800a21c:	4620      	mov	r0, r4
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bdb0      	pop	{r4, r5, r7, pc}

0800a224 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
    __iterator_category(const _Iter&)
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800a22c:	bf00      	nop
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr

0800a238 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	713a      	strb	r2, [r7, #4]
 800a244:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800a246:	f107 020c 	add.w	r2, r7, #12
 800a24a:	f107 0308 	add.w	r3, r7, #8
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fb24 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a256:	4603      	mov	r3, r0
 800a258:	109b      	asrs	r3, r3, #2
 800a25a:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd3f      	ble.n	800a2e2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xaa>
	  if (__pred(__first))
 800a262:	1d3b      	adds	r3, r7, #4
 800a264:	68f9      	ldr	r1, [r7, #12]
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fd50 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x3e>
	    return __first;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	e075      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe feb1 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a280:	1d3b      	adds	r3, r7, #4
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fd41 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	e066      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a294:	f107 030c 	add.w	r3, r7, #12
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fea2 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a29e:	1d3b      	adds	r3, r7, #4
 800a2a0:	68f9      	ldr	r1, [r7, #12]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fd32 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x7a>
	    return __first;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	e057      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a2b2:	f107 030c 	add.w	r3, r7, #12
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fe93 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a2bc:	1d3b      	adds	r3, r7, #4
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fd23 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x98>
	    return __first;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	e048      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fe84 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e7bc      	b.n	800a25c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x24>
      switch (__last - __first)
 800a2e2:	f107 020c 	add.w	r2, r7, #12
 800a2e6:	f107 0308 	add.w	r3, r7, #8
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fad6 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d006      	beq.n	800a306 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xce>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	dc31      	bgt.n	800a360 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x128>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d020      	beq.n	800a342 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x10a>
 800a300:	2b02      	cmp	r3, #2
 800a302:	d00f      	beq.n	800a324 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xec>
 800a304:	e02c      	b.n	800a360 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800a306:	1d3b      	adds	r3, r7, #4
 800a308:	68f9      	ldr	r1, [r7, #12]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fcfe 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	e023      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fe5f 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a324:	1d3b      	adds	r3, r7, #4
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fcef 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	e014      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe fe50 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a342:	1d3b      	adds	r3, r7, #4
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fce0 	bl	800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	e005      	b.n	800a362 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_13TetrisManager14EraseFilledRowEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800a356:	f107 030c 	add.w	r3, r7, #12
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fe41 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 800a360:	68bb      	ldr	r3, [r7, #8]
    }
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr

0800a37e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a37e:	b5b0      	push	{r4, r5, r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f8e3 	bl	800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800a390:	4604      	mov	r4, r0
 800a392:	68b8      	ldr	r0, [r7, #8]
 800a394:	f000 f8df 	bl	800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800a398:	4605      	mov	r5, r0
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f8db 	bl	800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 fcc7 	bl	800ad3a <_ZSt14__copy_move_a1ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8ee 	bl	800a592 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800a3b6:	4603      	mov	r3, r0
    }
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c0 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EE16_Temporary_value6_M_ptrEv>:
	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bc80      	pop	{r7}
 800a3d4:	4770      	bx	lr

0800a3d6 <_ZSt7forwardIRKN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bc80      	pop	{r7}
 800a3e8:	4770      	bx	lr

0800a3ea <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff ffed 	bl	800a3d6 <_ZSt7forwardIRKN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fca9 	bl	800ad5a <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fcb5 	bl	800ad8c <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE7destroyIS2_EEvPT_>
	}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <_ZSt18make_move_iteratorIPN6tetris15PartTetrisBlockEESt13move_iteratorIT_ES4_>:
    make_move_iterator(_Iterator __i)
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fcb3 	bl	800ada0 <_ZSt4moveIRPN6tetris15PartTetrisBlockEEONSt16remove_referenceIT_E4typeEOS5_>
 800a43a:	4603      	mov	r3, r0
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	f107 030c 	add.w	r3, r7, #12
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fc07 	bl	800ac58 <_ZNSt13move_iteratorIPN6tetris15PartTetrisBlockEEC1ES2_>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZSt22__copy_move_backward_aILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800a454:	b5b0      	push	{r4, r5, r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 f8b7 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800a466:	4604      	mov	r4, r0
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f000 f8b3 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800a46e:	4605      	mov	r5, r0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 f8ae 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	4629      	mov	r1, r5
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 fc98 	bl	800adb4 <_ZSt23__copy_move_backward_a1ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800a484:	4602      	mov	r2, r0
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f8bc 	bl	800a608 <_ZSt12__niter_wrapIPN6tetris15PartTetrisBlockEET_RKS3_S3_>
 800a490:	4603      	mov	r3, r0
    }
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bdb0      	pop	{r4, r5, r7, pc}

0800a49a <_ZSt8__fill_aIPN6tetris15PartTetrisBlockES1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fc92 	bl	800add4 <_ZSt9__fill_a1IPN6tetris15PartTetrisBlockES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <_ZSt20uninitialized_fill_nIPN6tetris15PartTetrisBlockEjS1_ET_S3_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	68b9      	ldr	r1, [r7, #8]
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fc9a 	bl	800ae06 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN6tetris15PartTetrisBlockEjS3_EET_S5_T0_RKT1_>
 800a4d2:	4603      	mov	r3, r0
    }
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a4ec:	f107 0208 	add.w	r2, r7, #8
 800a4f0:	f107 030c 	add.w	r3, r7, #12
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fca4 	bl	800ae44 <_ZN9__gnu_cxxneIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d016      	beq.n	800a530 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a502:	6978      	ldr	r0, [r7, #20]
 800a504:	f000 fcc6 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800a508:	4604      	mov	r4, r0
 800a50a:	f107 030c 	add.w	r3, r7, #12
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fcca 	bl	800aea8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 800a514:	4603      	mov	r3, r0
 800a516:	4619      	mov	r1, r3
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 fcd0 	bl	800aebe <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a51e:	f107 030c 	add.w	r3, r7, #12
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fca6 	bl	800ae74 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	3308      	adds	r3, #8
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	e7dd      	b.n	800a4ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x10>
	      return __cur;
 800a530:	697b      	ldr	r3, [r7, #20]
	}
 800a532:	4618      	mov	r0, r3
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	bd90      	pop	{r4, r7, pc}

0800a53a <_ZSt12__niter_baseIPKN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800a542:	1d3b      	adds	r3, r7, #4
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff f988 	bl	800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800a55e:	1d3b      	adds	r3, r7, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fa24 	bl	80089ae <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 800a566:	4603      	mov	r3, r0
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <_ZSt14__copy_move_a1ILb0EPKN6tetris15PartTetrisBlockEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fcb3 	bl	800aeee <_ZSt14__copy_move_a2ILb0EPKN6tetris15PartTetrisBlockEPS1_ET1_T0_S6_S5_>
 800a588:	4603      	mov	r3, r0
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff ffda 	bl	800a556 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	10db      	asrs	r3, r3, #3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	1d3b      	adds	r3, r7, #4
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fd fbc6 	bl	8007d42 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEplEi>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>:
    __niter_base(_Iterator __it)
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <_ZSt14__copy_move_a1ILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fc88 	bl	800af0e <_ZSt14__copy_move_a2ILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800a5fe:	4603      	mov	r3, r0
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <_ZSt12__niter_wrapIPN6tetris15PartTetrisBlockEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN6tetris15PartTetrisBlockES4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	429a      	cmp	r2, r3
 800a634:	d00e      	beq.n	800a654 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN6tetris15PartTetrisBlockES4_EET0_T_S6_S5_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a636:	6978      	ldr	r0, [r7, #20]
 800a638:	f000 fc2c 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800a63c:	4603      	mov	r3, r0
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fc74 	bl	800af2e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3308      	adds	r3, #8
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	3308      	adds	r3, #8
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	e7ec      	b.n	800a62e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN6tetris15PartTetrisBlockES4_EET0_T_S6_S5_+0x10>
	      return __cur;
 800a654:	697b      	ldr	r3, [r7, #20]
	}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <_ZSt4moveIRZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EC1ES6_>:
      _Iter_pred(_Predicate __pred)
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	4638      	mov	r0, r7
 800a67c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a680:	463b      	mov	r3, r7
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff ffeb 	bl	800a65e <_ZSt4moveIRZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a688:	4602      	mov	r2, r0
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a68e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <_ZN9__gnu_cxx5__ops8__negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff ffd6 	bl	800a65e <_ZSt4moveIRZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 fc51 	bl	800af5e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EC1ES6_>
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
 800a6d0:	f107 0118 	add.w	r1, r7, #24
 800a6d4:	e881 000c 	stmia.w	r1, {r2, r3}
	__trip_count = (__last - __first) >> 2;
 800a6d8:	1d3a      	adds	r2, r7, #4
 800a6da:	463b      	mov	r3, r7
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff f8dd 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	109b      	asrs	r3, r3, #2
 800a6e8:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd3b      	ble.n	800a768 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	f107 0018 	add.w	r0, r7, #24
 800a6f6:	f000 fc73 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x40>
	    return __first;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	e06c      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fc6b 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	f107 0018 	add.w	r0, r7, #24
 800a712:	f000 fc65 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	e05e      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a720:	1d3b      	adds	r3, r7, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fc5d 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	f107 0018 	add.w	r0, r7, #24
 800a72e:	f000 fc57 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x78>
	    return __first;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	e050      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe fc4f 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	f107 0018 	add.w	r0, r7, #24
 800a74a:	f000 fc49 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	e042      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a758:	1d3b      	adds	r3, r7, #4
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fc41 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3b01      	subs	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	e7c0      	b.n	800a6ea <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800a768:	1d3a      	adds	r2, r7, #4
 800a76a:	463b      	mov	r3, r7
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff f895 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a774:	4603      	mov	r3, r0
 800a776:	2b03      	cmp	r3, #3
 800a778:	d006      	beq.n	800a788 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xc4>
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	dc2e      	bgt.n	800a7dc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d01e      	beq.n	800a7c0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xfc>
 800a782:	2b02      	cmp	r3, #2
 800a784:	d00e      	beq.n	800a7a4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xe0>
 800a786:	e029      	b.n	800a7dc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
	  if (__pred(__first))
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	f107 0018 	add.w	r0, r7, #24
 800a78e:	f000 fc27 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xd8>
	    return __first;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	e020      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a79c:	1d3b      	adds	r3, r7, #4
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fc1f 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	f107 0018 	add.w	r0, r7, #24
 800a7aa:	f000 fc19 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xf4>
	    return __first;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	e012      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a7b8:	1d3b      	adds	r3, r7, #4
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fc11 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	f107 0018 	add.w	r0, r7, #24
 800a7c6:	f000 fc0b 	bl	800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x110>
	    return __first;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	e004      	b.n	800a7de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a7d4:	1d3b      	adds	r3, r7, #4
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fe fc03 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 800a7dc:	683b      	ldr	r3, [r7, #0]
    }
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7e8:	b002      	add	sp, #8
 800a7ea:	4770      	bx	lr

0800a7ec <_ZSt4moveIRZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bc80      	pop	{r7}
 800a7fe:	4770      	bx	lr

0800a800 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EC1ES6_>:
      _Iter_pred(_Predicate __pred)
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	4638      	mov	r0, r7
 800a80a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a80e:	463b      	mov	r3, r7
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff ffeb 	bl	800a7ec <_ZSt4moveIRZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a816:	4602      	mov	r2, r0
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a81c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <_ZN9__gnu_cxx5__ops8__negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EENS0_12_Iter_negateIS4_EENS0_10_Iter_predIS4_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	4638      	mov	r0, r7
 800a834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a838:	463b      	mov	r3, r7
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff ffd6 	bl	800a7ec <_ZSt4moveIRZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a840:	4603      	mov	r3, r0
 800a842:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fbe2 	bl	800b00e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EC1ES6_>
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a852:	b082      	sub	sp, #8
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	f107 0118 	add.w	r1, r7, #24
 800a862:	e881 000c 	stmia.w	r1, {r2, r3}
	__trip_count = (__last - __first) >> 2;
 800a866:	1d3a      	adds	r2, r7, #4
 800a868:	463b      	mov	r3, r7
 800a86a:	4611      	mov	r1, r2
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff f816 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a872:	4603      	mov	r3, r0
 800a874:	109b      	asrs	r3, r3, #2
 800a876:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd3b      	ble.n	800a8f6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	f107 0018 	add.w	r0, r7, #24
 800a884:	f000 fbfd 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x40>
	    return __first;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	e06c      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a892:	1d3b      	adds	r3, r7, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe fba4 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	f107 0018 	add.w	r0, r7, #24
 800a8a0:	f000 fbef 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	e05e      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a8ae:	1d3b      	adds	r3, r7, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fb96 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	f107 0018 	add.w	r0, r7, #24
 800a8bc:	f000 fbe1 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x78>
	    return __first;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	e050      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a8ca:	1d3b      	adds	r3, r7, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fb88 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	f107 0018 	add.w	r0, r7, #24
 800a8d8:	f000 fbd3 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	e042      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a8e6:	1d3b      	adds	r3, r7, #4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fb7a 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	e7c0      	b.n	800a878 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800a8f6:	1d3a      	adds	r2, r7, #4
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe ffce 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a902:	4603      	mov	r3, r0
 800a904:	2b03      	cmp	r3, #3
 800a906:	d006      	beq.n	800a916 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xc4>
 800a908:	2b03      	cmp	r3, #3
 800a90a:	dc2e      	bgt.n	800a96a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d01e      	beq.n	800a94e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xfc>
 800a910:	2b02      	cmp	r3, #2
 800a912:	d00e      	beq.n	800a932 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xe0>
 800a914:	e029      	b.n	800a96a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
	  if (__pred(__first))
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	f107 0018 	add.w	r0, r7, #24
 800a91c:	f000 fbb1 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xd8>
	    return __first;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	e020      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fb58 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	f107 0018 	add.w	r0, r7, #24
 800a938:	f000 fba3 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xf4>
	    return __first;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	e012      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a946:	1d3b      	adds	r3, r7, #4
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fb4a 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	f107 0018 	add.w	r0, r7, #24
 800a954:	f000 fb95 	bl	800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x110>
	    return __first;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	e004      	b.n	800a96c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops12_Iter_negateIZNS2_12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800a962:	1d3b      	adds	r3, r7, #4
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe fb3c 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 800a96a:	683b      	ldr	r3, [r7, #0]
    }
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a976:	b002      	add	sp, #8
 800a978:	4770      	bx	lr

0800a97a <_ZN9__gnu_cxx5__ops11__pred_iterIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EENS0_10_Iter_predIS4_EES4_>:
    __pred_iter(_Predicate __pred)
 800a97a:	b084      	sub	sp, #16
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af02      	add	r7, sp, #8
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	f107 0014 	add.w	r0, r7, #20
 800a988:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fb8d 	bl	800b0b0 <_ZSt4moveIRZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800a996:	4603      	mov	r3, r0
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	9200      	str	r2, [sp, #0]
 800a99c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fb90 	bl	800b0c4 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EC1ES6_>
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9ae:	b004      	add	sp, #16
 800a9b0:	4770      	bx	lr

0800a9b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af04      	add	r7, sp, #16
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
 800a9be:	f107 0118 	add.w	r1, r7, #24
 800a9c2:	e881 000c 	stmia.w	r1, {r2, r3}
		       std::__iterator_category(__first));
 800a9c6:	1d3b      	adds	r3, r7, #4
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fc2b 	bl	800a224 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return __find_if(__first, __last, __pred,
 800a9ce:	f88d 4008 	strb.w	r4, [sp, #8]
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f107 0320 	add.w	r3, r7, #32
 800a9d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800a9e0:	f107 0318 	add.w	r3, r7, #24
 800a9e4:	cb0c      	ldmia	r3, {r2, r3}
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fb88 	bl	800b0fe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>
 800a9ee:	4603      	mov	r3, r0
    }
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a9fa:	b002      	add	sp, #8
 800a9fc:	4770      	bx	lr

0800a9fe <_ZSt19__iterator_categoryIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800aa06:	bf00      	nop
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <_ZSt10__distanceIPKN6tetris15PartTetrisBlockEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	10db      	asrs	r3, r3, #3
    }
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bc80      	pop	{r7}
 800aa2e:	4770      	bx	lr

0800aa30 <_ZSt18uninitialized_copyIPKN6tetris15PartTetrisBlockEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fbee 	bl	800b226 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN6tetris15PartTetrisBlockEPS3_EET0_T_S8_S7_>
 800aa4a:	4603      	mov	r3, r0
    }
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fc02 	bl	800b266 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE8max_sizeEv>
 800aa62:	4603      	mov	r3, r0
      }
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 fc01 	bl	800b280 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE11_M_max_sizeEv>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bf8c      	ite	hi
 800aa86:	2301      	movhi	r3, #1
 800aa88:	2300      	movls	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800aa90:	f001 fb54 	bl	800c13c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	4613      	mov	r3, r2
 800aa98:	011b      	lsls	r3, r3, #4
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 fb2f 	bl	800c102 <_Znwj>
 800aaa4:	4603      	mov	r3, r0
      }
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <_ZSt12__relocate_aIPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800aaae:	b5b0      	push	{r4, r5, r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
 800aaba:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fbeb 	bl	800b298 <_ZSt12__niter_baseIPN6tetris12TetrisFigureEET_S3_>
 800aac2:	4604      	mov	r4, r0
 800aac4:	68b8      	ldr	r0, [r7, #8]
 800aac6:	f000 fbe7 	bl	800b298 <_ZSt12__niter_baseIPN6tetris12TetrisFigureEET_S3_>
 800aaca:	4605      	mov	r5, r0
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fbe3 	bl	800b298 <_ZSt12__niter_baseIPN6tetris12TetrisFigureEET_S3_>
 800aad2:	4602      	mov	r2, r0
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	4629      	mov	r1, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fbe7 	bl	800b2ac <_ZSt14__relocate_a_1IPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>
 800aade:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bdb0      	pop	{r4, r5, r7, pc}

0800aae8 <_ZSt4moveIRPN6tetris12TetrisFigureEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bc80      	pop	{r7}
 800aafa:	4770      	bx	lr

0800aafc <_ZSt18uninitialized_copyISt13move_iteratorIPN6tetris12TetrisFigureEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 fbf1 	bl	800b2f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris12TetrisFigureEES5_EET0_T_S8_S7_>
 800ab16:	4603      	mov	r3, r0
    }
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <_ZN6tetris12TetrisFigureD1Ev>:

private:
	std::vector<TetrisFigure> myFigure;
};

struct TetrisFigure
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3318      	adds	r3, #24
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fc ff3e 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	330c      	adds	r3, #12
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fc ff39 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fc ff35 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800ab58:	6838      	ldr	r0, [r7, #0]
 800ab5a:	f7ff ffe1 	bl	800ab20 <_ZN6tetris12TetrisFigureD1Ev>
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bc80      	pop	{r7}
 800ab78:	4770      	bx	lr

0800ab7a <_ZSt8_DestroyIN6tetris12TetrisFigureEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff ffcc 	bl	800ab20 <_ZN6tetris12TetrisFigureD1Ev>
    }
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fbdc 	bl	800b356 <_ZNK9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE8max_sizeEv>
 800ab9e:	4603      	mov	r3, r0
      }
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN6tetris15PartTetrisBlockEjEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, (void) ++__cur)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00d      	beq.n	800abd8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN6tetris15PartTetrisBlockEjEET_S5_T0_+0x30>
		std::_Construct(std::__addressof(*__cur));
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 f969 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800abc2:	4603      	mov	r3, r0
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fbd2 	bl	800b36e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	3b01      	subs	r3, #1
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3308      	adds	r3, #8
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	e7ee      	b.n	800abb6 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN6tetris15PartTetrisBlockEjEET_S5_T0_+0xe>
	      return __cur;
 800abd8:	68fb      	ldr	r3, [r7, #12]
	}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fbd1 	bl	800b396 <_ZNK9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE11_M_max_sizeEv>
 800abf4:	4602      	mov	r2, r0
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	bf8c      	ite	hi
 800abfc:	2301      	movhi	r3, #1
 800abfe:	2300      	movls	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac06:	f001 fa99 	bl	800c13c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f001 fa77 	bl	800c102 <_Znwj>
 800ac14:	4603      	mov	r3, r0
      }
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <_ZSt12__relocate_aIPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ac1e:	b5b0      	push	{r4, r5, r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fcd1 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800ac32:	4604      	mov	r4, r0
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7ff fccd 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff fcc9 	bl	800a5d4 <_ZSt12__niter_baseIPN6tetris15PartTetrisBlockEET_S3_>
 800ac42:	4602      	mov	r2, r0
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	4629      	mov	r1, r5
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fbaf 	bl	800b3ac <_ZSt14__relocate_a_1IPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>
 800ac4e:	4603      	mov	r3, r0
    }
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bdb0      	pop	{r4, r5, r7, pc}

0800ac58 <_ZNSt13move_iteratorIPN6tetris15PartTetrisBlockEEC1ES2_>:
      move_iterator(iterator_type __i)
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800ac62:	463b      	mov	r3, r7
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f89b 	bl	800ada0 <_ZSt4moveIRPN6tetris15PartTetrisBlockEEONSt16remove_referenceIT_E4typeEOS5_>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <_ZSt18uninitialized_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fbb1 	bl	800b3f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES5_EET0_T_S8_S7_>
 800ac96:	4603      	mov	r3, r0
    }
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fe fc55 	bl	800955c <_ZNSaIN6tetris12TetrisFigureEEC1ERKS1_>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fd fcc9 	bl	800864c <_ZNSt12_Vector_baseIN6tetris12TetrisFigureESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <_ZSt4moveIRSaIN6tetris12TetrisFigureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4618      	mov	r0, r3
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bc80      	pop	{r7}
 800acd6:	4770      	bx	lr

0800acd8 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EC1ES6_>:
      _Iter_negate(_Predicate __pred)
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800ace2:	463b      	mov	r3, r7
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fa72 	bl	800a1ce <_ZSt4moveIRZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
      { }
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <_ZZN6tetris13TetrisManager14EraseFilledRowEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
		if (std::all_of(itBeg, itEnd, [](auto& block)
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
			{return block.isFeeled; }))
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bc80      	pop	{r7}
 800ad0a:	4770      	bx	lr

0800ad0c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris13TetrisManager14EraseFilledRowEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>:
	operator()(_Iterator __it)
 800ad0c:	b590      	push	{r4, r7, lr}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800ad16:	687c      	ldr	r4, [r7, #4]
 800ad18:	463b      	mov	r3, r7
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe f971 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	4619      	mov	r1, r3
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7ff ffe5 	bl	800acf4 <_ZZN6tetris13TetrisManager14EraseFilledRowEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f083 0301 	eor.w	r3, r3, #1
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd90      	pop	{r4, r7, pc}

0800ad3a <_ZSt14__copy_move_a1ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fb83 	bl	800b456 <_ZSt14__copy_move_a2ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800ad50:	4603      	mov	r3, r0
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ad5a:	b590      	push	{r4, r7, lr}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fb35 	bl	800a3d6 <_ZSt7forwardIRKN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4619      	mov	r1, r3
 800ad72:	2008      	movs	r0, #8
 800ad74:	f7f9 fb04 	bl	8004380 <_ZnwjPv>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad80:	e883 0003 	stmia.w	r3, {r0, r1}
 800ad84:	bf00      	nop
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd90      	pop	{r4, r7, pc}

0800ad8c <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr

0800ada0 <_ZSt4moveIRPN6tetris15PartTetrisBlockEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4618      	mov	r0, r3
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	bc80      	pop	{r7}
 800adb2:	4770      	bx	lr

0800adb4 <_ZSt23__copy_move_backward_a1ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 fb56 	bl	800b476 <_ZSt23__copy_move_backward_a2ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>
 800adca:	4603      	mov	r3, r0
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <_ZSt9__fill_a1IPN6tetris15PartTetrisBlockES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d009      	beq.n	800adfc <_ZSt9__fill_a1IPN6tetris15PartTetrisBlockES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x28>
	*__first = __value;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adf0:	e883 0003 	stmia.w	r3, {r0, r1}
      for (; __first != __last; ++__first)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3308      	adds	r3, #8
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e7f1      	b.n	800ade0 <_ZSt9__fill_a1IPN6tetris15PartTetrisBlockES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0xc>
    }
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr

0800ae06 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN6tetris15PartTetrisBlockEjS3_EET_S5_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b086      	sub	sp, #24
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, (void) ++__cur)
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00e      	beq.n	800ae3a <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN6tetris15PartTetrisBlockEjS3_EET_S5_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f000 f839 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800ae22:	4603      	mov	r3, r0
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 f849 	bl	800aebe <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRKS1_EEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	60bb      	str	r3, [r7, #8]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	3308      	adds	r3, #8
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e7ed      	b.n	800ae16 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN6tetris15PartTetrisBlockEjS3_EET_S5_T0_RKT1_+0x10>
	      return __cur;
 800ae3a:	697b      	ldr	r3, [r7, #20]
	}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <_ZN9__gnu_cxxneIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fe fd03 	bl	800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 800ae54:	4603      	mov	r3, r0
 800ae56:	681c      	ldr	r4, [r3, #0]
 800ae58:	6838      	ldr	r0, [r7, #0]
 800ae5a:	f7fe fcfe 	bl	800985a <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEE4baseEv>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429c      	cmp	r4, r3
 800ae64:	bf14      	ite	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	2300      	moveq	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd90      	pop	{r4, r7, pc}

0800ae74 <_ZN9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f103 0208 	add.w	r2, r3, #8
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	601a      	str	r2, [r3, #0]
	return *this;
 800ae88:	687b      	ldr	r3, [r7, #4]
      }
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr

0800aebe <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800aebe:	b590      	push	{r4, r7, lr}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f7ff fa84 	bl	800a3d6 <_ZSt7forwardIRKN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS4_E4typeE>
 800aece:	4604      	mov	r4, r0
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4619      	mov	r1, r3
 800aed4:	2008      	movs	r0, #8
 800aed6:	f7f9 fa53 	bl	8004380 <_ZnwjPv>
 800aeda:	4603      	mov	r3, r0
 800aedc:	4622      	mov	r2, r4
 800aede:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aee2:	e883 0003 	stmia.w	r3, {r0, r1}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd90      	pop	{r4, r7, pc}

0800aeee <_ZSt14__copy_move_a2ILb0EPKN6tetris15PartTetrisBlockEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fac9 	bl	800b496 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>
 800af04:	4603      	mov	r3, r0
    }
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <_ZSt14__copy_move_a2ILb0EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fab9 	bl	800b496 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>
 800af24:	4603      	mov	r3, r0
    }
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800af2e:	b590      	push	{r4, r7, lr}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800af38:	6838      	ldr	r0, [r7, #0]
 800af3a:	f000 fac9 	bl	800b4d0 <_ZSt7forwardIRN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS3_E4typeE>
 800af3e:	4604      	mov	r4, r0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4619      	mov	r1, r3
 800af44:	2008      	movs	r0, #8
 800af46:	f7f9 fa1b 	bl	8004380 <_ZnwjPv>
 800af4a:	4603      	mov	r3, r0
 800af4c:	4622      	mov	r2, r4
 800af4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af52:	e883 0003 	stmia.w	r3, {r0, r1}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd90      	pop	{r4, r7, pc}

0800af5e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EC1ES6_>:
      _Iter_negate(_Predicate __pred)
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	4638      	mov	r0, r7
 800af68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800af6c:	463b      	mov	r3, r7
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fb75 	bl	800a65e <_ZSt4moveIRZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800af74:	4602      	mov	r2, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	ca07      	ldmia	r2, {r0, r1, r2}
 800af7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <_ZZN6tetris12TetrisFigure23isContainsUnitInColumneEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
	auto lambd1 = [&](auto& block)
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
		if (irow == side) irow = 0;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d103      	bne.n	800afaa <_ZZN6tetris12TetrisFigure23isContainsUnitInColumneEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x22>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
		if (irow++ == icol) return !block.isFeeled;
 800afae:	6813      	ldr	r3, [r2, #0]
 800afb0:	1c59      	adds	r1, r3, #1
 800afb2:	6011      	str	r1, [r2, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6892      	ldr	r2, [r2, #8]
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	4293      	cmp	r3, r2
 800afbc:	bf0c      	ite	eq
 800afbe:	2301      	moveq	r3, #1
 800afc0:	2300      	movne	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d005      	beq.n	800afd4 <_ZZN6tetris12TetrisFigure23isContainsUnitInColumneEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x4c>
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f083 0301 	eor.w	r3, r3, #1
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	e000      	b.n	800afd6 <_ZZN6tetris12TetrisFigure23isContainsUnitInColumneEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x4e>
		else return true;
 800afd4:	2301      	movs	r3, #1
	};
 800afd6:	4618      	mov	r0, r3
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc80      	pop	{r7}
 800afde:	4770      	bx	lr

0800afe0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure23isContainsUnitInColumneEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>:
	operator()(_Iterator __it)
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800afea:	687c      	ldr	r4, [r7, #4]
 800afec:	463b      	mov	r3, r7
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe f807 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4619      	mov	r1, r3
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff ffc5 	bl	800af88 <_ZZN6tetris12TetrisFigure23isContainsUnitInColumneEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
 800affe:	4603      	mov	r3, r0
 800b000:	f083 0301 	eor.w	r3, r3, #1
 800b004:	b2db      	uxtb	r3, r3
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd90      	pop	{r4, r7, pc}

0800b00e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EC1ES6_>:
      _Iter_negate(_Predicate __pred)
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	4638      	mov	r0, r7
 800b018:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b01c:	463b      	mov	r3, r7
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff fbe4 	bl	800a7ec <_ZSt4moveIRZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800b024:	4602      	mov	r2, r0
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	ca07      	ldmia	r2, {r0, r1, r2}
 800b02a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <_ZZN6tetris12TetrisFigure19isContainsUnitInRowEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
	auto lambd2 = [&](auto& block)
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
		if (irow == size_t(counter++ / side)) return !block.isFeeled;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6819      	ldr	r1, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	6813      	ldr	r3, [r2, #0]
 800b04e:	1c58      	adds	r0, r3, #1
 800b050:	6010      	str	r0, [r2, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6892      	ldr	r2, [r2, #8]
 800b056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b058:	fbb3 f3f2 	udiv	r3, r3, r2
 800b05c:	4299      	cmp	r1, r3
 800b05e:	bf0c      	ite	eq
 800b060:	2301      	moveq	r3, #1
 800b062:	2300      	movne	r3, #0
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <_ZZN6tetris12TetrisFigure19isContainsUnitInRowEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x3e>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f083 0301 	eor.w	r3, r3, #1
 800b072:	b2db      	uxtb	r3, r3
 800b074:	e000      	b.n	800b078 <_ZZN6tetris12TetrisFigure19isContainsUnitInRowEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x40>
		else return true;
 800b076:	2301      	movs	r3, #1
	};
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr

0800b082 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN6tetris12TetrisFigure19isContainsUnitInRowEjEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>:
	operator()(_Iterator __it)
 800b082:	b590      	push	{r4, r7, lr}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800b08c:	687c      	ldr	r4, [r7, #4]
 800b08e:	463b      	mov	r3, r7
 800b090:	4618      	mov	r0, r3
 800b092:	f7fd ffb6 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 800b096:	4603      	mov	r3, r0
 800b098:	4619      	mov	r1, r3
 800b09a:	4620      	mov	r0, r4
 800b09c:	f7ff ffcc 	bl	800b038 <_ZZN6tetris12TetrisFigure19isContainsUnitInRowEjENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f083 0301 	eor.w	r3, r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd90      	pop	{r4, r7, pc}

0800b0b0 <_ZSt4moveIRZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bc80      	pop	{r7}
 800b0c2:	4770      	bx	lr

0800b0c4 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EC1ES6_>:
      _Iter_pred(_Predicate __pred)
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	b590      	push	{r4, r7, lr}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	f107 001c 	add.w	r0, r7, #28
 800b0d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b0d6:	f107 031c 	add.w	r3, r7, #28
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff ffe8 	bl	800b0b0 <_ZSt4moveIRZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EONSt16remove_referenceIS2_E4typeEOS2_>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	461c      	mov	r4, r3
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { }
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b0fa:	b004      	add	sp, #16
 800b0fc:	4770      	bx	lr

0800b0fe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b0fe:	b082      	sub	sp, #8
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	f107 0118 	add.w	r1, r7, #24
 800b10e:	e881 000c 	stmia.w	r1, {r2, r3}
	__trip_count = (__last - __first) >> 2;
 800b112:	1d3a      	adds	r2, r7, #4
 800b114:	463b      	mov	r3, r7
 800b116:	4611      	mov	r1, r2
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe fbc0 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b11e:	4603      	mov	r3, r0
 800b120:	109b      	asrs	r3, r3, #2
 800b122:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd3b      	ble.n	800b1a2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	f107 0018 	add.w	r0, r7, #24
 800b130:	f000 fa2a 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x40>
	    return __first;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	e06c      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	4618      	mov	r0, r3
 800b142:	f7fd ff4e 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	f107 0018 	add.w	r0, r7, #24
 800b14c:	f000 fa1c 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	e05e      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b15a:	1d3b      	adds	r3, r7, #4
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fd ff40 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	f107 0018 	add.w	r0, r7, #24
 800b168:	f000 fa0e 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x78>
	    return __first;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	e050      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b176:	1d3b      	adds	r3, r7, #4
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fd ff32 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	f107 0018 	add.w	r0, r7, #24
 800b184:	f000 fa00 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	e042      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b192:	1d3b      	adds	r3, r7, #4
 800b194:	4618      	mov	r0, r3
 800b196:	f7fd ff24 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e7c0      	b.n	800b124 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800b1a2:	1d3a      	adds	r2, r7, #4
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fb78 	bl	800989e <_ZN9__gnu_cxxmiIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d006      	beq.n	800b1c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xc4>
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	dc2e      	bgt.n	800b216 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d01e      	beq.n	800b1fa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xfc>
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d00e      	beq.n	800b1de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xe0>
 800b1c0:	e029      	b.n	800b216 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x118>
	  if (__pred(__first))
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	f107 0018 	add.w	r0, r7, #24
 800b1c8:	f000 f9de 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xd8>
	    return __first;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	e020      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b1d6:	1d3b      	adds	r3, r7, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fd ff02 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	f107 0018 	add.w	r0, r7, #24
 800b1e4:	f000 f9d0 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0xf4>
	    return __first;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	e012      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b1f2:	1d3b      	adds	r3, r7, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fd fef4 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	f107 0018 	add.w	r0, r7, #24
 800b200:	f000 f9c2 	bl	800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x110>
	    return __first;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	e004      	b.n	800b218 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EEESC_SC_SC_T0_St26random_access_iterator_tag+0x11a>
	  ++__first;
 800b20e:	1d3b      	adds	r3, r7, #4
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fee6 	bl	8008fe2 <_ZN9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 800b216:	683b      	ldr	r3, [r7, #0]
    }
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b222:	b002      	add	sp, #8
 800b224:	4770      	bx	lr

0800b226 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN6tetris15PartTetrisBlockEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d00e      	beq.n	800b25c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN6tetris15PartTetrisBlockEPS3_EET0_T_S8_S7_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b23e:	6978      	ldr	r0, [r7, #20]
 800b240:	f7ff fe28 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800b244:	4603      	mov	r3, r0
 800b246:	68f9      	ldr	r1, [r7, #12]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff fe38 	bl	800aebe <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3308      	adds	r3, #8
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	3308      	adds	r3, #8
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	e7ec      	b.n	800b236 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN6tetris15PartTetrisBlockEPS3_EET0_T_S8_S7_+0x10>
	      return __cur;
 800b25c:	697b      	ldr	r3, [r7, #20]
	}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f806 	bl	800b280 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE11_M_max_sizeEv>
 800b274:	4603      	mov	r3, r0
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <_ZNK9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE11_M_max_sizeEv+0x14>)
      }
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	bc80      	pop	{r7}
 800b292:	4770      	bx	lr
 800b294:	01e1e1e1 	.word	0x01e1e1e1

0800b298 <_ZSt12__niter_baseIPN6tetris12TetrisFigureEET_S3_>:
    __niter_base(_Iterator __it)
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bc80      	pop	{r7}
 800b2aa:	4770      	bx	lr

0800b2ac <_ZSt14__relocate_a_1IPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d013      	beq.n	800b2ee <_ZSt14__relocate_a_1IPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	f7ff fc4d 	bl	800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7ff fc49 	bl	800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 f968 	bl	800b5b0 <_ZSt19__relocate_object_aIN6tetris12TetrisFigureES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3344      	adds	r3, #68	; 0x44
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	3344      	adds	r3, #68	; 0x44
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	e7e7      	b.n	800b2be <_ZSt14__relocate_a_1IPN6tetris12TetrisFigureES2_SaIS1_EET0_T_S5_S4_RT1_+0x12>
      return __cur;
 800b2ee:	697b      	ldr	r3, [r7, #20]
    }
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	371c      	adds	r7, #28
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd90      	pop	{r4, r7, pc}

0800b2f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris12TetrisFigureEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b308:	f107 0208 	add.w	r2, r7, #8
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f967 	bl	800b5e6 <_ZStneIPN6tetris12TetrisFigureEEbRKSt13move_iteratorIT_ES7_>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d016      	beq.n	800b34c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris12TetrisFigureEES5_EET0_T_S8_S7_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b31e:	6978      	ldr	r0, [r7, #20]
 800b320:	f7ff fc21 	bl	800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>
 800b324:	4604      	mov	r4, r0
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 f97c 	bl	800b628 <_ZNKSt13move_iteratorIPN6tetris12TetrisFigureEEdeEv>
 800b330:	4603      	mov	r3, r0
 800b332:	4619      	mov	r1, r3
 800b334:	4620      	mov	r0, r4
 800b336:	f000 f9c4 	bl	800b6c2 <_ZSt10_ConstructIN6tetris12TetrisFigureEJS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f962 	bl	800b608 <_ZNSt13move_iteratorIPN6tetris12TetrisFigureEEppEv>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	3344      	adds	r3, #68	; 0x44
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e7dd      	b.n	800b308 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris12TetrisFigureEES5_EET0_T_S8_S7_+0x10>
	      return __cur;
 800b34c:	697b      	ldr	r3, [r7, #20]
	}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd90      	pop	{r4, r7, pc}

0800b356 <_ZNK9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f819 	bl	800b396 <_ZNK9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE11_M_max_sizeEv>
 800b364:	4603      	mov	r3, r0
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4619      	mov	r1, r3
 800b37a:	2008      	movs	r0, #8
 800b37c:	f7f9 f800 	bl	8004380 <_ZnwjPv>
 800b380:	4603      	mov	r3, r0
 800b382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b386:	2100      	movs	r1, #0
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fb f9d3 	bl	8006734 <_ZN6tetris15PartTetrisBlockC1Ebm>
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <_ZNK9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b39e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bc80      	pop	{r7}
 800b3aa:	4770      	bx	lr

0800b3ac <_ZSt14__relocate_a_1IPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d013      	beq.n	800b3ee <_ZSt14__relocate_a_1IPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800b3c6:	6978      	ldr	r0, [r7, #20]
 800b3c8:	f7ff fd64 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff fd60 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 f988 	bl	800b6f0 <_ZSt19__relocate_object_aIN6tetris15PartTetrisBlockES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	e7e7      	b.n	800b3be <_ZSt14__relocate_a_1IPN6tetris15PartTetrisBlockES2_SaIS1_EET0_T_S5_S4_RT1_+0x12>
      return __cur;
 800b3ee:	697b      	ldr	r3, [r7, #20]
    }
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	371c      	adds	r7, #28
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b408:	f107 0208 	add.w	r2, r7, #8
 800b40c:	f107 030c 	add.w	r3, r7, #12
 800b410:	4611      	mov	r1, r2
 800b412:	4618      	mov	r0, r3
 800b414:	f000 f987 	bl	800b726 <_ZStneIPN6tetris15PartTetrisBlockEEbRKSt13move_iteratorIT_ES7_>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d016      	beq.n	800b44c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES5_EET0_T_S8_S7_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b41e:	6978      	ldr	r0, [r7, #20]
 800b420:	f7ff fd38 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800b424:	4604      	mov	r4, r0
 800b426:	f107 030c 	add.w	r3, r7, #12
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 f99c 	bl	800b768 <_ZNKSt13move_iteratorIPN6tetris15PartTetrisBlockEEdeEv>
 800b430:	4603      	mov	r3, r0
 800b432:	4619      	mov	r1, r3
 800b434:	4620      	mov	r0, r4
 800b436:	f000 f9a2 	bl	800b77e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b43a:	f107 030c 	add.w	r3, r7, #12
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 f982 	bl	800b748 <_ZNSt13move_iteratorIPN6tetris15PartTetrisBlockEEppEv>
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	3308      	adds	r3, #8
 800b448:	617b      	str	r3, [r7, #20]
 800b44a:	e7dd      	b.n	800b408 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN6tetris15PartTetrisBlockEES5_EET0_T_S8_S7_+0x10>
	      return __cur;
 800b44c:	697b      	ldr	r3, [r7, #20]
	}
 800b44e:	4618      	mov	r0, r3
 800b450:	371c      	adds	r7, #28
 800b452:	46bd      	mov	sp, r7
 800b454:	bd90      	pop	{r4, r7, pc}

0800b456 <_ZSt14__copy_move_a2ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f9a1 	bl	800b7ae <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>
 800b46c:	4603      	mov	r3, r0
    }
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <_ZSt23__copy_move_backward_a2ILb1EPN6tetris15PartTetrisBlockES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f000 f9ae 	bl	800b7e8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>
 800b48c:	4603      	mov	r3, r0
    }
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	10db      	asrs	r3, r3, #3
 800b4aa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d006      	beq.n	800b4c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	68f9      	ldr	r1, [r7, #12]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 fd74 	bl	800cfa8 <memmove>
	  return __result + _Num;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	4413      	add	r3, r2
	}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <_ZSt7forwardIRN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bc80      	pop	{r7}
 800b4e2:	4770      	bx	lr

0800b4e4 <_ZZN6tetris12TetrisFigure20isIntersectionBlocksEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>:
	auto lambd3 = [&](auto& block)
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
		flag = false;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
		if (block.isFeeled) {
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d024      	beq.n	800b548 <_ZZN6tetris12TetrisFigure20isIntersectionBlocksEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x64>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b504:	f103 0008 	add.w	r0, r3, #8
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50e:	461a      	mov	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	441a      	add	r2, r3
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	461a      	mov	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b528:	441a      	add	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4413      	add	r3, r2
 800b532:	4619      	mov	r1, r3
 800b534:	f7fc fc7f 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800b538:	4603      	mov	r3, r0
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <_ZZN6tetris12TetrisFigure20isIntersectionBlocksEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x64>
		flag = false;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
				flag = true;
 800b544:	2201      	movs	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
		if (++col == side) { ++row, col = 0; }
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	3201      	adds	r2, #1
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
		if (++col == side) { ++row, col = 0; }
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	429a      	cmp	r2, r3
 800b55c:	bf0c      	ite	eq
 800b55e:	2301      	moveq	r3, #1
 800b560:	2300      	movne	r3, #0
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <_ZZN6tetris12TetrisFigure20isIntersectionBlocksEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_+0x96>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	689b      	ldr	r3, [r3, #8]
		if (++col == side) { ++row, col = 0; }
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	3201      	adds	r2, #1
 800b570:	601a      	str	r2, [r3, #0]
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
		if (++col == side) { ++row, col = 0; }
 800b576:	2200      	movs	r2, #0
 800b578:	601a      	str	r2, [r3, #0]
		flag = false;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
		return flag;
 800b57e:	781b      	ldrb	r3, [r3, #0]
	};
 800b580:	4618      	mov	r0, r3
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <_ZN9__gnu_cxx5__ops10_Iter_predIZN6tetris12TetrisFigure20isIntersectionBlocksEvEUlRT_E_EclINS_17__normal_iteratorIPNS2_15PartTetrisBlockESt6vectorISA_SaISA_EEEEEEbS4_>:
	operator()(_Iterator __it)
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 800b592:	687c      	ldr	r4, [r7, #4]
 800b594:	463b      	mov	r3, r7
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd fd33 	bl	8009002 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris15PartTetrisBlockESt6vectorIS2_SaIS2_EEEdeEv>
 800b59c:	4603      	mov	r3, r0
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff ff9f 	bl	800b4e4 <_ZZN6tetris12TetrisFigure20isIntersectionBlocksEvENKUlRT_E_clINS_15PartTetrisBlockEEEDaS2_>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd90      	pop	{r4, r7, pc}

0800b5b0 <_ZSt19__relocate_object_aIN6tetris12TetrisFigureES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800b5bc:	68b8      	ldr	r0, [r7, #8]
 800b5be:	f000 f935 	bl	800b82c <_ZSt4moveIRN6tetris12TetrisFigureEEONSt16remove_referenceIT_E4typeEOS4_>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f939 	bl	800b840 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800b5ce:	68b8      	ldr	r0, [r7, #8]
 800b5d0:	f7ff fac9 	bl	800ab66 <_ZSt11__addressofIN6tetris12TetrisFigureEEPT_RS2_>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fe fcfe 	bl	8009fda <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE7destroyIS1_EEvRS2_PT_>
    }
 800b5de:	bf00      	nop
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <_ZStneIPN6tetris12TetrisFigureEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f937 	bl	800b866 <_ZSteqIPN6tetris12TetrisFigureEEbRKSt13move_iteratorIT_ES7_>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f083 0301 	eor.w	r3, r3, #1
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_ZNSt13move_iteratorIPN6tetris12TetrisFigureEEppEv>:
      operator++()
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	601a      	str	r2, [r3, #0]
	return *this;
 800b61c:	687b      	ldr	r3, [r7, #4]
      }
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	bc80      	pop	{r7}
 800b626:	4770      	bx	lr

0800b628 <_ZNKSt13move_iteratorIPN6tetris12TetrisFigureEEdeEv>:
      operator*() const
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr

0800b63e <_ZN6tetris12TetrisFigureC1EOS0_>:
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fb fa16 	bl	8006a80 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f103 020c 	add.w	r2, r3, #12
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	330c      	adds	r3, #12
 800b65e:	4619      	mov	r1, r3
 800b660:	4610      	mov	r0, r2
 800b662:	f7fb fa0d 	bl	8006a80 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f103 0218 	add.w	r2, r3, #24
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	3318      	adds	r3, #24
 800b670:	4619      	mov	r1, r3
 800b672:	4610      	mov	r0, r2
 800b674:	f7fb fa04 	bl	8006a80 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEC1EOS3_>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	3324      	adds	r3, #36	; 0x24
 800b67e:	3224      	adds	r2, #36	; 0x24
 800b680:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b684:	e883 0003 	stmia.w	r3, {r0, r1}
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	332c      	adds	r3, #44	; 0x2c
 800b68e:	322c      	adds	r2, #44	; 0x2c
 800b690:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b694:	e883 0003 	stmia.w	r3, {r0, r1}
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	3334      	adds	r3, #52	; 0x34
 800b69e:	3234      	adds	r2, #52	; 0x34
 800b6a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	63da      	str	r2, [r3, #60]	; 0x3c
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	641a      	str	r2, [r3, #64]	; 0x40
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <_ZSt10_ConstructIN6tetris12TetrisFigureEJS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b6c2:	b590      	push	{r4, r7, lr}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800b6cc:	6838      	ldr	r0, [r7, #0]
 800b6ce:	f000 f8e0 	bl	800b892 <_ZSt7forwardIN6tetris12TetrisFigureEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	2044      	movs	r0, #68	; 0x44
 800b6da:	f7f8 fe51 	bl	8004380 <_ZnwjPv>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff ffab 	bl	800b63e <_ZN6tetris12TetrisFigureC1EOS0_>
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}

0800b6f0 <_ZSt19__relocate_object_aIN6tetris15PartTetrisBlockES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800b6fc:	68b8      	ldr	r0, [r7, #8]
 800b6fe:	f000 f8d2 	bl	800b8a6 <_ZSt4moveIRN6tetris15PartTetrisBlockEEONSt16remove_referenceIT_E4typeEOS4_>
 800b702:	4603      	mov	r3, r0
 800b704:	461a      	mov	r2, r3
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f8d6 	bl	800b8ba <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800b70e:	68b8      	ldr	r0, [r7, #8]
 800b710:	f7ff fbc0 	bl	800ae94 <_ZSt11__addressofIN6tetris15PartTetrisBlockEEPT_RS2_>
 800b714:	4603      	mov	r3, r0
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7fe fe79 	bl	800a410 <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE7destroyIS1_EEvRS2_PT_>
    }
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <_ZStneIPN6tetris15PartTetrisBlockEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8d4 	bl	800b8e0 <_ZSteqIPN6tetris15PartTetrisBlockEEbRKSt13move_iteratorIT_ES7_>
 800b738:	4603      	mov	r3, r0
 800b73a:	f083 0301 	eor.w	r3, r3, #1
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <_ZNSt13move_iteratorIPN6tetris15PartTetrisBlockEEppEv>:
      operator++()
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f103 0208 	add.w	r2, r3, #8
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
	return *this;
 800b75c:	687b      	ldr	r3, [r7, #4]
      }
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <_ZNKSt13move_iteratorIPN6tetris15PartTetrisBlockEEdeEv>:
      operator*() const
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr

0800b77e <_ZSt10_ConstructIN6tetris15PartTetrisBlockEJS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b77e:	b590      	push	{r4, r7, lr}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800b788:	6838      	ldr	r0, [r7, #0]
 800b78a:	f000 f8bf 	bl	800b90c <_ZSt7forwardIN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b78e:	4604      	mov	r4, r0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4619      	mov	r1, r3
 800b794:	2008      	movs	r0, #8
 800b796:	f7f8 fdf3 	bl	8004380 <_ZnwjPv>
 800b79a:	4603      	mov	r3, r0
 800b79c:	4622      	mov	r2, r4
 800b79e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd90      	pop	{r4, r7, pc}

0800b7ae <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b086      	sub	sp, #24
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	60b9      	str	r1, [r7, #8]
 800b7b8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	10db      	asrs	r3, r3, #3
 800b7c2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d006      	beq.n	800b7d8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68f9      	ldr	r1, [r7, #12]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 fbe8 	bl	800cfa8 <memmove>
	  return __result + _Num;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4413      	add	r3, r2
	}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	10db      	asrs	r3, r3, #3
 800b7fc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN6tetris15PartTetrisBlockEEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	425b      	negs	r3, r3
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	18d0      	adds	r0, r2, r3
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	461a      	mov	r2, r3
 800b814:	68f9      	ldr	r1, [r7, #12]
 800b816:	f001 fbc7 	bl	800cfa8 <memmove>
	  return __result - _Num;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	425b      	negs	r3, r3
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
	}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <_ZSt4moveIRN6tetris12TetrisFigureEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bc80      	pop	{r7}
 800b83e:	4770      	bx	lr

0800b840 <_ZNSt16allocator_traitsISaIN6tetris12TetrisFigureEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f820 	bl	800b892 <_ZSt7forwardIN6tetris12TetrisFigureEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f861 	bl	800b920 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <_ZSteqIPN6tetris12TetrisFigureEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b866:	b590      	push	{r4, r7, lr}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f86d 	bl	800b950 <_ZNKSt13move_iteratorIPN6tetris12TetrisFigureEE4baseEv>
 800b876:	4604      	mov	r4, r0
 800b878:	6838      	ldr	r0, [r7, #0]
 800b87a:	f000 f869 	bl	800b950 <_ZNKSt13move_iteratorIPN6tetris12TetrisFigureEE4baseEv>
 800b87e:	4603      	mov	r3, r0
 800b880:	429c      	cmp	r4, r3
 800b882:	bf0c      	ite	eq
 800b884:	2301      	moveq	r3, #1
 800b886:	2300      	movne	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd90      	pop	{r4, r7, pc}

0800b892 <_ZSt7forwardIN6tetris12TetrisFigureEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b892:	b480      	push	{r7}
 800b894:	b083      	sub	sp, #12
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr

0800b8a6 <_ZSt4moveIRN6tetris15PartTetrisBlockEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bc80      	pop	{r7}
 800b8b8:	4770      	bx	lr

0800b8ba <_ZNSt16allocator_traitsISaIN6tetris15PartTetrisBlockEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f820 	bl	800b90c <_ZSt7forwardIN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	68b9      	ldr	r1, [r7, #8]
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 f847 	bl	800b966 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ZSteqIPN6tetris15PartTetrisBlockEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f854 	bl	800b998 <_ZNKSt13move_iteratorIPN6tetris15PartTetrisBlockEE4baseEv>
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	6838      	ldr	r0, [r7, #0]
 800b8f4:	f000 f850 	bl	800b998 <_ZNKSt13move_iteratorIPN6tetris15PartTetrisBlockEE4baseEv>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	429c      	cmp	r4, r3
 800b8fc:	bf0c      	ite	eq
 800b8fe:	2301      	moveq	r3, #1
 800b900:	2300      	movne	r3, #0
 800b902:	b2db      	uxtb	r3, r3
 800b904:	4618      	mov	r0, r3
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd90      	pop	{r4, r7, pc}

0800b90c <_ZSt7forwardIN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr

0800b920 <_ZN9__gnu_cxx13new_allocatorIN6tetris12TetrisFigureEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b920:	b590      	push	{r4, r7, lr}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff ffb0 	bl	800b892 <_ZSt7forwardIN6tetris12TetrisFigureEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b932:	4604      	mov	r4, r0
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	4619      	mov	r1, r3
 800b938:	2044      	movs	r0, #68	; 0x44
 800b93a:	f7f8 fd21 	bl	8004380 <_ZnwjPv>
 800b93e:	4603      	mov	r3, r0
 800b940:	4621      	mov	r1, r4
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fe7b 	bl	800b63e <_ZN6tetris12TetrisFigureC1EOS0_>
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <_ZNKSt13move_iteratorIPN6tetris12TetrisFigureEE4baseEv>:
      base() const
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	bc80      	pop	{r7}
 800b964:	4770      	bx	lr

0800b966 <_ZN9__gnu_cxx13new_allocatorIN6tetris15PartTetrisBlockEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b966:	b590      	push	{r4, r7, lr}
 800b968:	b085      	sub	sp, #20
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff ffca 	bl	800b90c <_ZSt7forwardIN6tetris15PartTetrisBlockEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b978:	4604      	mov	r4, r0
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4619      	mov	r1, r3
 800b97e:	2008      	movs	r0, #8
 800b980:	f7f8 fcfe 	bl	8004380 <_ZnwjPv>
 800b984:	4603      	mov	r3, r0
 800b986:	4622      	mov	r2, r4
 800b988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b98c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b990:	bf00      	nop
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	bd90      	pop	{r4, r7, pc}

0800b998 <_ZNKSt13move_iteratorIPN6tetris15PartTetrisBlockEE4baseEv>:
      base() const
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bc80      	pop	{r7}
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm>:
extern but::ButtonWrapper* but2;
extern but::ButtonWrapper* but3;
extern but::ButtonWrapper* but4;

bool tetris::TetrisButtonHandler(TetrisFigure& figure, uint32_t& delay)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	if(but2->LogicState_ == LogicState::WAS_PRESSED)
 800b9ba:	4b21      	ldr	r3, [pc, #132]	; (800ba40 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x90>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d103      	bne.n	800b9cc <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x1c>
	{
		delay = TETRIS_LOW_DELAY;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2264      	movs	r2, #100	; 0x64
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e008      	b.n	800b9de <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x2e>
	}
	else if(but2->LogicState_ == LogicState::NONE)
 800b9cc:	4b1c      	ldr	r3, [pc, #112]	; (800ba40 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x90>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d103      	bne.n	800b9de <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x2e>
	{
		delay = TETRIS_HIGH_DELAY;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b9dc:	601a      	str	r2, [r3, #0]
	}
	if(but1->LogicState_ == LogicState::WAS_PRESSED){
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x94>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d109      	bne.n	800b9fc <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x4c>
		figure.MoveHorizontally(Directions::LEFT);
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7fb f933 	bl	8006c56 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE>
		but1->LogicState_ = LogicState::NONE;
 800b9f0:	4b14      	ldr	r3, [pc, #80]	; (800ba44 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x94>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e01d      	b.n	800ba38 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x88>
	}
	else if(but4->LogicState_ == LogicState::WAS_PRESSED){
 800b9fc:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x98>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d109      	bne.n	800ba1a <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x6a>
		figure.MoveHorizontally(Directions::RIGHT);
 800ba06:	2101      	movs	r1, #1
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7fb f924 	bl	8006c56 <_ZN6tetris12TetrisFigure16MoveHorizontallyENS_10DirectionsE>
		but4->LogicState_ = LogicState::NONE;
 800ba0e:	4b0e      	ldr	r3, [pc, #56]	; (800ba48 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x98>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e00e      	b.n	800ba38 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x88>
	}
	else if(but3->LogicState_ == LogicState::WAS_PRESSED){
 800ba1a:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x9c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d108      	bne.n	800ba36 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x86>
		figure.Rotate();
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7fb f8bb 	bl	8006ba0 <_ZN6tetris12TetrisFigure6RotateEv>
		but3->LogicState_ = LogicState::NONE;
 800ba2a:	4b08      	ldr	r3, [pc, #32]	; (800ba4c <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x9c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e000      	b.n	800ba38 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm+0x88>
	}
	return false;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	200001a8 	.word	0x200001a8
 800ba44:	200001a4 	.word	0x200001a4
 800ba48:	200001b0 	.word	0x200001b0
 800ba4c:	200001ac 	.word	0x200001ac

0800ba50 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE>:

void tetris::PrintTetrisFigure(const TetrisFigure& figure)
{
 800ba50:	b5b0      	push	{r4, r5, r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	6078      	str	r0, [r7, #4]
	int side = figure.side;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	60fb      	str	r3, [r7, #12]
	for(int row = 0; row < side; ++row)
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	da51      	bge.n	800bb0e <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0xbe>
		for (int col = 0; col < side; ++col)
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	da47      	bge.n	800bb06 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0xb6>
			if (figure.figure[row * side + col].isFeeled && (figure.coord.Y + row) >= HIDDEN_ROW_OF_FIELD)
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	fb03 f202 	mul.w	r2, r3, r2
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4413      	add	r3, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	f000 fb15 	bl	800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d007      	beq.n	800baa2 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0x52>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	4413      	add	r3, r2
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	dd01      	ble.n	800baa2 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0x52>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e000      	b.n	800baa4 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0x54>
 800baa2:	2300      	movs	r3, #0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d02a      	beq.n	800bafe <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0xae>
			{
				tft_fillRoundRect((figure.coord.X + col) * SIDE_SQUARE,
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	0112      	lsls	r2, r2, #4
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	b29b      	uxth	r3, r3
 800baba:	b21c      	sxth	r4, r3
						(figure.coord.Y + row - HIDDEN_ROW_OF_FIELD) * SIDE_SQUARE,
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	4413      	add	r3, r2
 800bac4:	3b04      	subs	r3, #4
				tft_fillRoundRect((figure.coord.X + col) * SIDE_SQUARE,
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	461a      	mov	r2, r3
 800baca:	0112      	lsls	r2, r2, #4
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	b29b      	uxth	r3, r3
 800bad0:	b21d      	sxth	r5, r3
						SIDE_SQUARE, SIDE_SQUARE, SQUARE_RADIUS, figure.figure[row * side + col].color);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	fb03 f202 	mul.w	r2, r3, r2
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	4413      	add	r3, r2
 800bae0:	4619      	mov	r1, r3
 800bae2:	f000 fae7 	bl	800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800bae6:	4603      	mov	r3, r0
 800bae8:	685b      	ldr	r3, [r3, #4]
				tft_fillRoundRect((figure.coord.X + col) * SIDE_SQUARE,
 800baea:	b29b      	uxth	r3, r3
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	2303      	movs	r3, #3
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	230f      	movs	r3, #15
 800baf4:	220f      	movs	r2, #15
 800baf6:	4629      	mov	r1, r5
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7f7 f89a 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		for (int col = 0; col < side; ++col)
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3301      	adds	r3, #1
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	e7b3      	b.n	800ba6e <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0x1e>
	for(int row = 0; row < side; ++row)
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	617b      	str	r3, [r7, #20]
 800bb0c:	e7a9      	b.n	800ba62 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE+0x12>
			}
}
 800bb0e:	bf00      	nop
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bdb0      	pop	{r4, r5, r7, pc}

0800bb16 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE>:

void tetris::ErasePrevFigure(const TetrisFigure& figure)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b088      	sub	sp, #32
 800bb1a:	af02      	add	r7, sp, #8
 800bb1c:	6078      	str	r0, [r7, #4]
	int side = figure.side;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb22:	60fb      	str	r3, [r7, #12]
	for (int row = 0; row < side; ++row)
 800bb24:	2300      	movs	r3, #0
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	da46      	bge.n	800bbbe <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0xa8>
		for (int col = 0; col < side; ++col)
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	da3c      	bge.n	800bbb6 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0xa0>
			if (figure.prevFigure[row * side + col].isFeeled && (figure.prevCoord.Y + row) >= HIDDEN_ROW_OF_FIELD)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f103 000c 	add.w	r0, r3, #12
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	fb03 f202 	mul.w	r2, r3, r2
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	4619      	mov	r1, r3
 800bb50:	f000 fab0 	bl	800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800bb54:	4603      	mov	r3, r0
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d007      	beq.n	800bb6c <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x56>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	4413      	add	r3, r2
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	dd01      	ble.n	800bb6c <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x56>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e000      	b.n	800bb6e <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x58>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d01d      	beq.n	800bbae <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x98>
			{
				tft_fillRoundRect((figure.prevCoord.X + col) * SIDE_SQUARE,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	4413      	add	r3, r2
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	0112      	lsls	r2, r2, #4
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	b218      	sxth	r0, r3
						(figure.prevCoord.Y + row - HIDDEN_ROW_OF_FIELD) * SIDE_SQUARE,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3b04      	subs	r3, #4
				tft_fillRoundRect((figure.prevCoord.X + col) * SIDE_SQUARE,
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	0112      	lsls	r2, r2, #4
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	b219      	sxth	r1, r3
 800bb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	2303      	movs	r3, #3
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	230f      	movs	r3, #15
 800bba8:	220f      	movs	r2, #15
 800bbaa:	f7f7 f842 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		for (int col = 0; col < side; ++col)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	613b      	str	r3, [r7, #16]
 800bbb4:	e7be      	b.n	800bb34 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x1e>
	for (int row = 0; row < side; ++row)
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	e7b4      	b.n	800bb28 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE+0x12>
						SIDE_SQUARE, SIDE_SQUARE, SQUARE_RADIUS, BACKGROUND);
			}
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE>:

void tetris::PrintTetrisField(block_t& myBlock)
{
 800bbc6:	b5b0      	push	{r4, r5, r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af02      	add	r7, sp, #8
 800bbcc:	6078      	str	r0, [r7, #4]

	for (int row = HIDDEN_ROW_OF_FIELD; row < ROW_OF_FIELD; ++row)
 800bbce:	2304      	movs	r3, #4
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b13      	cmp	r3, #19
 800bbd6:	dc33      	bgt.n	800bc40 <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE+0x7a>
		for (int col = 0; col < COL_OF_FIELD; ++col)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60bb      	str	r3, [r7, #8]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b09      	cmp	r3, #9
 800bbe0:	dc2a      	bgt.n	800bc38 <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE+0x72>
		{
			tft_fillRoundRect(col * SIDE_SQUARE, (row - HIDDEN_ROW_OF_FIELD) * SIDE_SQUARE,
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	0112      	lsls	r2, r2, #4
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	b21c      	sxth	r4, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3b04      	subs	r3, #4
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	0112      	lsls	r2, r2, #4
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	b21d      	sxth	r5, r3
					SIDE_SQUARE, SIDE_SQUARE, SQUARE_RADIUS, myBlock[row * COL_OF_FIELD + col].color);
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	4413      	add	r3, r2
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7fc f90f 	bl	8007e36 <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	685b      	ldr	r3, [r3, #4]
			tft_fillRoundRect(col * SIDE_SQUARE, (row - HIDDEN_ROW_OF_FIELD) * SIDE_SQUARE,
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	2303      	movs	r3, #3
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	230f      	movs	r3, #15
 800bc26:	220f      	movs	r2, #15
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7f7 f801 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		for (int col = 0; col < COL_OF_FIELD; ++col)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60bb      	str	r3, [r7, #8]
 800bc36:	e7d1      	b.n	800bbdc <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE+0x16>
	for (int row = HIDDEN_ROW_OF_FIELD; row < ROW_OF_FIELD; ++row)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e7c8      	b.n	800bbd2 <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE+0xc>
		}

}
 800bc40:	bf00      	nop
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bdb0      	pop	{r4, r5, r7, pc}

0800bc48 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE>:
void tetris::PrintNextFigure(const TetrisFigure& figure)
{
 800bc48:	b5b0      	push	{r4, r5, r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	6078      	str	r0, [r7, #4]
	tft_fillRoundRect(165, 30, 60, 60, SQUARE_RADIUS, ILI9341_WHITE);
 800bc50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	2303      	movs	r3, #3
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	233c      	movs	r3, #60	; 0x3c
 800bc5c:	223c      	movs	r2, #60	; 0x3c
 800bc5e:	211e      	movs	r1, #30
 800bc60:	20a5      	movs	r0, #165	; 0xa5
 800bc62:	f7f6 ffe6 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	auto side = figure.side;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	60fb      	str	r3, [r7, #12]
	for(size_t row = 0; row < side; ++row)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d247      	bcs.n	800bd08 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE+0xc0>
		for(size_t col = 0; col < side; ++col)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	613b      	str	r3, [r7, #16]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d23d      	bcs.n	800bd00 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE+0xb8>
			if(figure.initFigure[row * side + col].isFeeled)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f103 0018 	add.w	r0, r3, #24
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	fb03 f202 	mul.w	r2, r3, r2
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	4413      	add	r3, r2
 800bc96:	4619      	mov	r1, r3
 800bc98:	f000 fa0c 	bl	800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d029      	beq.n	800bcf8 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE+0xb0>
				tft_fillRoundRect((col + 11) * SIDE_SQUARE, (row + 2) * SIDE_SQUARE,
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	0112      	lsls	r2, r2, #4
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	33a5      	adds	r3, #165	; 0xa5
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	b21c      	sxth	r4, r3
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	461a      	mov	r2, r3
 800bcbc:	0112      	lsls	r2, r2, #4
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	331e      	adds	r3, #30
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	b21d      	sxth	r5, r3
									SIDE_SQUARE, SIDE_SQUARE, SQUARE_RADIUS, figure.initFigure[row * side + col].color);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f103 0018 	add.w	r0, r3, #24
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	fb03 f202 	mul.w	r2, r3, r2
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f000 f9ea 	bl	800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>
 800bce0:	4603      	mov	r3, r0
 800bce2:	685b      	ldr	r3, [r3, #4]
				tft_fillRoundRect((col + 11) * SIDE_SQUARE, (row + 2) * SIDE_SQUARE,
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	2303      	movs	r3, #3
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	230f      	movs	r3, #15
 800bcee:	220f      	movs	r2, #15
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f7f6 ff9d 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
		for(size_t col = 0; col < side; ++col)
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	613b      	str	r3, [r7, #16]
 800bcfe:	e7bd      	b.n	800bc7c <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE+0x34>
	for(size_t row = 0; row < side; ++row)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	3301      	adds	r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	e7b3      	b.n	800bc70 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE+0x28>

}
 800bd08:	bf00      	nop
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd10 <_ZN6tetris14PrintRowNPointERKjS1_>:
void tetris::PrintRowNPoint(const size_t& points, const size_t& row)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	tft_setCursor(245, 100);
 800bd1a:	2164      	movs	r1, #100	; 0x64
 800bd1c:	20f5      	movs	r0, #245	; 0xf5
 800bd1e:	f7f7 fad1 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print((uint16_t)points);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f7 fbcd 	bl	80034c8 <_Z9tft_printi>
	tft_setCursor(257, 115);
 800bd2e:	2173      	movs	r1, #115	; 0x73
 800bd30:	f240 1001 	movw	r0, #257	; 0x101
 800bd34:	f7f7 fac6 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print((uint16_t)row);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7f7 fbc2 	bl	80034c8 <_Z9tft_printi>
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <_ZN6tetris13TetrisManagerD1Ev>:
struct TetrisManager
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3318      	adds	r3, #24
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fb fe7d 	bl	8007a58 <_ZNSt6vectorIN6tetris12TetrisFigureESaIS1_EED1Ev>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3308      	adds	r3, #8
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fb fe23 	bl	80079ae <_ZNSt6vectorIN6tetris15PartTetrisBlockESaIS1_EED1Ev>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <_ZN6tetris10TetrisTaskEv>:

void tetris::TetrisTask()
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b090      	sub	sp, #64	; 0x40
 800bd78:	af02      	add	r7, sp, #8
	PrintTetrisInterface();
 800bd7a:	f000 f8ed 	bl	800bf58 <_ZN6tetris20PrintTetrisInterfaceEv>

	TetrisManager manager;
 800bd7e:	f107 030c 	add.w	r3, r7, #12
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fa fd36 	bl	80067f4 <_ZN6tetris13TetrisManagerC1Ev>
	uint32_t delay = TETRIS_HIGH_DELAY, time = HAL_GetTick();
 800bd88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bd8c:	60bb      	str	r3, [r7, #8]
 800bd8e:	f7f5 f9b3 	bl	80010f8 <HAL_GetTick>
 800bd92:	6378      	str	r0, [r7, #52]	; 0x34
	size_t points = 0, erasedRows = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	603b      	str	r3, [r7, #0]

	PrintNextFigure(*manager.nextFigure);
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	3304      	adds	r3, #4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 f995 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff ff4c 	bl	800bc48 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE>
	while(!manager.END_OF_GAME)
 800bdb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 8086 	bne.w	800bec6 <_ZN6tetris10TetrisTaskEv+0x152>
	{
		if(!manager.currentFigure->MoveDown())
 800bdba:	f107 030c 	add.w	r3, r7, #12
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f992 	bl	800c0e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEptEv>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fa ff80 	bl	8006ccc <_ZN6tetris12TetrisFigure8MoveDownEv>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f083 0301 	eor.w	r3, r3, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d032      	beq.n	800be3e <_ZN6tetris10TetrisTaskEv+0xca>
		{
			auto currentErasedRows = manager.EraseFilledRow();
 800bdd8:	f107 030c 	add.w	r3, r7, #12
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fa fd6f 	bl	80068c0 <_ZN6tetris13TetrisManager14EraseFilledRowEv>
 800bde2:	6338      	str	r0, [r7, #48]	; 0x30
			if(currentErasedRows)
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d010      	beq.n	800be0c <_ZN6tetris10TetrisTaskEv+0x98>
			{
				PrintTetrisField(manager.field);
 800bdea:	f107 030c 	add.w	r3, r7, #12
 800bdee:	3308      	adds	r3, #8
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff fee8 	bl	800bbc6 <_ZN6tetris16PrintTetrisFieldERSt6vectorINS_15PartTetrisBlockESaIS1_EE>
				erasedRows += currentErasedRows;
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfa:	4413      	add	r3, r2
 800bdfc:	603b      	str	r3, [r7, #0]
				points += currentErasedRows * 100;
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	2264      	movs	r2, #100	; 0x64
 800be02:	fb03 f202 	mul.w	r2, r3, r2
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4413      	add	r3, r2
 800be0a:	607b      	str	r3, [r7, #4]
			}
			manager.GenerateNewFigure();
 800be0c:	f107 030c 	add.w	r3, r7, #12
 800be10:	4618      	mov	r0, r3
 800be12:	f7fa fdef 	bl	80069f4 <_ZN6tetris13TetrisManager17GenerateNewFigureEv>
			points += 10;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	330a      	adds	r3, #10
 800be1a:	607b      	str	r3, [r7, #4]
			PrintNextFigure(*manager.nextFigure);
 800be1c:	f107 030c 	add.w	r3, r7, #12
 800be20:	3304      	adds	r3, #4
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f955 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800be28:	4603      	mov	r3, r0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff ff0c 	bl	800bc48 <_ZN6tetris15PrintNextFigureERKNS_12TetrisFigureE>
			PrintRowNPoint(points, erasedRows);
 800be30:	463a      	mov	r2, r7
 800be32:	1d3b      	adds	r3, r7, #4
 800be34:	4611      	mov	r1, r2
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff ff6a 	bl	800bd10 <_ZN6tetris14PrintRowNPointERKjS1_>
 800be3c:	e008      	b.n	800be50 <_ZN6tetris10TetrisTaskEv+0xdc>
			HAL_UART_Transmit(&huart1, (uint8_t*)"new figure", sizeof("new figure") - 1, 1000);
#endif
		}
		else
		{
			ErasePrevFigure(*manager.currentFigure);
 800be3e:	f107 030c 	add.w	r3, r7, #12
 800be42:	4618      	mov	r0, r3
 800be44:	f000 f945 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800be48:	4603      	mov	r3, r0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff fe63 	bl	800bb16 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE>
		}
		PrintTetrisFigure(*manager.currentFigure);
 800be50:	f107 030c 	add.w	r3, r7, #12
 800be54:	4618      	mov	r0, r3
 800be56:	f000 f93c 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800be5a:	4603      	mov	r3, r0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff fdf7 	bl	800ba50 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE>
		while(computeTimeDuration(time) < delay)
 800be62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be64:	f7f9 f926 	bl	80050b4 <_Z19computeTimeDurationm>
 800be68:	4602      	mov	r2, r0
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	bf34      	ite	cc
 800be70:	2301      	movcc	r3, #1
 800be72:	2300      	movcs	r3, #0
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d021      	beq.n	800bebe <_ZN6tetris10TetrisTaskEv+0x14a>
		{
			if(TetrisButtonHandler(*manager.currentFigure, delay))
 800be7a:	f107 030c 	add.w	r3, r7, #12
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 f927 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800be84:	4602      	mov	r2, r0
 800be86:	f107 0308 	add.w	r3, r7, #8
 800be8a:	4619      	mov	r1, r3
 800be8c:	4610      	mov	r0, r2
 800be8e:	f7ff fd8f 	bl	800b9b0 <_ZN6tetris19TetrisButtonHandlerERNS_12TetrisFigureERm>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0e4      	beq.n	800be62 <_ZN6tetris10TetrisTaskEv+0xee>
			{
				ErasePrevFigure(*manager.currentFigure);
 800be98:	f107 030c 	add.w	r3, r7, #12
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 f918 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800bea2:	4603      	mov	r3, r0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fe36 	bl	800bb16 <_ZN6tetris15ErasePrevFigureERKNS_12TetrisFigureE>
				PrintTetrisFigure(*manager.currentFigure);
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 f90f 	bl	800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>
 800beb4:	4603      	mov	r3, r0
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff fdca 	bl	800ba50 <_ZN6tetris17PrintTetrisFigureERKNS_12TetrisFigureE>
		while(computeTimeDuration(time) < delay)
 800bebc:	e7d1      	b.n	800be62 <_ZN6tetris10TetrisTaskEv+0xee>
			}
		}
		time = HAL_GetTick();
 800bebe:	f7f5 f91b 	bl	80010f8 <HAL_GetTick>
 800bec2:	6378      	str	r0, [r7, #52]	; 0x34
	while(!manager.END_OF_GAME)
 800bec4:	e774      	b.n	800bdb0 <_ZN6tetris10TetrisTaskEv+0x3c>
	}
	tft_fillRoundRect(165, 30, 60, 60, SQUARE_RADIUS, ILI9341_DARKRED);
 800bec6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	2303      	movs	r3, #3
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	233c      	movs	r3, #60	; 0x3c
 800bed2:	223c      	movs	r2, #60	; 0x3c
 800bed4:	211e      	movs	r1, #30
 800bed6:	20a5      	movs	r0, #165	; 0xa5
 800bed8:	f7f6 feab 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_fillRoundRect(0, 200, 150, 40, 0, ILI9341_DARKRED);
 800bedc:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	2300      	movs	r3, #0
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	2328      	movs	r3, #40	; 0x28
 800bee8:	2296      	movs	r2, #150	; 0x96
 800beea:	21c8      	movs	r1, #200	; 0xc8
 800beec:	2000      	movs	r0, #0
 800beee:	f7f6 fea0 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_setTextColor(ILI9341_BLUE);
 800bef2:	201f      	movs	r0, #31
 800bef4:	f7f7 fa12 	bl	800331c <_Z16tft_setTextColort>
	tft_setTextSize(2);
 800bef8:	2002      	movs	r0, #2
 800befa:	f7f7 f9fb 	bl	80032f4 <_Z15tft_setTextSizeh>
	tft_setCursor(0, 204);
 800befe:	21cc      	movs	r1, #204	; 0xcc
 800bf00:	2000      	movs	r0, #0
 800bf02:	f7f7 f9df 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("HOLD 1 MENU");
 800bf06:	4810      	ldr	r0, [pc, #64]	; (800bf48 <_ZN6tetris10TetrisTaskEv+0x1d4>)
 800bf08:	f7f7 fac2 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(0, 224);
 800bf0c:	21e0      	movs	r1, #224	; 0xe0
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f7f7 f9d8 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("HOLD 2 REST");
 800bf14:	480d      	ldr	r0, [pc, #52]	; (800bf4c <_ZN6tetris10TetrisTaskEv+0x1d8>)
 800bf16:	f7f7 fabb 	bl	8003490 <_Z9tft_printPKc>
	while(true)
	{
		if(but1->LogicState_ == LogicState::WAS_HOLDED)
 800bf1a:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <_ZN6tetris10TetrisTaskEv+0x1dc>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d105      	bne.n	800bf30 <_ZN6tetris10TetrisTaskEv+0x1bc>
	TetrisManager manager;
 800bf24:	f107 030c 	add.w	r3, r7, #12
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff ff0f 	bl	800bd4c <_ZN6tetris13TetrisManagerD1Ev>
			return;
 800bf2e:	e007      	b.n	800bf40 <_ZN6tetris10TetrisTaskEv+0x1cc>
		else if(but2->LogicState_ == LogicState::WAS_HOLDED)
 800bf30:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <_ZN6tetris10TetrisTaskEv+0x1e0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d1ef      	bne.n	800bf1a <_ZN6tetris10TetrisTaskEv+0x1a6>
			TetrisTask();
 800bf3a:	f7ff ff1b 	bl	800bd74 <_ZN6tetris10TetrisTaskEv>
		if(but1->LogicState_ == LogicState::WAS_HOLDED)
 800bf3e:	e7ec      	b.n	800bf1a <_ZN6tetris10TetrisTaskEv+0x1a6>
	}
}
 800bf40:	3738      	adds	r7, #56	; 0x38
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	0800d35c 	.word	0x0800d35c
 800bf4c:	0800d368 	.word	0x0800d368
 800bf50:	200001a4 	.word	0x200001a4
 800bf54:	200001a8 	.word	0x200001a8

0800bf58 <_ZN6tetris20PrintTetrisInterfaceEv>:

void tetris::PrintTetrisInterface()
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af02      	add	r7, sp, #8
	tft_fillScreen(BACKGROUND);
 800bf5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bf62:	f7f6 fd9b 	bl	8002a9c <_Z14tft_fillScreent>
	tft_fillRoundRect(150, 0, 170, 240, 0, ILI9341_DARKRED);
 800bf66:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	23f0      	movs	r3, #240	; 0xf0
 800bf72:	22aa      	movs	r2, #170	; 0xaa
 800bf74:	2100      	movs	r1, #0
 800bf76:	2096      	movs	r0, #150	; 0x96
 800bf78:	f7f6 fe5b 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_fillRoundRect(160, 10, 150, 125, 3, ILI9341_BLUE);
 800bf7c:	231f      	movs	r3, #31
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	2303      	movs	r3, #3
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	237d      	movs	r3, #125	; 0x7d
 800bf86:	2296      	movs	r2, #150	; 0x96
 800bf88:	210a      	movs	r1, #10
 800bf8a:	20a0      	movs	r0, #160	; 0xa0
 800bf8c:	f7f6 fe51 	bl	8002c32 <_Z17tft_fillRoundRectssssst>
	tft_fillRoundRect(160, 140, 150, 90, 3, ILI9341_BLUE);
 800bf90:	231f      	movs	r3, #31
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	2303      	movs	r3, #3
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	235a      	movs	r3, #90	; 0x5a
 800bf9a:	2296      	movs	r2, #150	; 0x96
 800bf9c:	218c      	movs	r1, #140	; 0x8c
 800bf9e:	20a0      	movs	r0, #160	; 0xa0
 800bfa0:	f7f6 fe47 	bl	8002c32 <_Z17tft_fillRoundRectssssst>

	tft_setTextSize(1);
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	f7f7 f9a5 	bl	80032f4 <_Z15tft_setTextSizeh>
	tft_setTextColor_01(ILI9341_DARKRED, ILI9341_BLUE);
 800bfaa:	211f      	movs	r1, #31
 800bfac:	f44f 4008 	mov.w	r0, #34816	; 0x8800
 800bfb0:	f7f7 f9ca 	bl	8003348 <_Z19tft_setTextColor_01tt>
	tft_setCursor(230, 20);
 800bfb4:	2114      	movs	r1, #20
 800bfb6:	20e6      	movs	r0, #230	; 0xe6
 800bfb8:	f7f7 f984 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("COPYRIGHT BY:");
 800bfbc:	4830      	ldr	r0, [pc, #192]	; (800c080 <_ZN6tetris20PrintTetrisInterfaceEv+0x128>)
 800bfbe:	f7f7 fa67 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 30);
 800bfc2:	211e      	movs	r1, #30
 800bfc4:	20e6      	movs	r0, #230	; 0xe6
 800bfc6:	f7f7 f97d 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("KUBAREV I.A.");
 800bfca:	482e      	ldr	r0, [pc, #184]	; (800c084 <_ZN6tetris20PrintTetrisInterfaceEv+0x12c>)
 800bfcc:	f7f7 fa60 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 40);
 800bfd0:	2128      	movs	r1, #40	; 0x28
 800bfd2:	20e6      	movs	r0, #230	; 0xe6
 800bfd4:	f7f7 f976 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("KIRIN A.K.");
 800bfd8:	482b      	ldr	r0, [pc, #172]	; (800c088 <_ZN6tetris20PrintTetrisInterfaceEv+0x130>)
 800bfda:	f7f7 fa59 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 50);
 800bfde:	2132      	movs	r1, #50	; 0x32
 800bfe0:	20e6      	movs	r0, #230	; 0xe6
 800bfe2:	f7f7 f96f 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("ORGANISATION:");
 800bfe6:	4829      	ldr	r0, [pc, #164]	; (800c08c <_ZN6tetris20PrintTetrisInterfaceEv+0x134>)
 800bfe8:	f7f7 fa52 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 60);
 800bfec:	213c      	movs	r1, #60	; 0x3c
 800bfee:	20e6      	movs	r0, #230	; 0xe6
 800bff0:	f7f7 f968 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("Ramenskiy");
 800bff4:	4826      	ldr	r0, [pc, #152]	; (800c090 <_ZN6tetris20PrintTetrisInterfaceEv+0x138>)
 800bff6:	f7f7 fa4b 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 70);
 800bffa:	2146      	movs	r1, #70	; 0x46
 800bffc:	20e6      	movs	r0, #230	; 0xe6
 800bffe:	f7f7 f961 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("College");
 800c002:	4824      	ldr	r0, [pc, #144]	; (800c094 <_ZN6tetris20PrintTetrisInterfaceEv+0x13c>)
 800c004:	f7f7 fa44 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(230, 80);
 800c008:	2150      	movs	r1, #80	; 0x50
 800c00a:	20e6      	movs	r0, #230	; 0xe6
 800c00c:	f7f7 f95a 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("LICENSE: MIT");
 800c010:	4821      	ldr	r0, [pc, #132]	; (800c098 <_ZN6tetris20PrintTetrisInterfaceEv+0x140>)
 800c012:	f7f7 fa3d 	bl	8003490 <_Z9tft_printPKc>

	tft_setTextSize(2);
 800c016:	2002      	movs	r0, #2
 800c018:	f7f7 f96c 	bl	80032f4 <_Z15tft_setTextSizeh>
	tft_setTextColor_01(ILI9341_DARKRED, ILI9341_BLUE);
 800c01c:	211f      	movs	r1, #31
 800c01e:	f44f 4008 	mov.w	r0, #34816	; 0x8800
 800c022:	f7f7 f991 	bl	8003348 <_Z19tft_setTextColor_01tt>
	tft_setCursor(165, 100);
 800c026:	2164      	movs	r1, #100	; 0x64
 800c028:	20a5      	movs	r0, #165	; 0xa5
 800c02a:	f7f7 f94b 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("PTS:");
 800c02e:	481b      	ldr	r0, [pc, #108]	; (800c09c <_ZN6tetris20PrintTetrisInterfaceEv+0x144>)
 800c030:	f7f7 fa2e 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(165, 115);
 800c034:	2173      	movs	r1, #115	; 0x73
 800c036:	20a5      	movs	r0, #165	; 0xa5
 800c038:	f7f7 f944 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("ROWS:");
 800c03c:	4818      	ldr	r0, [pc, #96]	; (800c0a0 <_ZN6tetris20PrintTetrisInterfaceEv+0x148>)
 800c03e:	f7f7 fa27 	bl	8003490 <_Z9tft_printPKc>

	tft_setCursor(165, 145);
 800c042:	2191      	movs	r1, #145	; 0x91
 800c044:	20a5      	movs	r0, #165	; 0xa5
 800c046:	f7f7 f93d 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("1: LEFT");
 800c04a:	4816      	ldr	r0, [pc, #88]	; (800c0a4 <_ZN6tetris20PrintTetrisInterfaceEv+0x14c>)
 800c04c:	f7f7 fa20 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(165, 160);
 800c050:	21a0      	movs	r1, #160	; 0xa0
 800c052:	20a5      	movs	r0, #165	; 0xa5
 800c054:	f7f7 f936 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("2: BOOST");
 800c058:	4813      	ldr	r0, [pc, #76]	; (800c0a8 <_ZN6tetris20PrintTetrisInterfaceEv+0x150>)
 800c05a:	f7f7 fa19 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(165, 175);
 800c05e:	21af      	movs	r1, #175	; 0xaf
 800c060:	20a5      	movs	r0, #165	; 0xa5
 800c062:	f7f7 f92f 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("3: ROTATE");
 800c066:	4811      	ldr	r0, [pc, #68]	; (800c0ac <_ZN6tetris20PrintTetrisInterfaceEv+0x154>)
 800c068:	f7f7 fa12 	bl	8003490 <_Z9tft_printPKc>
	tft_setCursor(165, 190);
 800c06c:	21be      	movs	r1, #190	; 0xbe
 800c06e:	20a5      	movs	r0, #165	; 0xa5
 800c070:	f7f7 f928 	bl	80032c4 <_Z13tft_setCursorss>
	tft_print("4: RIGHT");
 800c074:	480e      	ldr	r0, [pc, #56]	; (800c0b0 <_ZN6tetris20PrintTetrisInterfaceEv+0x158>)
 800c076:	f7f7 fa0b 	bl	8003490 <_Z9tft_printPKc>
}
 800c07a:	bf00      	nop
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	0800d374 	.word	0x0800d374
 800c084:	0800d384 	.word	0x0800d384
 800c088:	0800d394 	.word	0x0800d394
 800c08c:	0800d3a0 	.word	0x0800d3a0
 800c090:	0800d3b0 	.word	0x0800d3b0
 800c094:	0800d3bc 	.word	0x0800d3bc
 800c098:	0800d3c4 	.word	0x0800d3c4
 800c09c:	0800d3d4 	.word	0x0800d3d4
 800c0a0:	0800d3dc 	.word	0x0800d3dc
 800c0a4:	0800d3e4 	.word	0x0800d3e4
 800c0a8:	0800d3ec 	.word	0x0800d3ec
 800c0ac:	0800d3f8 	.word	0x0800d3f8
 800c0b0:	0800d404 	.word	0x0800d404

0800c0b4 <_ZNKSt6vectorIN6tetris15PartTetrisBlockESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	4413      	add	r3, r2
      }
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bc80      	pop	{r7}
 800c0d0:	4770      	bx	lr

0800c0d2 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bc80      	pop	{r7}
 800c0e6:	4770      	bx	lr

0800c0e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN6tetris12TetrisFigureESt6vectorIS2_SaIS2_EEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr

0800c0fe <_ZdlPvj>:
 800c0fe:	f000 b823 	b.w	800c148 <_ZdlPv>

0800c102 <_Znwj>:
 800c102:	2801      	cmp	r0, #1
 800c104:	bf38      	it	cc
 800c106:	2001      	movcc	r0, #1
 800c108:	b510      	push	{r4, lr}
 800c10a:	4604      	mov	r4, r0
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 ff3b 	bl	800cf88 <malloc>
 800c112:	b930      	cbnz	r0, 800c122 <_Znwj+0x20>
 800c114:	f000 f81a 	bl	800c14c <_ZSt15get_new_handlerv>
 800c118:	b908      	cbnz	r0, 800c11e <_Znwj+0x1c>
 800c11a:	f000 ff03 	bl	800cf24 <abort>
 800c11e:	4780      	blx	r0
 800c120:	e7f4      	b.n	800c10c <_Znwj+0xa>
 800c122:	bd10      	pop	{r4, pc}

0800c124 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800c124:	684b      	ldr	r3, [r1, #4]
 800c126:	6001      	str	r1, [r0, #0]
 800c128:	6043      	str	r3, [r0, #4]
 800c12a:	684b      	ldr	r3, [r1, #4]
 800c12c:	6018      	str	r0, [r3, #0]
 800c12e:	6048      	str	r0, [r1, #4]
 800c130:	4770      	bx	lr

0800c132 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800c132:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	605a      	str	r2, [r3, #4]
 800c13a:	4770      	bx	lr

0800c13c <_ZSt17__throw_bad_allocv>:
 800c13c:	b508      	push	{r3, lr}
 800c13e:	f000 fef1 	bl	800cf24 <abort>

0800c142 <_ZSt20__throw_length_errorPKc>:
 800c142:	b508      	push	{r3, lr}
 800c144:	f000 feee 	bl	800cf24 <abort>

0800c148 <_ZdlPv>:
 800c148:	f000 bf26 	b.w	800cf98 <free>

0800c14c <_ZSt15get_new_handlerv>:
 800c14c:	4b02      	ldr	r3, [pc, #8]	; (800c158 <_ZSt15get_new_handlerv+0xc>)
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	f3bf 8f5b 	dmb	ish
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	200001b8 	.word	0x200001b8

0800c15c <pow>:
 800c15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c160:	4614      	mov	r4, r2
 800c162:	461d      	mov	r5, r3
 800c164:	4680      	mov	r8, r0
 800c166:	4689      	mov	r9, r1
 800c168:	f000 f862 	bl	800c230 <__ieee754_pow>
 800c16c:	4622      	mov	r2, r4
 800c16e:	4606      	mov	r6, r0
 800c170:	460f      	mov	r7, r1
 800c172:	462b      	mov	r3, r5
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 fc48 	bl	8000a0c <__aeabi_dcmpun>
 800c17c:	bbc8      	cbnz	r0, 800c1f2 <pow+0x96>
 800c17e:	2200      	movs	r2, #0
 800c180:	2300      	movs	r3, #0
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800c18a:	b1b8      	cbz	r0, 800c1bc <pow+0x60>
 800c18c:	2200      	movs	r2, #0
 800c18e:	2300      	movs	r3, #0
 800c190:	4620      	mov	r0, r4
 800c192:	4629      	mov	r1, r5
 800c194:	f7f4 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d141      	bne.n	800c220 <pow+0xc4>
 800c19c:	4620      	mov	r0, r4
 800c19e:	4629      	mov	r1, r5
 800c1a0:	f000 fe3b 	bl	800ce1a <finite>
 800c1a4:	b328      	cbz	r0, 800c1f2 <pow+0x96>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	f7f4 fc05 	bl	80009bc <__aeabi_dcmplt>
 800c1b2:	b1f0      	cbz	r0, 800c1f2 <pow+0x96>
 800c1b4:	f000 febe 	bl	800cf34 <__errno>
 800c1b8:	2322      	movs	r3, #34	; 0x22
 800c1ba:	e019      	b.n	800c1f0 <pow+0x94>
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	f000 fe2b 	bl	800ce1a <finite>
 800c1c4:	b9c8      	cbnz	r0, 800c1fa <pow+0x9e>
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	f000 fe26 	bl	800ce1a <finite>
 800c1ce:	b1a0      	cbz	r0, 800c1fa <pow+0x9e>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	f000 fe21 	bl	800ce1a <finite>
 800c1d8:	b178      	cbz	r0, 800c1fa <pow+0x9e>
 800c1da:	4632      	mov	r2, r6
 800c1dc:	463b      	mov	r3, r7
 800c1de:	4630      	mov	r0, r6
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	f7f4 fc13 	bl	8000a0c <__aeabi_dcmpun>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0e4      	beq.n	800c1b4 <pow+0x58>
 800c1ea:	f000 fea3 	bl	800cf34 <__errno>
 800c1ee:	2321      	movs	r3, #33	; 0x21
 800c1f0:	6003      	str	r3, [r0, #0]
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4630      	mov	r0, r6
 800c200:	4639      	mov	r1, r7
 800c202:	f7f4 fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0f3      	beq.n	800c1f2 <pow+0x96>
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f000 fe04 	bl	800ce1a <finite>
 800c212:	2800      	cmp	r0, #0
 800c214:	d0ed      	beq.n	800c1f2 <pow+0x96>
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	f000 fdfe 	bl	800ce1a <finite>
 800c21e:	e7c8      	b.n	800c1b2 <pow+0x56>
 800c220:	2600      	movs	r6, #0
 800c222:	4f01      	ldr	r7, [pc, #4]	; (800c228 <pow+0xcc>)
 800c224:	e7e5      	b.n	800c1f2 <pow+0x96>
 800c226:	bf00      	nop
 800c228:	3ff00000 	.word	0x3ff00000
 800c22c:	00000000 	.word	0x00000000

0800c230 <__ieee754_pow>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	b093      	sub	sp, #76	; 0x4c
 800c236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c23a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800c23e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c242:	4689      	mov	r9, r1
 800c244:	ea56 0102 	orrs.w	r1, r6, r2
 800c248:	4680      	mov	r8, r0
 800c24a:	d111      	bne.n	800c270 <__ieee754_pow+0x40>
 800c24c:	1803      	adds	r3, r0, r0
 800c24e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800c252:	4152      	adcs	r2, r2
 800c254:	4299      	cmp	r1, r3
 800c256:	4b82      	ldr	r3, [pc, #520]	; (800c460 <__ieee754_pow+0x230>)
 800c258:	4193      	sbcs	r3, r2
 800c25a:	f080 84b9 	bcs.w	800cbd0 <__ieee754_pow+0x9a0>
 800c25e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f3 ff81 	bl	800016c <__adddf3>
 800c26a:	4683      	mov	fp, r0
 800c26c:	468c      	mov	ip, r1
 800c26e:	e06f      	b.n	800c350 <__ieee754_pow+0x120>
 800c270:	4b7c      	ldr	r3, [pc, #496]	; (800c464 <__ieee754_pow+0x234>)
 800c272:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800c276:	429c      	cmp	r4, r3
 800c278:	464d      	mov	r5, r9
 800c27a:	4682      	mov	sl, r0
 800c27c:	dc06      	bgt.n	800c28c <__ieee754_pow+0x5c>
 800c27e:	d101      	bne.n	800c284 <__ieee754_pow+0x54>
 800c280:	2800      	cmp	r0, #0
 800c282:	d1ec      	bne.n	800c25e <__ieee754_pow+0x2e>
 800c284:	429e      	cmp	r6, r3
 800c286:	dc01      	bgt.n	800c28c <__ieee754_pow+0x5c>
 800c288:	d10f      	bne.n	800c2aa <__ieee754_pow+0x7a>
 800c28a:	b172      	cbz	r2, 800c2aa <__ieee754_pow+0x7a>
 800c28c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c290:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c294:	ea55 050a 	orrs.w	r5, r5, sl
 800c298:	d1e1      	bne.n	800c25e <__ieee754_pow+0x2e>
 800c29a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c29e:	18db      	adds	r3, r3, r3
 800c2a0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c2a4:	4152      	adcs	r2, r2
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	e7d5      	b.n	800c256 <__ieee754_pow+0x26>
 800c2aa:	2d00      	cmp	r5, #0
 800c2ac:	da39      	bge.n	800c322 <__ieee754_pow+0xf2>
 800c2ae:	4b6e      	ldr	r3, [pc, #440]	; (800c468 <__ieee754_pow+0x238>)
 800c2b0:	429e      	cmp	r6, r3
 800c2b2:	dc52      	bgt.n	800c35a <__ieee754_pow+0x12a>
 800c2b4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c2b8:	429e      	cmp	r6, r3
 800c2ba:	f340 849c 	ble.w	800cbf6 <__ieee754_pow+0x9c6>
 800c2be:	1533      	asrs	r3, r6, #20
 800c2c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2c4:	2b14      	cmp	r3, #20
 800c2c6:	dd0f      	ble.n	800c2e8 <__ieee754_pow+0xb8>
 800c2c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c2cc:	fa22 f103 	lsr.w	r1, r2, r3
 800c2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	f040 848e 	bne.w	800cbf6 <__ieee754_pow+0x9c6>
 800c2da:	f001 0101 	and.w	r1, r1, #1
 800c2de:	f1c1 0302 	rsb	r3, r1, #2
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	b182      	cbz	r2, 800c308 <__ieee754_pow+0xd8>
 800c2e6:	e05d      	b.n	800c3a4 <__ieee754_pow+0x174>
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d159      	bne.n	800c3a0 <__ieee754_pow+0x170>
 800c2ec:	f1c3 0314 	rsb	r3, r3, #20
 800c2f0:	fa46 f103 	asr.w	r1, r6, r3
 800c2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f8:	42b3      	cmp	r3, r6
 800c2fa:	f040 8479 	bne.w	800cbf0 <__ieee754_pow+0x9c0>
 800c2fe:	f001 0101 	and.w	r1, r1, #1
 800c302:	f1c1 0302 	rsb	r3, r1, #2
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4b58      	ldr	r3, [pc, #352]	; (800c46c <__ieee754_pow+0x23c>)
 800c30a:	429e      	cmp	r6, r3
 800c30c:	d132      	bne.n	800c374 <__ieee754_pow+0x144>
 800c30e:	2f00      	cmp	r7, #0
 800c310:	f280 846a 	bge.w	800cbe8 <__ieee754_pow+0x9b8>
 800c314:	4642      	mov	r2, r8
 800c316:	464b      	mov	r3, r9
 800c318:	2000      	movs	r0, #0
 800c31a:	4954      	ldr	r1, [pc, #336]	; (800c46c <__ieee754_pow+0x23c>)
 800c31c:	f7f4 fa06 	bl	800072c <__aeabi_ddiv>
 800c320:	e7a3      	b.n	800c26a <__ieee754_pow+0x3a>
 800c322:	2300      	movs	r3, #0
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2a00      	cmp	r2, #0
 800c328:	d13c      	bne.n	800c3a4 <__ieee754_pow+0x174>
 800c32a:	4b4e      	ldr	r3, [pc, #312]	; (800c464 <__ieee754_pow+0x234>)
 800c32c:	429e      	cmp	r6, r3
 800c32e:	d1eb      	bne.n	800c308 <__ieee754_pow+0xd8>
 800c330:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c334:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c338:	ea53 030a 	orrs.w	r3, r3, sl
 800c33c:	f000 8448 	beq.w	800cbd0 <__ieee754_pow+0x9a0>
 800c340:	4b4b      	ldr	r3, [pc, #300]	; (800c470 <__ieee754_pow+0x240>)
 800c342:	429c      	cmp	r4, r3
 800c344:	dd0b      	ble.n	800c35e <__ieee754_pow+0x12e>
 800c346:	2f00      	cmp	r7, #0
 800c348:	f2c0 8448 	blt.w	800cbdc <__ieee754_pow+0x9ac>
 800c34c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c350:	4658      	mov	r0, fp
 800c352:	4661      	mov	r1, ip
 800c354:	b013      	add	sp, #76	; 0x4c
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35a:	2302      	movs	r3, #2
 800c35c:	e7e2      	b.n	800c324 <__ieee754_pow+0xf4>
 800c35e:	2f00      	cmp	r7, #0
 800c360:	f04f 0b00 	mov.w	fp, #0
 800c364:	f04f 0c00 	mov.w	ip, #0
 800c368:	daf2      	bge.n	800c350 <__ieee754_pow+0x120>
 800c36a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c36e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c372:	e7ed      	b.n	800c350 <__ieee754_pow+0x120>
 800c374:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c378:	d106      	bne.n	800c388 <__ieee754_pow+0x158>
 800c37a:	4642      	mov	r2, r8
 800c37c:	464b      	mov	r3, r9
 800c37e:	4640      	mov	r0, r8
 800c380:	4649      	mov	r1, r9
 800c382:	f7f4 f8a9 	bl	80004d8 <__aeabi_dmul>
 800c386:	e770      	b.n	800c26a <__ieee754_pow+0x3a>
 800c388:	4b3a      	ldr	r3, [pc, #232]	; (800c474 <__ieee754_pow+0x244>)
 800c38a:	429f      	cmp	r7, r3
 800c38c:	d10a      	bne.n	800c3a4 <__ieee754_pow+0x174>
 800c38e:	2d00      	cmp	r5, #0
 800c390:	db08      	blt.n	800c3a4 <__ieee754_pow+0x174>
 800c392:	4640      	mov	r0, r8
 800c394:	4649      	mov	r1, r9
 800c396:	b013      	add	sp, #76	; 0x4c
 800c398:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	f000 bc5e 	b.w	800cc5c <__ieee754_sqrt>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4640      	mov	r0, r8
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	f000 fd34 	bl	800ce14 <fabs>
 800c3ac:	4683      	mov	fp, r0
 800c3ae:	468c      	mov	ip, r1
 800c3b0:	f1ba 0f00 	cmp.w	sl, #0
 800c3b4:	d128      	bne.n	800c408 <__ieee754_pow+0x1d8>
 800c3b6:	b124      	cbz	r4, 800c3c2 <__ieee754_pow+0x192>
 800c3b8:	4b2c      	ldr	r3, [pc, #176]	; (800c46c <__ieee754_pow+0x23c>)
 800c3ba:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d122      	bne.n	800c408 <__ieee754_pow+0x1d8>
 800c3c2:	2f00      	cmp	r7, #0
 800c3c4:	da07      	bge.n	800c3d6 <__ieee754_pow+0x1a6>
 800c3c6:	465a      	mov	r2, fp
 800c3c8:	4663      	mov	r3, ip
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	4927      	ldr	r1, [pc, #156]	; (800c46c <__ieee754_pow+0x23c>)
 800c3ce:	f7f4 f9ad 	bl	800072c <__aeabi_ddiv>
 800c3d2:	4683      	mov	fp, r0
 800c3d4:	468c      	mov	ip, r1
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	daba      	bge.n	800c350 <__ieee754_pow+0x120>
 800c3da:	9b00      	ldr	r3, [sp, #0]
 800c3dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3e4:	4323      	orrs	r3, r4
 800c3e6:	d108      	bne.n	800c3fa <__ieee754_pow+0x1ca>
 800c3e8:	465a      	mov	r2, fp
 800c3ea:	4663      	mov	r3, ip
 800c3ec:	4658      	mov	r0, fp
 800c3ee:	4661      	mov	r1, ip
 800c3f0:	f7f3 feba 	bl	8000168 <__aeabi_dsub>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	e790      	b.n	800c31c <__ieee754_pow+0xec>
 800c3fa:	9b00      	ldr	r3, [sp, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d1a7      	bne.n	800c350 <__ieee754_pow+0x120>
 800c400:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c404:	469c      	mov	ip, r3
 800c406:	e7a3      	b.n	800c350 <__ieee754_pow+0x120>
 800c408:	0feb      	lsrs	r3, r5, #31
 800c40a:	3b01      	subs	r3, #1
 800c40c:	930c      	str	r3, [sp, #48]	; 0x30
 800c40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c410:	9b00      	ldr	r3, [sp, #0]
 800c412:	4313      	orrs	r3, r2
 800c414:	d104      	bne.n	800c420 <__ieee754_pow+0x1f0>
 800c416:	4642      	mov	r2, r8
 800c418:	464b      	mov	r3, r9
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	e7e7      	b.n	800c3f0 <__ieee754_pow+0x1c0>
 800c420:	4b15      	ldr	r3, [pc, #84]	; (800c478 <__ieee754_pow+0x248>)
 800c422:	429e      	cmp	r6, r3
 800c424:	f340 80f6 	ble.w	800c614 <__ieee754_pow+0x3e4>
 800c428:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c42c:	429e      	cmp	r6, r3
 800c42e:	4b10      	ldr	r3, [pc, #64]	; (800c470 <__ieee754_pow+0x240>)
 800c430:	dd09      	ble.n	800c446 <__ieee754_pow+0x216>
 800c432:	429c      	cmp	r4, r3
 800c434:	dc0c      	bgt.n	800c450 <__ieee754_pow+0x220>
 800c436:	2f00      	cmp	r7, #0
 800c438:	da0c      	bge.n	800c454 <__ieee754_pow+0x224>
 800c43a:	2000      	movs	r0, #0
 800c43c:	b013      	add	sp, #76	; 0x4c
 800c43e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c442:	f000 bce2 	b.w	800ce0a <__math_oflow>
 800c446:	429c      	cmp	r4, r3
 800c448:	dbf5      	blt.n	800c436 <__ieee754_pow+0x206>
 800c44a:	4b08      	ldr	r3, [pc, #32]	; (800c46c <__ieee754_pow+0x23c>)
 800c44c:	429c      	cmp	r4, r3
 800c44e:	dd15      	ble.n	800c47c <__ieee754_pow+0x24c>
 800c450:	2f00      	cmp	r7, #0
 800c452:	dcf2      	bgt.n	800c43a <__ieee754_pow+0x20a>
 800c454:	2000      	movs	r0, #0
 800c456:	b013      	add	sp, #76	; 0x4c
 800c458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	f000 bcd0 	b.w	800ce00 <__math_uflow>
 800c460:	fff00000 	.word	0xfff00000
 800c464:	7ff00000 	.word	0x7ff00000
 800c468:	433fffff 	.word	0x433fffff
 800c46c:	3ff00000 	.word	0x3ff00000
 800c470:	3fefffff 	.word	0x3fefffff
 800c474:	3fe00000 	.word	0x3fe00000
 800c478:	41e00000 	.word	0x41e00000
 800c47c:	4661      	mov	r1, ip
 800c47e:	2200      	movs	r2, #0
 800c480:	4658      	mov	r0, fp
 800c482:	4b5f      	ldr	r3, [pc, #380]	; (800c600 <__ieee754_pow+0x3d0>)
 800c484:	f7f3 fe70 	bl	8000168 <__aeabi_dsub>
 800c488:	a355      	add	r3, pc, #340	; (adr r3, 800c5e0 <__ieee754_pow+0x3b0>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	4604      	mov	r4, r0
 800c490:	460d      	mov	r5, r1
 800c492:	f7f4 f821 	bl	80004d8 <__aeabi_dmul>
 800c496:	a354      	add	r3, pc, #336	; (adr r3, 800c5e8 <__ieee754_pow+0x3b8>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	f7f4 f818 	bl	80004d8 <__aeabi_dmul>
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4682      	mov	sl, r0
 800c4ac:	468b      	mov	fp, r1
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	4b54      	ldr	r3, [pc, #336]	; (800c604 <__ieee754_pow+0x3d4>)
 800c4b4:	f7f4 f810 	bl	80004d8 <__aeabi_dmul>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	a14c      	add	r1, pc, #304	; (adr r1, 800c5f0 <__ieee754_pow+0x3c0>)
 800c4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c2:	f7f3 fe51 	bl	8000168 <__aeabi_dsub>
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	f7f4 f805 	bl	80004d8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	494c      	ldr	r1, [pc, #304]	; (800c608 <__ieee754_pow+0x3d8>)
 800c4d6:	f7f3 fe47 	bl	8000168 <__aeabi_dsub>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	462b      	mov	r3, r5
 800c4de:	4680      	mov	r8, r0
 800c4e0:	4689      	mov	r9, r1
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	f7f3 fff7 	bl	80004d8 <__aeabi_dmul>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	f7f3 fff1 	bl	80004d8 <__aeabi_dmul>
 800c4f6:	a340      	add	r3, pc, #256	; (adr r3, 800c5f8 <__ieee754_pow+0x3c8>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 ffec 	bl	80004d8 <__aeabi_dmul>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	4650      	mov	r0, sl
 800c506:	4659      	mov	r1, fp
 800c508:	f7f3 fe2e 	bl	8000168 <__aeabi_dsub>
 800c50c:	f04f 0a00 	mov.w	sl, #0
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	4604      	mov	r4, r0
 800c516:	460d      	mov	r5, r1
 800c518:	4630      	mov	r0, r6
 800c51a:	4639      	mov	r1, r7
 800c51c:	f7f3 fe26 	bl	800016c <__adddf3>
 800c520:	4632      	mov	r2, r6
 800c522:	463b      	mov	r3, r7
 800c524:	4650      	mov	r0, sl
 800c526:	468b      	mov	fp, r1
 800c528:	f7f3 fe1e 	bl	8000168 <__aeabi_dsub>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 fe18 	bl	8000168 <__aeabi_dsub>
 800c538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c53c:	9b00      	ldr	r3, [sp, #0]
 800c53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c540:	3b01      	subs	r3, #1
 800c542:	4313      	orrs	r3, r2
 800c544:	f04f 0600 	mov.w	r6, #0
 800c548:	f04f 0200 	mov.w	r2, #0
 800c54c:	bf0c      	ite	eq
 800c54e:	4b2f      	ldreq	r3, [pc, #188]	; (800c60c <__ieee754_pow+0x3dc>)
 800c550:	4b2b      	ldrne	r3, [pc, #172]	; (800c600 <__ieee754_pow+0x3d0>)
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
 800c556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c55a:	e9cd 2300 	strd	r2, r3, [sp]
 800c55e:	4632      	mov	r2, r6
 800c560:	463b      	mov	r3, r7
 800c562:	f7f3 fe01 	bl	8000168 <__aeabi_dsub>
 800c566:	4652      	mov	r2, sl
 800c568:	465b      	mov	r3, fp
 800c56a:	f7f3 ffb5 	bl	80004d8 <__aeabi_dmul>
 800c56e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c572:	4680      	mov	r8, r0
 800c574:	4689      	mov	r9, r1
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f3 ffad 	bl	80004d8 <__aeabi_dmul>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4640      	mov	r0, r8
 800c584:	4649      	mov	r1, r9
 800c586:	f7f3 fdf1 	bl	800016c <__adddf3>
 800c58a:	4632      	mov	r2, r6
 800c58c:	463b      	mov	r3, r7
 800c58e:	4680      	mov	r8, r0
 800c590:	4689      	mov	r9, r1
 800c592:	4650      	mov	r0, sl
 800c594:	4659      	mov	r1, fp
 800c596:	f7f3 ff9f 	bl	80004d8 <__aeabi_dmul>
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c5aa:	f7f3 fddf 	bl	800016c <__adddf3>
 800c5ae:	4b18      	ldr	r3, [pc, #96]	; (800c610 <__ieee754_pow+0x3e0>)
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	4299      	cmp	r1, r3
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	460e      	mov	r6, r1
 800c5b8:	f340 82e5 	ble.w	800cb86 <__ieee754_pow+0x956>
 800c5bc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c5c0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c5c4:	4303      	orrs	r3, r0
 800c5c6:	f000 81df 	beq.w	800c988 <__ieee754_pow+0x758>
 800c5ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f7f4 f9f3 	bl	80009bc <__aeabi_dcmplt>
 800c5d6:	3800      	subs	r0, #0
 800c5d8:	bf18      	it	ne
 800c5da:	2001      	movne	r0, #1
 800c5dc:	e72e      	b.n	800c43c <__ieee754_pow+0x20c>
 800c5de:	bf00      	nop
 800c5e0:	60000000 	.word	0x60000000
 800c5e4:	3ff71547 	.word	0x3ff71547
 800c5e8:	f85ddf44 	.word	0xf85ddf44
 800c5ec:	3e54ae0b 	.word	0x3e54ae0b
 800c5f0:	55555555 	.word	0x55555555
 800c5f4:	3fd55555 	.word	0x3fd55555
 800c5f8:	652b82fe 	.word	0x652b82fe
 800c5fc:	3ff71547 	.word	0x3ff71547
 800c600:	3ff00000 	.word	0x3ff00000
 800c604:	3fd00000 	.word	0x3fd00000
 800c608:	3fe00000 	.word	0x3fe00000
 800c60c:	bff00000 	.word	0xbff00000
 800c610:	408fffff 	.word	0x408fffff
 800c614:	4bd2      	ldr	r3, [pc, #840]	; (800c960 <__ieee754_pow+0x730>)
 800c616:	2200      	movs	r2, #0
 800c618:	402b      	ands	r3, r5
 800c61a:	b943      	cbnz	r3, 800c62e <__ieee754_pow+0x3fe>
 800c61c:	4658      	mov	r0, fp
 800c61e:	4661      	mov	r1, ip
 800c620:	4bd0      	ldr	r3, [pc, #832]	; (800c964 <__ieee754_pow+0x734>)
 800c622:	f7f3 ff59 	bl	80004d8 <__aeabi_dmul>
 800c626:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c62a:	4683      	mov	fp, r0
 800c62c:	460c      	mov	r4, r1
 800c62e:	1523      	asrs	r3, r4, #20
 800c630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c634:	4413      	add	r3, r2
 800c636:	930b      	str	r3, [sp, #44]	; 0x2c
 800c638:	4bcb      	ldr	r3, [pc, #812]	; (800c968 <__ieee754_pow+0x738>)
 800c63a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c63e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c642:	429c      	cmp	r4, r3
 800c644:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c648:	dd08      	ble.n	800c65c <__ieee754_pow+0x42c>
 800c64a:	4bc8      	ldr	r3, [pc, #800]	; (800c96c <__ieee754_pow+0x73c>)
 800c64c:	429c      	cmp	r4, r3
 800c64e:	f340 8199 	ble.w	800c984 <__ieee754_pow+0x754>
 800c652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c654:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c658:	3301      	adds	r3, #1
 800c65a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c65c:	2600      	movs	r6, #0
 800c65e:	00f3      	lsls	r3, r6, #3
 800c660:	930d      	str	r3, [sp, #52]	; 0x34
 800c662:	4bc3      	ldr	r3, [pc, #780]	; (800c970 <__ieee754_pow+0x740>)
 800c664:	4658      	mov	r0, fp
 800c666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c66a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c66e:	4629      	mov	r1, r5
 800c670:	461a      	mov	r2, r3
 800c672:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c676:	4623      	mov	r3, r4
 800c678:	f7f3 fd76 	bl	8000168 <__aeabi_dsub>
 800c67c:	46da      	mov	sl, fp
 800c67e:	462b      	mov	r3, r5
 800c680:	4652      	mov	r2, sl
 800c682:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c68a:	f7f3 fd6f 	bl	800016c <__adddf3>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	2000      	movs	r0, #0
 800c694:	49b7      	ldr	r1, [pc, #732]	; (800c974 <__ieee754_pow+0x744>)
 800c696:	f7f4 f849 	bl	800072c <__aeabi_ddiv>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c6a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6a6:	f7f3 ff17 	bl	80004d8 <__aeabi_dmul>
 800c6aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6ae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c6b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	46ab      	mov	fp, r5
 800c6bc:	106d      	asrs	r5, r5, #1
 800c6be:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c6c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c6cc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	461d      	mov	r5, r3
 800c6d8:	f7f3 fefe 	bl	80004d8 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6e4:	f7f3 fd40 	bl	8000168 <__aeabi_dsub>
 800c6e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	460f      	mov	r7, r1
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	f7f3 fd38 	bl	8000168 <__aeabi_dsub>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	4659      	mov	r1, fp
 800c700:	f7f3 fd32 	bl	8000168 <__aeabi_dsub>
 800c704:	4642      	mov	r2, r8
 800c706:	464b      	mov	r3, r9
 800c708:	f7f3 fee6 	bl	80004d8 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4630      	mov	r0, r6
 800c712:	4639      	mov	r1, r7
 800c714:	f7f3 fd28 	bl	8000168 <__aeabi_dsub>
 800c718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c71c:	f7f3 fedc 	bl	80004d8 <__aeabi_dmul>
 800c720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c724:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c728:	4610      	mov	r0, r2
 800c72a:	4619      	mov	r1, r3
 800c72c:	f7f3 fed4 	bl	80004d8 <__aeabi_dmul>
 800c730:	a379      	add	r3, pc, #484	; (adr r3, 800c918 <__ieee754_pow+0x6e8>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	4604      	mov	r4, r0
 800c738:	460d      	mov	r5, r1
 800c73a:	f7f3 fecd 	bl	80004d8 <__aeabi_dmul>
 800c73e:	a378      	add	r3, pc, #480	; (adr r3, 800c920 <__ieee754_pow+0x6f0>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f3 fd12 	bl	800016c <__adddf3>
 800c748:	4622      	mov	r2, r4
 800c74a:	462b      	mov	r3, r5
 800c74c:	f7f3 fec4 	bl	80004d8 <__aeabi_dmul>
 800c750:	a375      	add	r3, pc, #468	; (adr r3, 800c928 <__ieee754_pow+0x6f8>)
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	f7f3 fd09 	bl	800016c <__adddf3>
 800c75a:	4622      	mov	r2, r4
 800c75c:	462b      	mov	r3, r5
 800c75e:	f7f3 febb 	bl	80004d8 <__aeabi_dmul>
 800c762:	a373      	add	r3, pc, #460	; (adr r3, 800c930 <__ieee754_pow+0x700>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 fd00 	bl	800016c <__adddf3>
 800c76c:	4622      	mov	r2, r4
 800c76e:	462b      	mov	r3, r5
 800c770:	f7f3 feb2 	bl	80004d8 <__aeabi_dmul>
 800c774:	a370      	add	r3, pc, #448	; (adr r3, 800c938 <__ieee754_pow+0x708>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f3 fcf7 	bl	800016c <__adddf3>
 800c77e:	4622      	mov	r2, r4
 800c780:	462b      	mov	r3, r5
 800c782:	f7f3 fea9 	bl	80004d8 <__aeabi_dmul>
 800c786:	a36e      	add	r3, pc, #440	; (adr r3, 800c940 <__ieee754_pow+0x710>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fcee 	bl	800016c <__adddf3>
 800c790:	4622      	mov	r2, r4
 800c792:	4606      	mov	r6, r0
 800c794:	460f      	mov	r7, r1
 800c796:	462b      	mov	r3, r5
 800c798:	4620      	mov	r0, r4
 800c79a:	4629      	mov	r1, r5
 800c79c:	f7f3 fe9c 	bl	80004d8 <__aeabi_dmul>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	f7f3 fe96 	bl	80004d8 <__aeabi_dmul>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7b4:	4642      	mov	r2, r8
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	f7f3 fcd8 	bl	800016c <__adddf3>
 800c7bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c7c0:	f7f3 fe8a 	bl	80004d8 <__aeabi_dmul>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	462b      	mov	r3, r5
 800c7c8:	f7f3 fcd0 	bl	800016c <__adddf3>
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	460f      	mov	r7, r1
 800c7d2:	464b      	mov	r3, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f3 fe7e 	bl	80004d8 <__aeabi_dmul>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4b66      	ldr	r3, [pc, #408]	; (800c978 <__ieee754_pow+0x748>)
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	468b      	mov	fp, r1
 800c7e4:	f7f3 fcc2 	bl	800016c <__adddf3>
 800c7e8:	4632      	mov	r2, r6
 800c7ea:	463b      	mov	r3, r7
 800c7ec:	f7f3 fcbe 	bl	800016c <__adddf3>
 800c7f0:	2400      	movs	r4, #0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	f7f3 fe6c 	bl	80004d8 <__aeabi_dmul>
 800c800:	2200      	movs	r2, #0
 800c802:	4680      	mov	r8, r0
 800c804:	4689      	mov	r9, r1
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	4b5b      	ldr	r3, [pc, #364]	; (800c978 <__ieee754_pow+0x748>)
 800c80c:	f7f3 fcac 	bl	8000168 <__aeabi_dsub>
 800c810:	4652      	mov	r2, sl
 800c812:	465b      	mov	r3, fp
 800c814:	f7f3 fca8 	bl	8000168 <__aeabi_dsub>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4630      	mov	r0, r6
 800c81e:	4639      	mov	r1, r7
 800c820:	f7f3 fca2 	bl	8000168 <__aeabi_dsub>
 800c824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c828:	f7f3 fe56 	bl	80004d8 <__aeabi_dmul>
 800c82c:	4622      	mov	r2, r4
 800c82e:	4606      	mov	r6, r0
 800c830:	460f      	mov	r7, r1
 800c832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c836:	462b      	mov	r3, r5
 800c838:	f7f3 fe4e 	bl	80004d8 <__aeabi_dmul>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4630      	mov	r0, r6
 800c842:	4639      	mov	r1, r7
 800c844:	f7f3 fc92 	bl	800016c <__adddf3>
 800c848:	2400      	movs	r4, #0
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4640      	mov	r0, r8
 800c854:	4649      	mov	r1, r9
 800c856:	f7f3 fc89 	bl	800016c <__adddf3>
 800c85a:	a33b      	add	r3, pc, #236	; (adr r3, 800c948 <__ieee754_pow+0x718>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4620      	mov	r0, r4
 800c862:	460d      	mov	r5, r1
 800c864:	f7f3 fe38 	bl	80004d8 <__aeabi_dmul>
 800c868:	4642      	mov	r2, r8
 800c86a:	464b      	mov	r3, r9
 800c86c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c870:	4620      	mov	r0, r4
 800c872:	4629      	mov	r1, r5
 800c874:	f7f3 fc78 	bl	8000168 <__aeabi_dsub>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4630      	mov	r0, r6
 800c87e:	4639      	mov	r1, r7
 800c880:	f7f3 fc72 	bl	8000168 <__aeabi_dsub>
 800c884:	a332      	add	r3, pc, #200	; (adr r3, 800c950 <__ieee754_pow+0x720>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fe25 	bl	80004d8 <__aeabi_dmul>
 800c88e:	a332      	add	r3, pc, #200	; (adr r3, 800c958 <__ieee754_pow+0x728>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	4606      	mov	r6, r0
 800c896:	460f      	mov	r7, r1
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fe1c 	bl	80004d8 <__aeabi_dmul>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 fc60 	bl	800016c <__adddf3>
 800c8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8ae:	4b33      	ldr	r3, [pc, #204]	; (800c97c <__ieee754_pow+0x74c>)
 800c8b0:	f04f 0a00 	mov.w	sl, #0
 800c8b4:	4413      	add	r3, r2
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7f3 fc57 	bl	800016c <__adddf3>
 800c8be:	4680      	mov	r8, r0
 800c8c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c8c2:	4689      	mov	r9, r1
 800c8c4:	f7f3 fd9e 	bl	8000404 <__aeabi_i2d>
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8ce:	4b2c      	ldr	r3, [pc, #176]	; (800c980 <__ieee754_pow+0x750>)
 800c8d0:	4413      	add	r3, r2
 800c8d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c8d6:	4642      	mov	r2, r8
 800c8d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8dc:	464b      	mov	r3, r9
 800c8de:	f7f3 fc45 	bl	800016c <__adddf3>
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	f7f3 fc41 	bl	800016c <__adddf3>
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	f7f3 fc3d 	bl	800016c <__adddf3>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	4650      	mov	r0, sl
 800c8f8:	468b      	mov	fp, r1
 800c8fa:	f7f3 fc35 	bl	8000168 <__aeabi_dsub>
 800c8fe:	4632      	mov	r2, r6
 800c900:	463b      	mov	r3, r7
 800c902:	f7f3 fc31 	bl	8000168 <__aeabi_dsub>
 800c906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c90a:	f7f3 fc2d 	bl	8000168 <__aeabi_dsub>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	e60d      	b.n	800c534 <__ieee754_pow+0x304>
 800c918:	4a454eef 	.word	0x4a454eef
 800c91c:	3fca7e28 	.word	0x3fca7e28
 800c920:	93c9db65 	.word	0x93c9db65
 800c924:	3fcd864a 	.word	0x3fcd864a
 800c928:	a91d4101 	.word	0xa91d4101
 800c92c:	3fd17460 	.word	0x3fd17460
 800c930:	518f264d 	.word	0x518f264d
 800c934:	3fd55555 	.word	0x3fd55555
 800c938:	db6fabff 	.word	0xdb6fabff
 800c93c:	3fdb6db6 	.word	0x3fdb6db6
 800c940:	33333303 	.word	0x33333303
 800c944:	3fe33333 	.word	0x3fe33333
 800c948:	e0000000 	.word	0xe0000000
 800c94c:	3feec709 	.word	0x3feec709
 800c950:	dc3a03fd 	.word	0xdc3a03fd
 800c954:	3feec709 	.word	0x3feec709
 800c958:	145b01f5 	.word	0x145b01f5
 800c95c:	be3e2fe0 	.word	0xbe3e2fe0
 800c960:	7ff00000 	.word	0x7ff00000
 800c964:	43400000 	.word	0x43400000
 800c968:	0003988e 	.word	0x0003988e
 800c96c:	000bb679 	.word	0x000bb679
 800c970:	0800d928 	.word	0x0800d928
 800c974:	3ff00000 	.word	0x3ff00000
 800c978:	40080000 	.word	0x40080000
 800c97c:	0800d948 	.word	0x0800d948
 800c980:	0800d938 	.word	0x0800d938
 800c984:	2601      	movs	r6, #1
 800c986:	e66a      	b.n	800c65e <__ieee754_pow+0x42e>
 800c988:	a39d      	add	r3, pc, #628	; (adr r3, 800cc00 <__ieee754_pow+0x9d0>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	4640      	mov	r0, r8
 800c990:	4649      	mov	r1, r9
 800c992:	f7f3 fbeb 	bl	800016c <__adddf3>
 800c996:	4622      	mov	r2, r4
 800c998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c99c:	462b      	mov	r3, r5
 800c99e:	4650      	mov	r0, sl
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	f7f3 fbe1 	bl	8000168 <__aeabi_dsub>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9ae:	f7f4 f823 	bl	80009f8 <__aeabi_dcmpgt>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f47f ae09 	bne.w	800c5ca <__ieee754_pow+0x39a>
 800c9b8:	4aa3      	ldr	r2, [pc, #652]	; (800cc48 <__ieee754_pow+0xa18>)
 800c9ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	f340 8101 	ble.w	800cbc6 <__ieee754_pow+0x996>
 800c9c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	151b      	asrs	r3, r3, #20
 800c9cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c9d0:	fa4a f303 	asr.w	r3, sl, r3
 800c9d4:	4433      	add	r3, r6
 800c9d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c9da:	4f9c      	ldr	r7, [pc, #624]	; (800cc4c <__ieee754_pow+0xa1c>)
 800c9dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c9e0:	4117      	asrs	r7, r2
 800c9e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c9e6:	ea23 0107 	bic.w	r1, r3, r7
 800c9ea:	f1c2 0214 	rsb	r2, r2, #20
 800c9ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	fa4a fa02 	asr.w	sl, sl, r2
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4620      	mov	r0, r4
 800ca00:	bfb8      	it	lt
 800ca02:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca06:	f7f3 fbaf 	bl	8000168 <__aeabi_dsub>
 800ca0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca12:	2400      	movs	r4, #0
 800ca14:	4642      	mov	r2, r8
 800ca16:	464b      	mov	r3, r9
 800ca18:	f7f3 fba8 	bl	800016c <__adddf3>
 800ca1c:	a37a      	add	r3, pc, #488	; (adr r3, 800cc08 <__ieee754_pow+0x9d8>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	4620      	mov	r0, r4
 800ca24:	460d      	mov	r5, r1
 800ca26:	f7f3 fd57 	bl	80004d8 <__aeabi_dmul>
 800ca2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca2e:	4606      	mov	r6, r0
 800ca30:	460f      	mov	r7, r1
 800ca32:	4620      	mov	r0, r4
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f3 fb97 	bl	8000168 <__aeabi_dsub>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f3 fb91 	bl	8000168 <__aeabi_dsub>
 800ca46:	a372      	add	r3, pc, #456	; (adr r3, 800cc10 <__ieee754_pow+0x9e0>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	f7f3 fd44 	bl	80004d8 <__aeabi_dmul>
 800ca50:	a371      	add	r3, pc, #452	; (adr r3, 800cc18 <__ieee754_pow+0x9e8>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	4680      	mov	r8, r0
 800ca58:	4689      	mov	r9, r1
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7f3 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4640      	mov	r0, r8
 800ca68:	4649      	mov	r1, r9
 800ca6a:	f7f3 fb7f 	bl	800016c <__adddf3>
 800ca6e:	4604      	mov	r4, r0
 800ca70:	460d      	mov	r5, r1
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	4630      	mov	r0, r6
 800ca78:	4639      	mov	r1, r7
 800ca7a:	f7f3 fb77 	bl	800016c <__adddf3>
 800ca7e:	4632      	mov	r2, r6
 800ca80:	463b      	mov	r3, r7
 800ca82:	4680      	mov	r8, r0
 800ca84:	4689      	mov	r9, r1
 800ca86:	f7f3 fb6f 	bl	8000168 <__aeabi_dsub>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fb69 	bl	8000168 <__aeabi_dsub>
 800ca96:	4642      	mov	r2, r8
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	4640      	mov	r0, r8
 800caa0:	4649      	mov	r1, r9
 800caa2:	f7f3 fd19 	bl	80004d8 <__aeabi_dmul>
 800caa6:	a35e      	add	r3, pc, #376	; (adr r3, 800cc20 <__ieee754_pow+0x9f0>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	4604      	mov	r4, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	f7f3 fd12 	bl	80004d8 <__aeabi_dmul>
 800cab4:	a35c      	add	r3, pc, #368	; (adr r3, 800cc28 <__ieee754_pow+0x9f8>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	f7f3 fb55 	bl	8000168 <__aeabi_dsub>
 800cabe:	4622      	mov	r2, r4
 800cac0:	462b      	mov	r3, r5
 800cac2:	f7f3 fd09 	bl	80004d8 <__aeabi_dmul>
 800cac6:	a35a      	add	r3, pc, #360	; (adr r3, 800cc30 <__ieee754_pow+0xa00>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	f7f3 fb4e 	bl	800016c <__adddf3>
 800cad0:	4622      	mov	r2, r4
 800cad2:	462b      	mov	r3, r5
 800cad4:	f7f3 fd00 	bl	80004d8 <__aeabi_dmul>
 800cad8:	a357      	add	r3, pc, #348	; (adr r3, 800cc38 <__ieee754_pow+0xa08>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f7f3 fb43 	bl	8000168 <__aeabi_dsub>
 800cae2:	4622      	mov	r2, r4
 800cae4:	462b      	mov	r3, r5
 800cae6:	f7f3 fcf7 	bl	80004d8 <__aeabi_dmul>
 800caea:	a355      	add	r3, pc, #340	; (adr r3, 800cc40 <__ieee754_pow+0xa10>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	f7f3 fb3c 	bl	800016c <__adddf3>
 800caf4:	4622      	mov	r2, r4
 800caf6:	462b      	mov	r3, r5
 800caf8:	f7f3 fcee 	bl	80004d8 <__aeabi_dmul>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4640      	mov	r0, r8
 800cb02:	4649      	mov	r1, r9
 800cb04:	f7f3 fb30 	bl	8000168 <__aeabi_dsub>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4640      	mov	r0, r8
 800cb12:	4649      	mov	r1, r9
 800cb14:	f7f3 fce0 	bl	80004d8 <__aeabi_dmul>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb22:	4620      	mov	r0, r4
 800cb24:	4629      	mov	r1, r5
 800cb26:	f7f3 fb1f 	bl	8000168 <__aeabi_dsub>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb32:	f7f3 fdfb 	bl	800072c <__aeabi_ddiv>
 800cb36:	4632      	mov	r2, r6
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	463b      	mov	r3, r7
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4649      	mov	r1, r9
 800cb42:	f7f3 fcc9 	bl	80004d8 <__aeabi_dmul>
 800cb46:	4632      	mov	r2, r6
 800cb48:	463b      	mov	r3, r7
 800cb4a:	f7f3 fb0f 	bl	800016c <__adddf3>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4620      	mov	r0, r4
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7f3 fb07 	bl	8000168 <__aeabi_dsub>
 800cb5a:	4642      	mov	r2, r8
 800cb5c:	464b      	mov	r3, r9
 800cb5e:	f7f3 fb03 	bl	8000168 <__aeabi_dsub>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	2000      	movs	r0, #0
 800cb68:	4939      	ldr	r1, [pc, #228]	; (800cc50 <__ieee754_pow+0xa20>)
 800cb6a:	f7f3 fafd 	bl	8000168 <__aeabi_dsub>
 800cb6e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cb72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cb76:	da29      	bge.n	800cbcc <__ieee754_pow+0x99c>
 800cb78:	4652      	mov	r2, sl
 800cb7a:	f000 f955 	bl	800ce28 <scalbn>
 800cb7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb82:	f7ff bbfe 	b.w	800c382 <__ieee754_pow+0x152>
 800cb86:	4b33      	ldr	r3, [pc, #204]	; (800cc54 <__ieee754_pow+0xa24>)
 800cb88:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cb8c:	429f      	cmp	r7, r3
 800cb8e:	f77f af13 	ble.w	800c9b8 <__ieee754_pow+0x788>
 800cb92:	4b31      	ldr	r3, [pc, #196]	; (800cc58 <__ieee754_pow+0xa28>)
 800cb94:	440b      	add	r3, r1
 800cb96:	4303      	orrs	r3, r0
 800cb98:	d009      	beq.n	800cbae <__ieee754_pow+0x97e>
 800cb9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	f7f3 ff0b 	bl	80009bc <__aeabi_dcmplt>
 800cba6:	3800      	subs	r0, #0
 800cba8:	bf18      	it	ne
 800cbaa:	2001      	movne	r0, #1
 800cbac:	e453      	b.n	800c456 <__ieee754_pow+0x226>
 800cbae:	4622      	mov	r2, r4
 800cbb0:	462b      	mov	r3, r5
 800cbb2:	f7f3 fad9 	bl	8000168 <__aeabi_dsub>
 800cbb6:	4642      	mov	r2, r8
 800cbb8:	464b      	mov	r3, r9
 800cbba:	f7f3 ff13 	bl	80009e4 <__aeabi_dcmpge>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f43f aefa 	beq.w	800c9b8 <__ieee754_pow+0x788>
 800cbc4:	e7e9      	b.n	800cb9a <__ieee754_pow+0x96a>
 800cbc6:	f04f 0a00 	mov.w	sl, #0
 800cbca:	e720      	b.n	800ca0e <__ieee754_pow+0x7de>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	e7d6      	b.n	800cb7e <__ieee754_pow+0x94e>
 800cbd0:	f04f 0b00 	mov.w	fp, #0
 800cbd4:	f8df c078 	ldr.w	ip, [pc, #120]	; 800cc50 <__ieee754_pow+0xa20>
 800cbd8:	f7ff bbba 	b.w	800c350 <__ieee754_pow+0x120>
 800cbdc:	f04f 0b00 	mov.w	fp, #0
 800cbe0:	f04f 0c00 	mov.w	ip, #0
 800cbe4:	f7ff bbb4 	b.w	800c350 <__ieee754_pow+0x120>
 800cbe8:	4640      	mov	r0, r8
 800cbea:	4649      	mov	r1, r9
 800cbec:	f7ff bb3d 	b.w	800c26a <__ieee754_pow+0x3a>
 800cbf0:	9200      	str	r2, [sp, #0]
 800cbf2:	f7ff bb89 	b.w	800c308 <__ieee754_pow+0xd8>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f7ff bb73 	b.w	800c2e2 <__ieee754_pow+0xb2>
 800cbfc:	f3af 8000 	nop.w
 800cc00:	652b82fe 	.word	0x652b82fe
 800cc04:	3c971547 	.word	0x3c971547
 800cc08:	00000000 	.word	0x00000000
 800cc0c:	3fe62e43 	.word	0x3fe62e43
 800cc10:	fefa39ef 	.word	0xfefa39ef
 800cc14:	3fe62e42 	.word	0x3fe62e42
 800cc18:	0ca86c39 	.word	0x0ca86c39
 800cc1c:	be205c61 	.word	0xbe205c61
 800cc20:	72bea4d0 	.word	0x72bea4d0
 800cc24:	3e663769 	.word	0x3e663769
 800cc28:	c5d26bf1 	.word	0xc5d26bf1
 800cc2c:	3ebbbd41 	.word	0x3ebbbd41
 800cc30:	af25de2c 	.word	0xaf25de2c
 800cc34:	3f11566a 	.word	0x3f11566a
 800cc38:	16bebd93 	.word	0x16bebd93
 800cc3c:	3f66c16c 	.word	0x3f66c16c
 800cc40:	5555553e 	.word	0x5555553e
 800cc44:	3fc55555 	.word	0x3fc55555
 800cc48:	3fe00000 	.word	0x3fe00000
 800cc4c:	000fffff 	.word	0x000fffff
 800cc50:	3ff00000 	.word	0x3ff00000
 800cc54:	4090cbff 	.word	0x4090cbff
 800cc58:	3f6f3400 	.word	0x3f6f3400

0800cc5c <__ieee754_sqrt>:
 800cc5c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800cdb8 <__ieee754_sqrt+0x15c>
 800cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	ea3c 0c01 	bics.w	ip, ip, r1
 800cc68:	4606      	mov	r6, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	460a      	mov	r2, r1
 800cc70:	4607      	mov	r7, r0
 800cc72:	4603      	mov	r3, r0
 800cc74:	d10f      	bne.n	800cc96 <__ieee754_sqrt+0x3a>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	f7f3 fc2d 	bl	80004d8 <__aeabi_dmul>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4630      	mov	r0, r6
 800cc84:	4629      	mov	r1, r5
 800cc86:	f7f3 fa71 	bl	800016c <__adddf3>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	4630      	mov	r0, r6
 800cc90:	4629      	mov	r1, r5
 800cc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc96:	2900      	cmp	r1, #0
 800cc98:	dc0e      	bgt.n	800ccb8 <__ieee754_sqrt+0x5c>
 800cc9a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cc9e:	ea5c 0707 	orrs.w	r7, ip, r7
 800cca2:	d0f4      	beq.n	800cc8e <__ieee754_sqrt+0x32>
 800cca4:	b141      	cbz	r1, 800ccb8 <__ieee754_sqrt+0x5c>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	f7f3 fa5d 	bl	8000168 <__aeabi_dsub>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	f7f3 fd3b 	bl	800072c <__aeabi_ddiv>
 800ccb6:	e7e8      	b.n	800cc8a <__ieee754_sqrt+0x2e>
 800ccb8:	1521      	asrs	r1, r4, #20
 800ccba:	d075      	beq.n	800cda8 <__ieee754_sqrt+0x14c>
 800ccbc:	07cc      	lsls	r4, r1, #31
 800ccbe:	f04f 0400 	mov.w	r4, #0
 800ccc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ccc6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ccca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ccce:	bf5e      	ittt	pl
 800ccd0:	0fd9      	lsrpl	r1, r3, #31
 800ccd2:	005b      	lslpl	r3, r3, #1
 800ccd4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ccd8:	0fd9      	lsrs	r1, r3, #31
 800ccda:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ccde:	2516      	movs	r5, #22
 800cce0:	4620      	mov	r0, r4
 800cce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cce6:	107f      	asrs	r7, r7, #1
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	1846      	adds	r6, r0, r1
 800ccec:	4296      	cmp	r6, r2
 800ccee:	bfde      	ittt	le
 800ccf0:	1b92      	suble	r2, r2, r6
 800ccf2:	1870      	addle	r0, r6, r1
 800ccf4:	1864      	addle	r4, r4, r1
 800ccf6:	0052      	lsls	r2, r2, #1
 800ccf8:	3d01      	subs	r5, #1
 800ccfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ccfe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd06:	d1f0      	bne.n	800ccea <__ieee754_sqrt+0x8e>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f04f 0e20 	mov.w	lr, #32
 800cd0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cd12:	4282      	cmp	r2, r0
 800cd14:	eb06 0c05 	add.w	ip, r6, r5
 800cd18:	dc02      	bgt.n	800cd20 <__ieee754_sqrt+0xc4>
 800cd1a:	d113      	bne.n	800cd44 <__ieee754_sqrt+0xe8>
 800cd1c:	459c      	cmp	ip, r3
 800cd1e:	d811      	bhi.n	800cd44 <__ieee754_sqrt+0xe8>
 800cd20:	f1bc 0f00 	cmp.w	ip, #0
 800cd24:	eb0c 0506 	add.w	r5, ip, r6
 800cd28:	da43      	bge.n	800cdb2 <__ieee754_sqrt+0x156>
 800cd2a:	2d00      	cmp	r5, #0
 800cd2c:	db41      	blt.n	800cdb2 <__ieee754_sqrt+0x156>
 800cd2e:	f100 0801 	add.w	r8, r0, #1
 800cd32:	1a12      	subs	r2, r2, r0
 800cd34:	4640      	mov	r0, r8
 800cd36:	459c      	cmp	ip, r3
 800cd38:	bf88      	it	hi
 800cd3a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cd3e:	eba3 030c 	sub.w	r3, r3, ip
 800cd42:	4431      	add	r1, r6
 800cd44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cd48:	f1be 0e01 	subs.w	lr, lr, #1
 800cd4c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800cd50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cd58:	d1db      	bne.n	800cd12 <__ieee754_sqrt+0xb6>
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	d006      	beq.n	800cd6c <__ieee754_sqrt+0x110>
 800cd5e:	1c48      	adds	r0, r1, #1
 800cd60:	bf0b      	itete	eq
 800cd62:	4671      	moveq	r1, lr
 800cd64:	3101      	addne	r1, #1
 800cd66:	3401      	addeq	r4, #1
 800cd68:	f021 0101 	bicne.w	r1, r1, #1
 800cd6c:	1063      	asrs	r3, r4, #1
 800cd6e:	0849      	lsrs	r1, r1, #1
 800cd70:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cd74:	07e2      	lsls	r2, r4, #31
 800cd76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cd7a:	bf48      	it	mi
 800cd7c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cd80:	460e      	mov	r6, r1
 800cd82:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cd86:	e782      	b.n	800cc8e <__ieee754_sqrt+0x32>
 800cd88:	0ada      	lsrs	r2, r3, #11
 800cd8a:	3815      	subs	r0, #21
 800cd8c:	055b      	lsls	r3, r3, #21
 800cd8e:	2a00      	cmp	r2, #0
 800cd90:	d0fa      	beq.n	800cd88 <__ieee754_sqrt+0x12c>
 800cd92:	02d5      	lsls	r5, r2, #11
 800cd94:	d50a      	bpl.n	800cdac <__ieee754_sqrt+0x150>
 800cd96:	f1c1 0420 	rsb	r4, r1, #32
 800cd9a:	fa23 f404 	lsr.w	r4, r3, r4
 800cd9e:	1e4d      	subs	r5, r1, #1
 800cda0:	408b      	lsls	r3, r1
 800cda2:	4322      	orrs	r2, r4
 800cda4:	1b41      	subs	r1, r0, r5
 800cda6:	e789      	b.n	800ccbc <__ieee754_sqrt+0x60>
 800cda8:	4608      	mov	r0, r1
 800cdaa:	e7f0      	b.n	800cd8e <__ieee754_sqrt+0x132>
 800cdac:	0052      	lsls	r2, r2, #1
 800cdae:	3101      	adds	r1, #1
 800cdb0:	e7ef      	b.n	800cd92 <__ieee754_sqrt+0x136>
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	e7bd      	b.n	800cd32 <__ieee754_sqrt+0xd6>
 800cdb6:	bf00      	nop
 800cdb8:	7ff00000 	.word	0x7ff00000

0800cdbc <with_errno>:
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	4616      	mov	r6, r2
 800cdc4:	f000 f8b6 	bl	800cf34 <__errno>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	6006      	str	r6, [r0, #0]
 800cdcc:	4620      	mov	r0, r4
 800cdce:	bd70      	pop	{r4, r5, r6, pc}

0800cdd0 <xflow>:
 800cdd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdd2:	4615      	mov	r5, r2
 800cdd4:	461c      	mov	r4, r3
 800cdd6:	b180      	cbz	r0, 800cdfa <xflow+0x2a>
 800cdd8:	4610      	mov	r0, r2
 800cdda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdde:	e9cd 0100 	strd	r0, r1, [sp]
 800cde2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cde6:	4628      	mov	r0, r5
 800cde8:	4621      	mov	r1, r4
 800cdea:	f7f3 fb75 	bl	80004d8 <__aeabi_dmul>
 800cdee:	2222      	movs	r2, #34	; 0x22
 800cdf0:	b003      	add	sp, #12
 800cdf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdf6:	f7ff bfe1 	b.w	800cdbc <with_errno>
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	e7ee      	b.n	800cdde <xflow+0xe>

0800ce00 <__math_uflow>:
 800ce00:	2200      	movs	r2, #0
 800ce02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce06:	f7ff bfe3 	b.w	800cdd0 <xflow>

0800ce0a <__math_oflow>:
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ce10:	f7ff bfde 	b.w	800cdd0 <xflow>

0800ce14 <fabs>:
 800ce14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ce18:	4770      	bx	lr

0800ce1a <finite>:
 800ce1a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ce1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce22:	0fc0      	lsrs	r0, r0, #31
 800ce24:	4770      	bx	lr
	...

0800ce28 <scalbn>:
 800ce28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ce2e:	4604      	mov	r4, r0
 800ce30:	460d      	mov	r5, r1
 800ce32:	4617      	mov	r7, r2
 800ce34:	460b      	mov	r3, r1
 800ce36:	b996      	cbnz	r6, 800ce5e <scalbn+0x36>
 800ce38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce3c:	4303      	orrs	r3, r0
 800ce3e:	d039      	beq.n	800ceb4 <scalbn+0x8c>
 800ce40:	4b33      	ldr	r3, [pc, #204]	; (800cf10 <scalbn+0xe8>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	f7f3 fb48 	bl	80004d8 <__aeabi_dmul>
 800ce48:	4b32      	ldr	r3, [pc, #200]	; (800cf14 <scalbn+0xec>)
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	429f      	cmp	r7, r3
 800ce4e:	460d      	mov	r5, r1
 800ce50:	da0f      	bge.n	800ce72 <scalbn+0x4a>
 800ce52:	a32b      	add	r3, pc, #172	; (adr r3, 800cf00 <scalbn+0xd8>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 fb3e 	bl	80004d8 <__aeabi_dmul>
 800ce5c:	e006      	b.n	800ce6c <scalbn+0x44>
 800ce5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ce62:	4296      	cmp	r6, r2
 800ce64:	d10a      	bne.n	800ce7c <scalbn+0x54>
 800ce66:	4602      	mov	r2, r0
 800ce68:	f7f3 f980 	bl	800016c <__adddf3>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	e020      	b.n	800ceb4 <scalbn+0x8c>
 800ce72:	460b      	mov	r3, r1
 800ce74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ce78:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ce7c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ce80:	19b9      	adds	r1, r7, r6
 800ce82:	4291      	cmp	r1, r2
 800ce84:	dd0e      	ble.n	800cea4 <scalbn+0x7c>
 800ce86:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ce8a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ce8e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ce92:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ce96:	4820      	ldr	r0, [pc, #128]	; (800cf18 <scalbn+0xf0>)
 800ce98:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ce9c:	a31a      	add	r3, pc, #104	; (adr r3, 800cf08 <scalbn+0xe0>)
 800ce9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea2:	e7d9      	b.n	800ce58 <scalbn+0x30>
 800cea4:	2900      	cmp	r1, #0
 800cea6:	dd08      	ble.n	800ceba <scalbn+0x92>
 800cea8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ceb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cebe:	da12      	bge.n	800cee6 <scalbn+0xbe>
 800cec0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cec4:	429f      	cmp	r7, r3
 800cec6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ceca:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800cece:	dcdc      	bgt.n	800ce8a <scalbn+0x62>
 800ced0:	a30b      	add	r3, pc, #44	; (adr r3, 800cf00 <scalbn+0xd8>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ceda:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cede:	480f      	ldr	r0, [pc, #60]	; (800cf1c <scalbn+0xf4>)
 800cee0:	f041 011f 	orr.w	r1, r1, #31
 800cee4:	e7b8      	b.n	800ce58 <scalbn+0x30>
 800cee6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceea:	3136      	adds	r1, #54	; 0x36
 800ceec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cef0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cef4:	4620      	mov	r0, r4
 800cef6:	4629      	mov	r1, r5
 800cef8:	2200      	movs	r2, #0
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <scalbn+0xf8>)
 800cefc:	e7ac      	b.n	800ce58 <scalbn+0x30>
 800cefe:	bf00      	nop
 800cf00:	c2f8f359 	.word	0xc2f8f359
 800cf04:	01a56e1f 	.word	0x01a56e1f
 800cf08:	8800759c 	.word	0x8800759c
 800cf0c:	7e37e43c 	.word	0x7e37e43c
 800cf10:	43500000 	.word	0x43500000
 800cf14:	ffff3cb0 	.word	0xffff3cb0
 800cf18:	8800759c 	.word	0x8800759c
 800cf1c:	c2f8f359 	.word	0xc2f8f359
 800cf20:	3c900000 	.word	0x3c900000

0800cf24 <abort>:
 800cf24:	2006      	movs	r0, #6
 800cf26:	b508      	push	{r3, lr}
 800cf28:	f000 f974 	bl	800d214 <raise>
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	f7f4 f81e 	bl	8000f6e <_exit>
	...

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20000018 	.word	0x20000018

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	2600      	movs	r6, #0
 800cf44:	4d0c      	ldr	r5, [pc, #48]	; (800cf78 <__libc_init_array+0x38>)
 800cf46:	4c0d      	ldr	r4, [pc, #52]	; (800cf7c <__libc_init_array+0x3c>)
 800cf48:	1b64      	subs	r4, r4, r5
 800cf4a:	10a4      	asrs	r4, r4, #2
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	f000 f98a 	bl	800d268 <_init>
 800cf54:	2600      	movs	r6, #0
 800cf56:	4d0a      	ldr	r5, [pc, #40]	; (800cf80 <__libc_init_array+0x40>)
 800cf58:	4c0a      	ldr	r4, [pc, #40]	; (800cf84 <__libc_init_array+0x44>)
 800cf5a:	1b64      	subs	r4, r4, r5
 800cf5c:	10a4      	asrs	r4, r4, #2
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800d958 	.word	0x0800d958
 800cf7c:	0800d958 	.word	0x0800d958
 800cf80:	0800d958 	.word	0x0800d958
 800cf84:	0800d964 	.word	0x0800d964

0800cf88 <malloc>:
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <malloc+0xc>)
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	f000 b895 	b.w	800d0bc <_malloc_r>
 800cf92:	bf00      	nop
 800cf94:	20000018 	.word	0x20000018

0800cf98 <free>:
 800cf98:	4b02      	ldr	r3, [pc, #8]	; (800cfa4 <free+0xc>)
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	f000 b825 	b.w	800cfec <_free_r>
 800cfa2:	bf00      	nop
 800cfa4:	20000018 	.word	0x20000018

0800cfa8 <memmove>:
 800cfa8:	4288      	cmp	r0, r1
 800cfaa:	b510      	push	{r4, lr}
 800cfac:	eb01 0402 	add.w	r4, r1, r2
 800cfb0:	d902      	bls.n	800cfb8 <memmove+0x10>
 800cfb2:	4284      	cmp	r4, r0
 800cfb4:	4623      	mov	r3, r4
 800cfb6:	d807      	bhi.n	800cfc8 <memmove+0x20>
 800cfb8:	1e43      	subs	r3, r0, #1
 800cfba:	42a1      	cmp	r1, r4
 800cfbc:	d008      	beq.n	800cfd0 <memmove+0x28>
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc6:	e7f8      	b.n	800cfba <memmove+0x12>
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4402      	add	r2, r0
 800cfcc:	428a      	cmp	r2, r1
 800cfce:	d100      	bne.n	800cfd2 <memmove+0x2a>
 800cfd0:	bd10      	pop	{r4, pc}
 800cfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfda:	e7f7      	b.n	800cfcc <memmove+0x24>

0800cfdc <memset>:
 800cfdc:	4603      	mov	r3, r0
 800cfde:	4402      	add	r2, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>

0800cfec <_free_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4605      	mov	r5, r0
 800cff0:	2900      	cmp	r1, #0
 800cff2:	d040      	beq.n	800d076 <_free_r+0x8a>
 800cff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff8:	1f0c      	subs	r4, r1, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfb8      	it	lt
 800cffe:	18e4      	addlt	r4, r4, r3
 800d000:	f000 f924 	bl	800d24c <__malloc_lock>
 800d004:	4a1c      	ldr	r2, [pc, #112]	; (800d078 <_free_r+0x8c>)
 800d006:	6813      	ldr	r3, [r2, #0]
 800d008:	b933      	cbnz	r3, 800d018 <_free_r+0x2c>
 800d00a:	6063      	str	r3, [r4, #4]
 800d00c:	6014      	str	r4, [r2, #0]
 800d00e:	4628      	mov	r0, r5
 800d010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d014:	f000 b920 	b.w	800d258 <__malloc_unlock>
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d908      	bls.n	800d02e <_free_r+0x42>
 800d01c:	6820      	ldr	r0, [r4, #0]
 800d01e:	1821      	adds	r1, r4, r0
 800d020:	428b      	cmp	r3, r1
 800d022:	bf01      	itttt	eq
 800d024:	6819      	ldreq	r1, [r3, #0]
 800d026:	685b      	ldreq	r3, [r3, #4]
 800d028:	1809      	addeq	r1, r1, r0
 800d02a:	6021      	streq	r1, [r4, #0]
 800d02c:	e7ed      	b.n	800d00a <_free_r+0x1e>
 800d02e:	461a      	mov	r2, r3
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b10b      	cbz	r3, 800d038 <_free_r+0x4c>
 800d034:	42a3      	cmp	r3, r4
 800d036:	d9fa      	bls.n	800d02e <_free_r+0x42>
 800d038:	6811      	ldr	r1, [r2, #0]
 800d03a:	1850      	adds	r0, r2, r1
 800d03c:	42a0      	cmp	r0, r4
 800d03e:	d10b      	bne.n	800d058 <_free_r+0x6c>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	4401      	add	r1, r0
 800d044:	1850      	adds	r0, r2, r1
 800d046:	4283      	cmp	r3, r0
 800d048:	6011      	str	r1, [r2, #0]
 800d04a:	d1e0      	bne.n	800d00e <_free_r+0x22>
 800d04c:	6818      	ldr	r0, [r3, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	4401      	add	r1, r0
 800d052:	6011      	str	r1, [r2, #0]
 800d054:	6053      	str	r3, [r2, #4]
 800d056:	e7da      	b.n	800d00e <_free_r+0x22>
 800d058:	d902      	bls.n	800d060 <_free_r+0x74>
 800d05a:	230c      	movs	r3, #12
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	e7d6      	b.n	800d00e <_free_r+0x22>
 800d060:	6820      	ldr	r0, [r4, #0]
 800d062:	1821      	adds	r1, r4, r0
 800d064:	428b      	cmp	r3, r1
 800d066:	bf01      	itttt	eq
 800d068:	6819      	ldreq	r1, [r3, #0]
 800d06a:	685b      	ldreq	r3, [r3, #4]
 800d06c:	1809      	addeq	r1, r1, r0
 800d06e:	6021      	streq	r1, [r4, #0]
 800d070:	6063      	str	r3, [r4, #4]
 800d072:	6054      	str	r4, [r2, #4]
 800d074:	e7cb      	b.n	800d00e <_free_r+0x22>
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	200001bc 	.word	0x200001bc

0800d07c <sbrk_aligned>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4e0e      	ldr	r6, [pc, #56]	; (800d0b8 <sbrk_aligned+0x3c>)
 800d080:	460c      	mov	r4, r1
 800d082:	6831      	ldr	r1, [r6, #0]
 800d084:	4605      	mov	r5, r0
 800d086:	b911      	cbnz	r1, 800d08e <sbrk_aligned+0x12>
 800d088:	f000 f88c 	bl	800d1a4 <_sbrk_r>
 800d08c:	6030      	str	r0, [r6, #0]
 800d08e:	4621      	mov	r1, r4
 800d090:	4628      	mov	r0, r5
 800d092:	f000 f887 	bl	800d1a4 <_sbrk_r>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d00a      	beq.n	800d0b0 <sbrk_aligned+0x34>
 800d09a:	1cc4      	adds	r4, r0, #3
 800d09c:	f024 0403 	bic.w	r4, r4, #3
 800d0a0:	42a0      	cmp	r0, r4
 800d0a2:	d007      	beq.n	800d0b4 <sbrk_aligned+0x38>
 800d0a4:	1a21      	subs	r1, r4, r0
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f000 f87c 	bl	800d1a4 <_sbrk_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d101      	bne.n	800d0b4 <sbrk_aligned+0x38>
 800d0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	200001c0 	.word	0x200001c0

0800d0bc <_malloc_r>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	1ccd      	adds	r5, r1, #3
 800d0c2:	f025 0503 	bic.w	r5, r5, #3
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	2d0c      	cmp	r5, #12
 800d0ca:	bf38      	it	cc
 800d0cc:	250c      	movcc	r5, #12
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	db01      	blt.n	800d0d8 <_malloc_r+0x1c>
 800d0d4:	42a9      	cmp	r1, r5
 800d0d6:	d905      	bls.n	800d0e4 <_malloc_r+0x28>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	2600      	movs	r6, #0
 800d0dc:	603b      	str	r3, [r7, #0]
 800d0de:	4630      	mov	r0, r6
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e4:	4e2e      	ldr	r6, [pc, #184]	; (800d1a0 <_malloc_r+0xe4>)
 800d0e6:	f000 f8b1 	bl	800d24c <__malloc_lock>
 800d0ea:	6833      	ldr	r3, [r6, #0]
 800d0ec:	461c      	mov	r4, r3
 800d0ee:	bb34      	cbnz	r4, 800d13e <_malloc_r+0x82>
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	f7ff ffc2 	bl	800d07c <sbrk_aligned>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	d14d      	bne.n	800d19a <_malloc_r+0xde>
 800d0fe:	6834      	ldr	r4, [r6, #0]
 800d100:	4626      	mov	r6, r4
 800d102:	2e00      	cmp	r6, #0
 800d104:	d140      	bne.n	800d188 <_malloc_r+0xcc>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	4631      	mov	r1, r6
 800d10a:	4638      	mov	r0, r7
 800d10c:	eb04 0803 	add.w	r8, r4, r3
 800d110:	f000 f848 	bl	800d1a4 <_sbrk_r>
 800d114:	4580      	cmp	r8, r0
 800d116:	d13a      	bne.n	800d18e <_malloc_r+0xd2>
 800d118:	6821      	ldr	r1, [r4, #0]
 800d11a:	3503      	adds	r5, #3
 800d11c:	1a6d      	subs	r5, r5, r1
 800d11e:	f025 0503 	bic.w	r5, r5, #3
 800d122:	3508      	adds	r5, #8
 800d124:	2d0c      	cmp	r5, #12
 800d126:	bf38      	it	cc
 800d128:	250c      	movcc	r5, #12
 800d12a:	4638      	mov	r0, r7
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7ff ffa5 	bl	800d07c <sbrk_aligned>
 800d132:	3001      	adds	r0, #1
 800d134:	d02b      	beq.n	800d18e <_malloc_r+0xd2>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	442b      	add	r3, r5
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	e00e      	b.n	800d15c <_malloc_r+0xa0>
 800d13e:	6822      	ldr	r2, [r4, #0]
 800d140:	1b52      	subs	r2, r2, r5
 800d142:	d41e      	bmi.n	800d182 <_malloc_r+0xc6>
 800d144:	2a0b      	cmp	r2, #11
 800d146:	d916      	bls.n	800d176 <_malloc_r+0xba>
 800d148:	1961      	adds	r1, r4, r5
 800d14a:	42a3      	cmp	r3, r4
 800d14c:	6025      	str	r5, [r4, #0]
 800d14e:	bf18      	it	ne
 800d150:	6059      	strne	r1, [r3, #4]
 800d152:	6863      	ldr	r3, [r4, #4]
 800d154:	bf08      	it	eq
 800d156:	6031      	streq	r1, [r6, #0]
 800d158:	5162      	str	r2, [r4, r5]
 800d15a:	604b      	str	r3, [r1, #4]
 800d15c:	4638      	mov	r0, r7
 800d15e:	f104 060b 	add.w	r6, r4, #11
 800d162:	f000 f879 	bl	800d258 <__malloc_unlock>
 800d166:	f026 0607 	bic.w	r6, r6, #7
 800d16a:	1d23      	adds	r3, r4, #4
 800d16c:	1af2      	subs	r2, r6, r3
 800d16e:	d0b6      	beq.n	800d0de <_malloc_r+0x22>
 800d170:	1b9b      	subs	r3, r3, r6
 800d172:	50a3      	str	r3, [r4, r2]
 800d174:	e7b3      	b.n	800d0de <_malloc_r+0x22>
 800d176:	6862      	ldr	r2, [r4, #4]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	bf0c      	ite	eq
 800d17c:	6032      	streq	r2, [r6, #0]
 800d17e:	605a      	strne	r2, [r3, #4]
 800d180:	e7ec      	b.n	800d15c <_malloc_r+0xa0>
 800d182:	4623      	mov	r3, r4
 800d184:	6864      	ldr	r4, [r4, #4]
 800d186:	e7b2      	b.n	800d0ee <_malloc_r+0x32>
 800d188:	4634      	mov	r4, r6
 800d18a:	6876      	ldr	r6, [r6, #4]
 800d18c:	e7b9      	b.n	800d102 <_malloc_r+0x46>
 800d18e:	230c      	movs	r3, #12
 800d190:	4638      	mov	r0, r7
 800d192:	603b      	str	r3, [r7, #0]
 800d194:	f000 f860 	bl	800d258 <__malloc_unlock>
 800d198:	e7a1      	b.n	800d0de <_malloc_r+0x22>
 800d19a:	6025      	str	r5, [r4, #0]
 800d19c:	e7de      	b.n	800d15c <_malloc_r+0xa0>
 800d19e:	bf00      	nop
 800d1a0:	200001bc 	.word	0x200001bc

0800d1a4 <_sbrk_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4d05      	ldr	r5, [pc, #20]	; (800d1c0 <_sbrk_r+0x1c>)
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	f7f3 fee8 	bl	8000f84 <_sbrk>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_sbrk_r+0x1a>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_sbrk_r+0x1a>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	200001c4 	.word	0x200001c4

0800d1c4 <_raise_r>:
 800d1c4:	291f      	cmp	r1, #31
 800d1c6:	b538      	push	{r3, r4, r5, lr}
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	d904      	bls.n	800d1d8 <_raise_r+0x14>
 800d1ce:	2316      	movs	r3, #22
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1da:	b112      	cbz	r2, 800d1e2 <_raise_r+0x1e>
 800d1dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1e0:	b94b      	cbnz	r3, 800d1f6 <_raise_r+0x32>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f830 	bl	800d248 <_getpid_r>
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f2:	f000 b817 	b.w	800d224 <_kill_r>
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d00a      	beq.n	800d210 <_raise_r+0x4c>
 800d1fa:	1c59      	adds	r1, r3, #1
 800d1fc:	d103      	bne.n	800d206 <_raise_r+0x42>
 800d1fe:	2316      	movs	r3, #22
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	2001      	movs	r0, #1
 800d204:	e7e7      	b.n	800d1d6 <_raise_r+0x12>
 800d206:	2400      	movs	r4, #0
 800d208:	4628      	mov	r0, r5
 800d20a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d20e:	4798      	blx	r3
 800d210:	2000      	movs	r0, #0
 800d212:	e7e0      	b.n	800d1d6 <_raise_r+0x12>

0800d214 <raise>:
 800d214:	4b02      	ldr	r3, [pc, #8]	; (800d220 <raise+0xc>)
 800d216:	4601      	mov	r1, r0
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	f7ff bfd3 	b.w	800d1c4 <_raise_r>
 800d21e:	bf00      	nop
 800d220:	20000018 	.word	0x20000018

0800d224 <_kill_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	2300      	movs	r3, #0
 800d228:	4d06      	ldr	r5, [pc, #24]	; (800d244 <_kill_r+0x20>)
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	4611      	mov	r1, r2
 800d230:	602b      	str	r3, [r5, #0]
 800d232:	f7f3 fe8c 	bl	8000f4e <_kill>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d102      	bne.n	800d240 <_kill_r+0x1c>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b103      	cbz	r3, 800d240 <_kill_r+0x1c>
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	200001c4 	.word	0x200001c4

0800d248 <_getpid_r>:
 800d248:	f7f3 be7a 	b.w	8000f40 <_getpid>

0800d24c <__malloc_lock>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__malloc_lock+0x8>)
 800d24e:	f000 b809 	b.w	800d264 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	200001c8 	.word	0x200001c8

0800d258 <__malloc_unlock>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__malloc_unlock+0x8>)
 800d25a:	f000 b804 	b.w	800d266 <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	200001c8 	.word	0x200001c8

0800d264 <__retarget_lock_acquire_recursive>:
 800d264:	4770      	bx	lr

0800d266 <__retarget_lock_release_recursive>:
 800d266:	4770      	bx	lr

0800d268 <_init>:
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	bf00      	nop
 800d26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26e:	bc08      	pop	{r3}
 800d270:	469e      	mov	lr, r3
 800d272:	4770      	bx	lr

0800d274 <_fini>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	bf00      	nop
 800d278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27a:	bc08      	pop	{r3}
 800d27c:	469e      	mov	lr, r3
 800d27e:	4770      	bx	lr
